

CREATE schema jazzhands;
ALTER USER jazzhands SET search_path = jazzhands;
set search_path = jazzhands;


-- Copyright (c) 2005-2010, Vonage Holdings Corp.
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are met:
--     * Redistributions of source code must retain the above copyright
--       notice, this list of conditions and the following disclaimer.
--     * Redistributions in binary form must reproduce the above copyright
--       notice, this list of conditions and the following disclaimer in the
--       documentation and/or other materials provided with the distribution.
--
-- THIS SOFTWARE IS PROVIDED BY VONAGE HOLDINGS CORP. ''AS IS'' AND ANY
-- EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-- WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-- DISCLAIMED. IN NO EVENT SHALL VONAGE HOLDINGS CORP. BE LIABLE FOR ANY
-- DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-- (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
-- ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--

--
-- Copyright (c) 2010-2014 Todd Kover
-- All rights reserved.
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.



--
-- $Id$
--

/***********************************************
 * Table: ACCOUNT
 ***********************************************/

CREATE TABLE ACCOUNT
(
	ACCOUNT_ID SERIAL NOT NULL 
,
	LOGIN                VARCHAR(50) NOT NULL 
,
	PERSON_ID            INTEGER NOT NULL,
	COMPANY_ID           INTEGER NOT NULL,
	ACCOUNT_REALM_ID     INTEGER NOT NULL,
	ACCOUNT_STATUS       VARCHAR(50) NOT NULL 
,
	ACCOUNT_ROLE         VARCHAR(50) NOT NULL,
	ACCOUNT_TYPE         VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE ACCOUNT
	ADD CONSTRAINT  PK_ACCOUNT_ID PRIMARY KEY (ACCOUNT_ID)       ;

ALTER TABLE ACCOUNT
ADD CONSTRAINT  AK_UQ_ACCOUNT_LGN_REALM UNIQUE (ACCOUNT_REALM_ID,LOGIN);

CREATE  INDEX XIF8ACCOUNT ON ACCOUNT
(ACCOUNT_REALM_ID   ASC);

CREATE  INDEX XIF9ACCOUNT ON ACCOUNT
(ACCOUNT_ROLE   ASC);

CREATE  INDEX XIF11ACCOUNT ON ACCOUNT
(COMPANY_ID   ASC,PERSON_ID   ASC);

CREATE  INDEX XIF12ACCOUNT ON ACCOUNT
(PERSON_ID   ASC,COMPANY_ID   ASC,ACCOUNT_REALM_ID   ASC);

CREATE INDEX IDX_ACCOUNT_ACCOUNT_STATUS ON ACCOUNT
(ACCOUNT_STATUS   ASC);

CREATE INDEX IDX_ACCOUNT_ACCOUNT_TPE ON ACCOUNT
(ACCOUNT_TYPE   ASC);

/***********************************************
 * Table: ACCOUNT_ASSIGND_CERT
 ***********************************************/

CREATE TABLE ACCOUNT_ASSIGND_CERT
(
	ACCOUNT_ID           INTEGER NOT NULL 
,
	X509_CERT_ID         INTEGER NOT NULL 
,
	X509_KEY_USG         VARCHAR(50) NOT NULL 
,
	KEY_USAGE_REASON_FOR_ASSIGN VARCHAR(50) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE ACCOUNT_ASSIGND_CERT IS 'Actual  assignment of the usage category USER Certificates to System Users.';

COMMENT ON COLUMN ACCOUNT_ASSIGND_CERT.X509_KEY_USG IS 'Name of the Certificate.';

COMMENT ON COLUMN ACCOUNT_ASSIGND_CERT.X509_CERT_ID IS 'Uniquely identifies Certificate';

COMMENT ON COLUMN ACCOUNT_ASSIGND_CERT.KEY_USAGE_REASON_FOR_ASSIGN IS 'Uniquely identifies and indicates reason for assignment.';

ALTER TABLE ACCOUNT_ASSIGND_CERT
	ADD CONSTRAINT  PK_ACCOUNT_ASSIGNED_CER PRIMARY KEY (ACCOUNT_ID,X509_CERT_ID,X509_KEY_USG)       ;

/***********************************************
 * Table: ACCOUNT_AUTH_LOG
 ***********************************************/

CREATE TABLE ACCOUNT_AUTH_LOG
(
	ACCOUNT_ID           INTEGER NOT NULL 
,
	ACCOUNT_AUTH_TS      TIMESTAMP(6) NOT NULL 
,
	AUTH_RESOURCE        VARCHAR(50) NOT NULL 
,
	ACCOUNT_AUTH_SEQ     INTEGER NOT NULL 
,
	WAS_AUTH_SUCCESS     CHAR(1) NOT NULL 
,
	AUTH_RESOURCE_INSTANCE VARCHAR(50) NOT NULL 
,
	AUTH_ORIGIN          VARCHAR(50) NOT NULL 
,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_INS_USER        VARCHAR(255) NULL 
);

COMMENT ON TABLE ACCOUNT_AUTH_LOG IS 'Captures all system user authorizations for access to Vonage resources.';

COMMENT ON COLUMN ACCOUNT_AUTH_LOG.ACCOUNT_AUTH_SEQ IS 'This sequence is to support table PK with timestamps recived rounded to the secend and generating duplicates.';

COMMENT ON COLUMN ACCOUNT_AUTH_LOG.AUTH_RESOURCE_INSTANCE IS 'Keeps track of the server where a user was authenticating for a given resource';

COMMENT ON COLUMN ACCOUNT_AUTH_LOG.AUTH_ORIGIN IS 'Keeps track of where the request for authentication originated from.';

ALTER TABLE ACCOUNT_AUTH_LOG
	ADD CONSTRAINT  PK_ACCOUNT_AUTH_LOG PRIMARY KEY (ACCOUNT_ID,ACCOUNT_AUTH_TS,AUTH_RESOURCE,ACCOUNT_AUTH_SEQ)       ;

ALTER TABLE ACCOUNT_AUTH_LOG
	ADD CONSTRAINT  CKC_SYS_USR_AUTHLG_SUCCESS CHECK (WAS_AUTH_SUCCESS in ('Y','N')
			and WAS_AUTH_SUCCESS =
			upper(WAS_AUTH_SUCCESS));

CREATE  INDEX XIEACCTAUTHLOG_TS_ARSRC ON ACCOUNT_AUTH_LOG
(ACCOUNT_AUTH_TS   ASC,AUTH_RESOURCE   ASC);

/***********************************************
 * Table: ACCOUNT_COLLECTION
 ***********************************************/

CREATE TABLE ACCOUNT_COLLECTION
(
	ACCOUNT_COLLECTION_ID SERIAL NOT NULL 
,
	ACCOUNT_COLLECTION_NAME VARCHAR(255) NOT NULL 
,
	ACCOUNT_COLLECTION_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE ACCOUNT_COLLECTION
	ADD CONSTRAINT  PK_ACCOUNT_COLLECTION PRIMARY KEY (ACCOUNT_COLLECTION_ID)       ;

ALTER TABLE ACCOUNT_COLLECTION
ADD CONSTRAINT  UQ_ACCT_COLLECTION_NAME UNIQUE (ACCOUNT_COLLECTION_NAME,ACCOUNT_COLLECTION_TYPE)       ;

CREATE INDEX IDX_ACCTCOL_ACCTCOLTYPE ON ACCOUNT_COLLECTION
(ACCOUNT_COLLECTION_TYPE   ASC);

CREATE TABLE ACCOUNT_COLLECTION_ACCOUNT
(
	ACCOUNT_COLLECTION_ID INTEGER NOT NULL 
,
	ACCOUNT_ID           INTEGER NOT NULL 
,
	ACCOUNT_ID_RANK      INTEGER NULL,
	START_DATE           TIMESTAMP NULL,
	FINISH_DATE          TIMESTAMP NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE ACCOUNT_COLLECTION_ACCOUNT
	ADD CONSTRAINT  PK_ACCOUNT_COLLECTION_USER PRIMARY KEY (ACCOUNT_COLLECTION_ID,ACCOUNT_ID)       ;

ALTER TABLE ACCOUNT_COLLECTION_ACCOUNT
ADD CONSTRAINT  AK_ACCTCOL_ACCT_RANK UNIQUE (ACCOUNT_COLLECTION_ID,ACCOUNT_ID_RANK);

/***********************************************
 * Table: ACCOUNT_COLLECTION_HIER
 ***********************************************/

CREATE TABLE ACCOUNT_COLLECTION_HIER
(
	ACCOUNT_COLLECTION_ID INTEGER NOT NULL 
,
	CHILD_ACCOUNT_COLLECTION_ID INTEGER NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE ACCOUNT_COLLECTION_HIER
	ADD CONSTRAINT  PK_ACCOUNT_COLLECTION_HIER PRIMARY KEY (ACCOUNT_COLLECTION_ID,CHILD_ACCOUNT_COLLECTION_ID)       ;

/***********************************************
 * Table: ACCOUNT_PASSWORD
 ***********************************************/

CREATE TABLE ACCOUNT_PASSWORD
(
	ACCOUNT_ID           INTEGER NOT NULL 
,
	PASSWORD_TYPE        VARCHAR(50) NOT NULL 
,
	PASSWORD             VARCHAR(255) NOT NULL 
,
	CHANGE_TIME          TIMESTAMP WITH TIME ZONE NULL,
	EXPIRE_TIME          TIMESTAMP WITH TIME ZONE NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE ACCOUNT_PASSWORD
	ADD CONSTRAINT  PK_SYSTEM_PASSWORD PRIMARY KEY (ACCOUNT_ID,PASSWORD_TYPE)       ;

/***********************************************
 * Table: ACCOUNT_REALM
 ***********************************************/

CREATE TABLE ACCOUNT_REALM
(
	ACCOUNT_REALM_ID SERIAL NOT NULL 
,
	ACCOUNT_REALM_NAME   VARCHAR(100) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE ACCOUNT_REALM
	ADD CONSTRAINT  PK_ACCOUNT_REALM PRIMARY KEY (ACCOUNT_REALM_ID)       ;

CREATE  INDEX IDX_ACCOUNT_REALM_AR_NAME ON ACCOUNT_REALM
(ACCOUNT_REALM_NAME   ASC);

/***********************************************
 * Table: ACCOUNT_REALM_ACCT_COLL_TYPE
 ***********************************************/

CREATE TABLE ACCOUNT_REALM_ACCT_COLL_TYPE
(
	ACCOUNT_REALM_ID     INTEGER NOT NULL 
,
	ACCOUNT_COLLECTION_TYPE VARCHAR(50) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE ACCOUNT_REALM_ACCT_COLL_TYPE
	ADD CONSTRAINT  PK_ACCOUNT_REALM_ACCT_COLL_TYP PRIMARY KEY (ACCOUNT_REALM_ID,ACCOUNT_COLLECTION_TYPE)       ;

CREATE  INDEX XIF1_ACCT_REALM_ACCT_COLL_TYP ON ACCOUNT_REALM_ACCT_COLL_TYPE
(ACCOUNT_COLLECTION_TYPE   ASC);

CREATE  INDEX XIF2_ACCT_REALM_ACCT_COLL_ARID ON ACCOUNT_REALM_ACCT_COLL_TYPE
(ACCOUNT_REALM_ID   ASC);

/***********************************************
 * Table: ACCOUNT_REALM_COMPANY
 ***********************************************/

CREATE TABLE ACCOUNT_REALM_COMPANY
(
	ACCOUNT_REALM_ID     INTEGER NOT NULL 
,
	COMPANY_ID           INTEGER NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE ACCOUNT_REALM_COMPANY
	ADD CONSTRAINT  PK_ACCOUNT_REALM_COMPANY PRIMARY KEY (ACCOUNT_REALM_ID,COMPANY_ID)       ;

ALTER TABLE ACCOUNT_REALM_COMPANY
ADD CONSTRAINT  AK_ACCOUNT_REALM_COMPANY_COMPA UNIQUE (COMPANY_ID);

CREATE  INDEX XIF2ACCOUNT_REALM_COMPANY ON ACCOUNT_REALM_COMPANY
(ACCOUNT_REALM_ID   ASC);

/***********************************************
 * Table: ACCOUNT_SSH_KEY
 ***********************************************/

CREATE TABLE ACCOUNT_SSH_KEY
(
	ACCOUNT_ID           INTEGER NOT NULL,
	SSH_KEY_ID           INTEGER NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE ACCOUNT_SSH_KEY
	ADD CONSTRAINT  PK_ACCOUNT_SSH_KEY PRIMARY KEY (ACCOUNT_ID,SSH_KEY_ID)       ;

CREATE  INDEX XIF1ACCOUNT_SSH_KEY ON ACCOUNT_SSH_KEY
(ACCOUNT_ID   ASC);

CREATE  INDEX XIF2ACCOUNT_SSH_KEY ON ACCOUNT_SSH_KEY
(SSH_KEY_ID   ASC);

/***********************************************
 * Table: ACCOUNT_TOKEN
 ***********************************************/

CREATE TABLE ACCOUNT_TOKEN
(
	ACCOUNT_TOKEN_ID SERIAL NOT NULL,
	ACCOUNT_ID           INTEGER NOT NULL 
,
	TOKEN_ID             INTEGER NOT NULL 
,
	ISSUED_DATE          TIMESTAMP WITH TIME ZONE NOT NULL 
,
	IS_USER_TOKEN_LOCKED CHAR(1) NOT NULL 
,
	TOKEN_UNLOCK_TIME    TIMESTAMP WITH TIME ZONE NULL,
	BAD_LOGINS           INTEGER NULL,
	LAST_UPDATED         TIMESTAMP WITH TIME ZONE NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN ACCOUNT_TOKEN.ACCOUNT_TOKEN_ID IS 'This is its own PK in order to better handle auditing.';

ALTER TABLE ACCOUNT_TOKEN
	ADD CONSTRAINT  PK_ACCOUNT_TOKEN PRIMARY KEY (ACCOUNT_TOKEN_ID)       ;

ALTER TABLE ACCOUNT_TOKEN
ADD CONSTRAINT  AK_ACCOUNT_TOKEN_TKEN_ACCT UNIQUE (ACCOUNT_ID,TOKEN_ID);

ALTER TABLE ACCOUNT_TOKEN
	ADD CONSTRAINT  CKC_IS_USER_TOKEN_LOC_SYSTEM_U CHECK (IS_USER_TOKEN_LOCKED in ('Y','N') and IS_USER_TOKEN_LOCKED = upper(IS_USER_TOKEN_LOCKED));

ALTER TABLE ACCOUNT_TOKEN
	ALTER IS_USER_TOKEN_LOCKED SET DEFAULT 'Y';

CREATE INDEX IDX_ACCTTOKEN_USRTOKENLOCKED ON ACCOUNT_TOKEN
(IS_USER_TOKEN_LOCKED   ASC);

/***********************************************
 * Table: ACCOUNT_UNIX_INFO
 ***********************************************/

CREATE TABLE ACCOUNT_UNIX_INFO
(
	ACCOUNT_ID           INTEGER NOT NULL 
,
	UNIX_UID             INTEGER NOT NULL 
,
	UNIX_GROUP_ACCT_COLLECTION_ID INTEGER NOT NULL,
	SHELL                VARCHAR(255) NOT NULL 
,
	DEFAULT_HOME         VARCHAR(50) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE ACCOUNT_UNIX_INFO
	ADD CONSTRAINT  PK_ACCOUNT_UNIX_INFO PRIMARY KEY (ACCOUNT_ID)       ;

ALTER TABLE ACCOUNT_UNIX_INFO
ADD CONSTRAINT  AK_ACCOUNT_UNIX_INFO_UNIX_UID UNIQUE (UNIX_UID)       ;

CREATE  INDEX XIF3ACCOUNT_UNIX_INFO ON ACCOUNT_UNIX_INFO
(UNIX_GROUP_ACCT_COLLECTION_ID   ASC);

CREATE  INDEX XIF4ACCOUNT_UNIX_INFO ON ACCOUNT_UNIX_INFO
(UNIX_GROUP_ACCT_COLLECTION_ID   ASC,ACCOUNT_ID   ASC);

/***********************************************
 * Table: APPAAL
 ***********************************************/

CREATE TABLE APPAAL
(
	APPAAL_ID SERIAL NOT NULL 
,
	APPAAL_NAME          VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE APPAAL
	ADD CONSTRAINT  PK_APPAAL PRIMARY KEY (APPAAL_ID)       ;

/***********************************************
 * Table: APPAAL_INSTANCE
 ***********************************************/

CREATE TABLE APPAAL_INSTANCE
(
	APPAAL_INSTANCE_ID SERIAL NOT NULL 
,
	APPAAL_ID            INTEGER NULL,
	SERVICE_ENVIRONMENT_ID INTEGER NOT NULL,
	FILE_MODE            INTEGER NOT NULL 
,
	FILE_OWNER_ACCOUNT_ID INTEGER NOT NULL,
	FILE_GROUP_ACCT_COLLECTION_ID INTEGER NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE APPAAL_INSTANCE
	ADD CONSTRAINT  PK_APPAAL_INSTANCE PRIMARY KEY (APPAAL_INSTANCE_ID)       ;

ALTER TABLE APPAAL_INSTANCE
	ADD CONSTRAINT  CKC_FILE_MODE_APPAAL_I CHECK (FILE_MODE between 0 and 4095);

CREATE  INDEX XIFAPPAAL_INST_FILGRPACCTCOLID ON APPAAL_INSTANCE
(FILE_GROUP_ACCT_COLLECTION_ID   ASC);

/***********************************************
 * Table: APPAAL_INSTANCE_DEVICE_COLL
 ***********************************************/

CREATE TABLE APPAAL_INSTANCE_DEVICE_COLL
(
	DEVICE_COLLECTION_ID INTEGER NOT NULL 
,
	APPAAL_INSTANCE_ID   INTEGER NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE APPAAL_INSTANCE_DEVICE_COLL
	ADD CONSTRAINT  PK_APPAAL_INSTANCE_DEVICE_COLL PRIMARY KEY (DEVICE_COLLECTION_ID,APPAAL_INSTANCE_ID)       ;

/***********************************************
 * Table: APPAAL_INSTANCE_PROPERTY
 ***********************************************/

CREATE TABLE APPAAL_INSTANCE_PROPERTY
(
	APPAAL_INSTANCE_ID   INTEGER NOT NULL 
,
	APP_KEY              VARCHAR(50) NOT NULL 
,
	APP_VALUE            VARCHAR(4000) NOT NULL 
,
	ENCRYPTION_KEY_ID    INTEGER NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN APPAAL_INSTANCE_PROPERTY.ENCRYPTION_KEY_ID IS 'encryption information for app_value, if used';

ALTER TABLE APPAAL_INSTANCE_PROPERTY
	ADD CONSTRAINT  PK_APPAAL_INSTANCE_PROPERTY PRIMARY KEY (APPAAL_INSTANCE_ID,APP_KEY)       ;

CREATE  INDEX IND_AAIPROP_KEY_VALUE ON APPAAL_INSTANCE_PROPERTY
(APP_KEY   ASC,APP_VALUE   ASC);

/***********************************************
 * Table: ASSET
 ***********************************************/

CREATE TABLE ASSET
(
	ASSET_ID SERIAL NOT NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	SERIAL_NUMBER        VARCHAR(255) NULL,
	PART_NUMBER          VARCHAR(255) NULL,
	ASSET_TAG            VARCHAR(255) NULL,
	OWNERSHIP_STATUS     VARCHAR(50) NOT NULL,
	LEASE_EXPIRATION_DATE TIMESTAMP WITH TIME ZONE NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL,
	CONTRACT_ID          INTEGER NULL 
);

ALTER TABLE ASSET
	ADD CONSTRAINT  PK_ASSET PRIMARY KEY (ASSET_ID)       ;

CREATE  INDEX XIF_ASSET_CONTRACT_ID ON ASSET
(CONTRACT_ID   ASC);

CREATE  INDEX XIF_ASSET_OWNSHP_STAT ON ASSET
(OWNERSHIP_STATUS   ASC);

/***********************************************
 * Table: BADGE
 ***********************************************/

CREATE TABLE BADGE
(
	CARD_NUMBER          INTEGER NOT NULL 
,
	BADGE_TYPE_ID        INTEGER NOT NULL 
,
	BADGE_STATUS         VARCHAR(50) NOT NULL 
,
	DATE_ASSIGNED        TIMESTAMP WITH TIME ZONE NULL,
	DATE_RECLAIMED       TIMESTAMP WITH TIME ZONE NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE BADGE
	ADD CONSTRAINT  PK_BADGE PRIMARY KEY (CARD_NUMBER)       ;

/***********************************************
 * Table: BADGE_TYPE
 ***********************************************/

CREATE TABLE BADGE_TYPE
(
	BADGE_TYPE_ID SERIAL NOT NULL 
,
	BADGE_TYPE_NAME      VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	BADGE_COLOR          VARCHAR(50) NOT NULL 
,
	BADGE_TEMPLATE_NAME  VARCHAR(255) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE BADGE_TYPE
	ADD CONSTRAINT  PK_BADGE_TYPE PRIMARY KEY (BADGE_TYPE_ID)       ;

ALTER TABLE BADGE_TYPE
ADD CONSTRAINT  AK_UQ_BADGE_COLOR_BADGE_TY UNIQUE (BADGE_COLOR)       ;

ALTER TABLE BADGE_TYPE
ADD CONSTRAINT  AK_UQ_BADGE_TYPE_NAME_BADGE_TY UNIQUE (BADGE_TYPE_NAME)       ;

/***********************************************
 * Table: CHASSIS_LOCATION
 ***********************************************/

CREATE TABLE CHASSIS_LOCATION
(
	CHASSIS_LOCATION_ID SERIAL NOT NULL 
,
	CHASSIS_DEVICE_TYPE_ID INTEGER NOT NULL,
	DEVICE_TYPE_MODULE_NAME VARCHAR(255) NOT NULL,
	CHASSIS_DEVICE_ID    INTEGER NOT NULL,
	MODULE_DEVICE_TYPE_ID INTEGER NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN CHASSIS_LOCATION.CHASSIS_DEVICE_TYPE_ID IS 'Device Type of the Container Device (Chassis)';

COMMENT ON COLUMN CHASSIS_LOCATION.DEVICE_TYPE_MODULE_NAME IS 'Name used to describe the module programatically.';

ALTER TABLE CHASSIS_LOCATION
	ADD CONSTRAINT  PK_CHASSIS_LOCATION PRIMARY KEY (CHASSIS_LOCATION_ID)       ;

ALTER TABLE CHASSIS_LOCATION
ADD CONSTRAINT  AK_CHASS_DEV_MODULE_NAME UNIQUE (CHASSIS_DEVICE_ID,DEVICE_TYPE_MODULE_NAME);

ALTER TABLE CHASSIS_LOCATION
ADD CONSTRAINT  AK_CHASS_LOC_MODULE_ENFORCE UNIQUE (CHASSIS_LOCATION_ID,CHASSIS_DEVICE_ID,MODULE_DEVICE_TYPE_ID);

CREATE  INDEX XIF2CHASSIS_LOCATION ON CHASSIS_LOCATION
(CHASSIS_DEVICE_TYPE_ID   ASC,DEVICE_TYPE_MODULE_NAME   ASC);

CREATE  INDEX XIF3CHASSIS_LOCATION ON CHASSIS_LOCATION
(MODULE_DEVICE_TYPE_ID   ASC);

CREATE  INDEX XIF4CHASSIS_LOCATION ON CHASSIS_LOCATION
(CHASSIS_DEVICE_ID   ASC);

CREATE  INDEX XIF5CHASSIS_LOCATION ON CHASSIS_LOCATION
(MODULE_DEVICE_TYPE_ID   ASC,CHASSIS_DEVICE_TYPE_ID   ASC,DEVICE_TYPE_MODULE_NAME   ASC);

/***********************************************
 * Table: CIRCUIT
 ***********************************************/

CREATE TABLE CIRCUIT
(
	CIRCUIT_ID SERIAL NOT NULL 
,
	VENDOR_COMPANY_ID    INTEGER NULL,
	VENDOR_CIRCUIT_ID_STR VARCHAR(255) NULL,
	ALOC_LEC_COMPANY_ID  INTEGER NULL,
	ALOC_LEC_CIRCUIT_ID_STR VARCHAR(255) NULL,
	ALOC_PARENT_CIRCUIT_ID INTEGER NULL,
	ZLOC_LEC_COMPANY_ID  INTEGER NULL,
	ZLOC_LEC_CIRCUIT_ID_STR VARCHAR(255) NULL,
	ZLOC_PARENT_CIRCUIT_ID INTEGER NULL,
	IS_LOCALLY_MANAGED   CHAR(1) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE CIRCUIT
	ADD CONSTRAINT  PK_CIRCUIT PRIMARY KEY (CIRCUIT_ID)       ;

ALTER TABLE CIRCUIT
	ADD CONSTRAINT  CKC_IS_LOCALLY_MANAGE_CIRCUIT CHECK (IS_LOCALLY_MANAGED in ('Y','N') and IS_LOCALLY_MANAGED = upper(IS_LOCALLY_MANAGED));

CREATE  INDEX XIF9CIRCUIT ON CIRCUIT
(VENDOR_COMPANY_ID   ASC);

CREATE  INDEX XIF10CIRCUIT ON CIRCUIT
(ALOC_LEC_COMPANY_ID   ASC);

CREATE  INDEX XIF11CIRCUIT ON CIRCUIT
(ZLOC_LEC_COMPANY_ID   ASC);

CREATE  INDEX IDX_CIRCUIT_END1PARENTCIRCID ON CIRCUIT
(ALOC_PARENT_CIRCUIT_ID   ASC);

CREATE  INDEX IDX_CIRCUIT_END2PARENTCIRCID ON CIRCUIT
(ZLOC_PARENT_CIRCUIT_ID   ASC);

CREATE INDEX IDX_CIRCUIT_ISLCLMNGD ON CIRCUIT
(IS_LOCALLY_MANAGED   ASC);

/***********************************************
 * Table: COMPANY
 ***********************************************/

CREATE TABLE COMPANY
(
	COMPANY_ID SERIAL NOT NULL 
,
	COMPANY_NAME         VARCHAR(255) NOT NULL 
,
	COMPANY_SHORT_NAME   VARCHAR(50) NULL,
	IS_CORPORATE_FAMILY  CHAR(1) NOT NULL 
,
	PARENT_COMPANY_ID    INTEGER NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	COMPANY_CODE         VARCHAR(10) NULL,
	ACCOUNT_PREFIX       VARCHAR(8) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE COMPANY
	ADD CONSTRAINT  PK_COMPANY PRIMARY KEY (COMPANY_ID)       ;

ALTER TABLE COMPANY
	ADD CONSTRAINT  CKC_IS_CORPORATE_FAMI_COMPANY CHECK (IS_CORPORATE_FAMILY in ('Y','N') and IS_CORPORATE_FAMILY = upper(IS_CORPORATE_FAMILY));

ALTER TABLE COMPANY
	ADD CONSTRAINT  CKC_CMPY_SHRT_NAME_195335815 CHECK (COMPANY_SHORT_NAME = lower(COMPANY_SHORT_NAME) and COMPANY_SHORT_NAME not like '% %');

ALTER TABLE COMPANY
	ALTER IS_CORPORATE_FAMILY SET DEFAULT 'N';

CREATE  INDEX XIF1COMPANY ON COMPANY
(PARENT_COMPANY_ID   ASC);

CREATE  INDEX IDX_COMPANY_COMPANYCODE ON COMPANY
(COMPANY_CODE   ASC);

CREATE INDEX IDX_COMPANY_ISCORPFAMILY ON COMPANY
(IS_CORPORATE_FAMILY   ASC);

/***********************************************
 * Table: COMPANY_TYPE
 ***********************************************/

CREATE TABLE COMPANY_TYPE
(
	COMPANY_ID           INTEGER NOT NULL,
	COMPANY_TYPE         VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE COMPANY_TYPE
	ADD CONSTRAINT  PK_COMPANY_TYPE PRIMARY KEY (COMPANY_ID,COMPANY_TYPE)       ;

CREATE  INDEX XIF1COMPANY_TYPE ON COMPANY_TYPE
(COMPANY_ID   ASC);

CREATE  INDEX XIF2COMPANY_TYPE ON COMPANY_TYPE
(COMPANY_TYPE   ASC);

/***********************************************
 * Table: CONTRACT
 ***********************************************/

CREATE TABLE CONTRACT
(
	CONTRACT_ID          INTEGER NOT NULL,
	COMPANY_ID           INTEGER NOT NULL,
	CONTRACT_NAME        VARCHAR(255) NOT NULL,
	VENDOR_CONTRACT_NAME VARCHAR(255) NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	CONTRACT_TERMINATION_DATE TIMESTAMP WITH TIME ZONE NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE CONTRACT
	ADD CONSTRAINT  PK_CONTRACT PRIMARY KEY (CONTRACT_ID)       ;

CREATE  INDEX XIFCONTRACT_COMPANY_ID ON CONTRACT
(COMPANY_ID   ASC);

/***********************************************
 * Table: CONTRACT_TYPE
 ***********************************************/

CREATE TABLE CONTRACT_TYPE
(
	CONTRACT_ID          INTEGER NOT NULL,
	CONTRACT_TYPE        VARCHAR(50) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE CONTRACT_TYPE
	ADD CONSTRAINT  PK_CONTRACT_TYPE PRIMARY KEY (CONTRACT_ID,CONTRACT_TYPE)       ;

CREATE  INDEX XIF_CONTRACT_CONTRACT_ID ON CONTRACT_TYPE
(CONTRACT_ID   ASC);

CREATE  INDEX XIF_CONTRACT_CONTRACT_TYPE ON CONTRACT_TYPE
(CONTRACT_TYPE   ASC);

/***********************************************
 * Table: DEPARTMENT
 ***********************************************/

CREATE TABLE DEPARTMENT
(
	ACCOUNT_COLLECTION_ID INTEGER NOT NULL,
	MANAGER_ACCOUNT_ID   INTEGER NULL,
	COMPANY_ID           INTEGER NOT NULL 
,
	DEFAULT_BADGE_TYPE_ID INTEGER NULL,
	DEPT_CODE            VARCHAR(30) NOT NULL 
,
	DEPT_OU              VARCHAR(1024) NULL,
	IS_ACTIVE            CHAR(1) NOT NULL 
,
	COST_CENTER          VARCHAR(10) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DEPARTMENT
	ADD CONSTRAINT  PK_DEPTID PRIMARY KEY (ACCOUNT_COLLECTION_ID)       ;

ALTER TABLE DEPARTMENT
	ADD CONSTRAINT  CKC_IS_ACTIVE_DEPT CHECK (IS_ACTIVE in ('Y','N') and IS_ACTIVE = upper(IS_ACTIVE));

CREATE  INDEX XIF6DEPARTMENT ON DEPARTMENT
(MANAGER_ACCOUNT_ID   ASC);

CREATE  INDEX IDX_DEPT_DEPTCODE_COMPANYID ON DEPARTMENT
(DEPT_CODE   ASC,COMPANY_ID   ASC);

CREATE  INDEX XIFDEPT_BADGE_TYPE ON DEPARTMENT
(DEFAULT_BADGE_TYPE_ID   ASC);

CREATE  INDEX XIFDEPT_COMPANY ON DEPARTMENT
(COMPANY_ID   ASC);

/***********************************************
 * Table: DEVICE
 ***********************************************/

CREATE TABLE DEVICE
(
	DEVICE_ID SERIAL NOT NULL 
,
	DEVICE_TYPE_ID       INTEGER NOT NULL 
,
	COMPANY_ID           INTEGER NULL,
	ASSET_ID             INTEGER NULL,
	DEVICE_NAME          VARCHAR(255) NULL,
	SITE_CODE            VARCHAR(50) NULL,
	IDENTIFYING_DNS_RECORD_ID INTEGER NULL,
	HOST_ID              VARCHAR(255) NULL,
	PHYSICAL_LABEL       VARCHAR(255) NULL,
	RACK_LOCATION_ID     INTEGER NULL,
	CHASSIS_LOCATION_ID  INTEGER NULL,
	PARENT_DEVICE_ID     INTEGER NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	DEVICE_STATUS        VARCHAR(50) CONSTRAINT SYS_C0069053 NOT NULL 
,
	OPERATING_SYSTEM_ID  INTEGER NOT NULL 
,
	SERVICE_ENVIRONMENT_ID INTEGER NOT NULL,
	VOE_ID               INTEGER NULL,
	AUTO_MGMT_PROTOCOL   VARCHAR(50) NULL,
	VOE_SYMBOLIC_TRACK_ID INTEGER NULL,
	IS_LOCALLY_MANAGED   CHAR(1) NOT NULL 
,
	IS_MONITORED         CHAR(1) NOT NULL 
,
	IS_VIRTUAL_DEVICE    CHAR(1) NOT NULL 
,
	SHOULD_FETCH_CONFIG  CHAR(1) NOT NULL 
,
	DATE_IN_SERVICE      TIMESTAMP WITH TIME ZONE NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DEVICE
	ADD CONSTRAINT  PK_DEVICE PRIMARY KEY (DEVICE_ID)       ;

ALTER TABLE DEVICE
ADD CONSTRAINT  AK_DEVICE_CHASSIS_LOCATION_ID UNIQUE (CHASSIS_LOCATION_ID);

ALTER TABLE DEVICE
ADD CONSTRAINT  AK_DEVICE_RACK_LOCATION_ID UNIQUE (RACK_LOCATION_ID);

ALTER TABLE DEVICE
	ADD CONSTRAINT  SYS_C0069051 CHECK (DEVICE_ID IS NOT
NULL);

ALTER TABLE DEVICE
	ADD CONSTRAINT  SYS_C0069052 CHECK (DEVICE_TYPE_ID IS NOT
NULL);

ALTER TABLE DEVICE
	ADD CONSTRAINT  DEV_OSID_NOTNULL CHECK (OPERATING_SYSTEM_ID IS
NOT NULL);

ALTER TABLE DEVICE
	ADD CONSTRAINT  CKC_IS_MONITORED_DEVICE CHECK (IS_MONITORED in ('Y','N') and IS_MONITORED = upper(IS_MONITORED));

ALTER TABLE DEVICE
	ADD CONSTRAINT  SYS_C0069057 CHECK (IS_MONITORED IS NOT
NULL);

ALTER TABLE DEVICE
	ADD CONSTRAINT  CKC_IS_VIRTUAL_DEVICE_DEVICE CHECK (IS_VIRTUAL_DEVICE in ('Y','N') and IS_VIRTUAL_DEVICE = upper(IS_VIRTUAL_DEVICE));

ALTER TABLE DEVICE
	ADD CONSTRAINT  SYS_C0069059 CHECK (IS_VIRTUAL_DEVICE IS
NOT NULL);

ALTER TABLE DEVICE
	ADD CONSTRAINT  CKC_SHOULD_FETCH_CONF_DEVICE CHECK (SHOULD_FETCH_CONFIG in ('Y','N') and SHOULD_FETCH_CONFIG = upper(SHOULD_FETCH_CONFIG));

ALTER TABLE DEVICE
	ADD CONSTRAINT  SYS_C0069060 CHECK (SHOULD_FETCH_CONFIG IS
NOT NULL);

ALTER TABLE DEVICE
	ADD CONSTRAINT  CKC_IS_LOCALLY_MANAGE_DEVICE CHECK (IS_LOCALLY_MANAGED in ('Y','N') and IS_LOCALLY_MANAGED = upper(IS_LOCALLY_MANAGED));

ALTER TABLE DEVICE
	ALTER OPERATING_SYSTEM_ID SET DEFAULT 0;

ALTER TABLE DEVICE
	ALTER IS_VIRTUAL_DEVICE SET DEFAULT 'N';

ALTER TABLE DEVICE
	ALTER SHOULD_FETCH_CONFIG SET DEFAULT 'Y';

ALTER TABLE DEVICE
	ALTER IS_LOCALLY_MANAGED SET DEFAULT 'Y';

CREATE  INDEX XIF16DEVICE ON DEVICE
(CHASSIS_LOCATION_ID   ASC,PARENT_DEVICE_ID   ASC,DEVICE_TYPE_ID   ASC);

CREATE  INDEX XIF17DEVICE ON DEVICE
(COMPANY_ID   ASC);

CREATE  INDEX XIF18DEVICE ON DEVICE
(ASSET_ID   ASC);

CREATE  INDEX IDX_DEVICE_TYPE_LOCATION ON DEVICE
(DEVICE_TYPE_ID   ASC);

CREATE INDEX IDX_DEV_DEV_STATUS ON DEVICE
(DEVICE_STATUS   ASC);

CREATE  INDEX IDX_DEV_IDDNSREC ON DEVICE
(IDENTIFYING_DNS_RECORD_ID   ASC);

CREATE  INDEX IDX_DEV_ISLCLYMGD ON DEVICE
(IS_LOCALLY_MANAGED   ASC);

CREATE INDEX IDX_DEV_ISMONITORED ON DEVICE
(IS_MONITORED   ASC);

CREATE  INDEX IDX_DEV_OSID ON DEVICE
(OPERATING_SYSTEM_ID   ASC);

CREATE INDEX IDX_DEV_SVCENV ON DEVICE
(SERVICE_ENVIRONMENT_ID   ASC);

CREATE  INDEX IDX_DEV_VOEID ON DEVICE
(VOE_ID   ASC);

CREATE  INDEX XIFDEVICE_SITECODE ON DEVICE
(SITE_CODE   ASC);

/***********************************************
 * Table: DEVICE_COLLECTION
 ***********************************************/

CREATE TABLE DEVICE_COLLECTION
(
	DEVICE_COLLECTION_ID SERIAL NOT NULL 
,
	DEVICE_COLLECTION_NAME VARCHAR(255) NOT NULL 
,
	DEVICE_COLLECTION_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DEVICE_COLLECTION
	ADD CONSTRAINT  PK_DEVICE_COLLECTION PRIMARY KEY (DEVICE_COLLECTION_ID)       ;

ALTER TABLE DEVICE_COLLECTION
ADD CONSTRAINT  AK_UQ_DEVICECOLL_NAME_TYPE UNIQUE (DEVICE_COLLECTION_NAME,DEVICE_COLLECTION_TYPE)       ;

CREATE INDEX IDX_DEVCOLL_DEVCOLLTYPE ON DEVICE_COLLECTION
(DEVICE_COLLECTION_TYPE   ASC);

/***********************************************
 * Table: DEVICE_COLLECTION_ASSIGND_CERT
 ***********************************************/

CREATE TABLE DEVICE_COLLECTION_ASSIGND_CERT
(
	DEVICE_COLLECTION_ID INTEGER NOT NULL 
,
	X509_CERT_ID         INTEGER NOT NULL 
,
	X509_KEY_USG         VARCHAR(50) NOT NULL 
,
	X509_FILE_FORMAT     VARCHAR(50) NOT NULL 
,
	FILE_LOCATION_PATH   VARCHAR(255) NOT NULL 
,
	KEY_TOOL_LABEL       VARCHAR(255) NULL,
	FILE_ACCESS_MODE     INTEGER NOT NULL 
,
	FILE_OWNER_ACCOUNT_ID INTEGER NOT NULL 
,
	FILE_GROUP_ACCT_COLLECTION_ID INTEGER NOT NULL,
	FILE_PASSPHRASE_PATH VARCHAR(255) NULL,
	KEY_USAGE_REASON_FOR_ASSIGN VARCHAR(50) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE DEVICE_COLLECTION_ASSIGND_CERT IS 'Actual  assignment of the usage category APPLICATION Certificates to Device Collections.';

COMMENT ON COLUMN DEVICE_COLLECTION_ASSIGND_CERT.X509_CERT_ID IS 'Uniquely identifies Certificate';

COMMENT ON COLUMN DEVICE_COLLECTION_ASSIGND_CERT.X509_KEY_USG IS 'Name of the Certificate.';

COMMENT ON COLUMN DEVICE_COLLECTION_ASSIGND_CERT.X509_FILE_FORMAT IS 'Format Name of the file containing Certificate information. Example; keytool, rsa';

COMMENT ON COLUMN DEVICE_COLLECTION_ASSIGND_CERT.FILE_LOCATION_PATH IS 'Alphanumeric representation of the path leading to the file.';

COMMENT ON COLUMN DEVICE_COLLECTION_ASSIGND_CERT.KEY_TOOL_LABEL IS 'Alphanumeric representation of the label attached to the certificate by Key Tool';

COMMENT ON COLUMN DEVICE_COLLECTION_ASSIGND_CERT.FILE_ACCESS_MODE IS 'Numeric representation of the File Access Mode.';

COMMENT ON COLUMN DEVICE_COLLECTION_ASSIGND_CERT.FILE_OWNER_ACCOUNT_ID IS 'Identifier of the file owner.';

COMMENT ON COLUMN DEVICE_COLLECTION_ASSIGND_CERT.FILE_GROUP_ACCT_COLLECTION_ID IS 'Identifies user collection that corresponds to a unix group for the file to be owned by';

COMMENT ON COLUMN DEVICE_COLLECTION_ASSIGND_CERT.KEY_USAGE_REASON_FOR_ASSIGN IS 'Uniquely identifies and indicates reason for assignment.';

ALTER TABLE DEVICE_COLLECTION_ASSIGND_CERT
	ADD CONSTRAINT  PK_DEVICE_COLLECTION_ASSIGNED PRIMARY KEY (DEVICE_COLLECTION_ID,X509_CERT_ID,X509_KEY_USG)       ;

/***********************************************
 * Table: DEVICE_COLLECTION_DEVICE
 ***********************************************/

CREATE TABLE DEVICE_COLLECTION_DEVICE
(
	DEVICE_ID            INTEGER NOT NULL 
,
	DEVICE_COLLECTION_ID INTEGER NOT NULL 
,
	DEVICE_ID_RANK       INTEGER NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DEVICE_COLLECTION_DEVICE
	ADD CONSTRAINT  PK_DEVICE_COLLECTION_DEVICE PRIMARY KEY (DEVICE_ID,DEVICE_COLLECTION_ID)       ;

ALTER TABLE DEVICE_COLLECTION_DEVICE
ADD CONSTRAINT  AK_DEV_COLL_DEV_RANK UNIQUE (DEVICE_COLLECTION_ID,DEVICE_ID_RANK);

CREATE  INDEX IX_DEV_COL_DEV_DEV_COLID ON DEVICE_COLLECTION_DEVICE
(DEVICE_COLLECTION_ID   ASC);

/***********************************************
 * Table: DEVICE_COLLECTION_HIER
 ***********************************************/

CREATE TABLE DEVICE_COLLECTION_HIER
(
	PARENT_DEVICE_COLLECTION_ID INTEGER NOT NULL 
,
	DEVICE_COLLECTION_ID INTEGER NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DEVICE_COLLECTION_HIER
	ADD CONSTRAINT  PK_DEVICE_COLLECTION_HIER PRIMARY KEY (PARENT_DEVICE_COLLECTION_ID,DEVICE_COLLECTION_ID)       ;

/***********************************************
 * Table: DEVICE_COLLECTION_SSH_KEY
 ***********************************************/

CREATE TABLE DEVICE_COLLECTION_SSH_KEY
(
	SSH_KEY_ID           INTEGER NOT NULL,
	DEVICE_COLLECTION_ID INTEGER NOT NULL,
	ACCOUNT_COLLECTION_ID INTEGER NOT NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN DEVICE_COLLECTION_SSH_KEY.SSH_KEY_ID IS 'SSH Public Key that gets placed in a user''s authorized keys file';

COMMENT ON COLUMN DEVICE_COLLECTION_SSH_KEY.DEVICE_COLLECTION_ID IS 'Device collection that gets this key assigned to users';

COMMENT ON COLUMN DEVICE_COLLECTION_SSH_KEY.ACCOUNT_COLLECTION_ID IS 'Destination account(s) that get the ssh keys';

ALTER TABLE DEVICE_COLLECTION_SSH_KEY
	ADD CONSTRAINT  PK_DEVICE_COLLECTION_SSH_KEY PRIMARY KEY (SSH_KEY_ID,DEVICE_COLLECTION_ID,ACCOUNT_COLLECTION_ID)       ;

CREATE  INDEX XIF1DEVICE_COLLECTION_SSH_KEY ON DEVICE_COLLECTION_SSH_KEY
(SSH_KEY_ID   ASC);

CREATE  INDEX XIF2DEVICE_COLLECTION_SSH_KEY ON DEVICE_COLLECTION_SSH_KEY
(DEVICE_COLLECTION_ID   ASC);

CREATE  INDEX XIF3DEVICE_COLLECTION_SSH_KEY ON DEVICE_COLLECTION_SSH_KEY
(ACCOUNT_COLLECTION_ID   ASC);

/***********************************************
 * Table: DEVICE_ENCAPSULATION_DOMAIN
 ***********************************************/

CREATE TABLE DEVICE_ENCAPSULATION_DOMAIN
(
	DEVICE_ID            INTEGER NOT NULL,
	ENCAPSULATION_TYPE   VARCHAR(50) NOT NULL,
	ENCAPSULATION_DOMAIN VARCHAR(50) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DEVICE_ENCAPSULATION_DOMAIN
	ADD CONSTRAINT  PK_DEVICE_ENCAPSULATION_DOMAIN PRIMARY KEY (DEVICE_ID,ENCAPSULATION_TYPE)       ;

CREATE  INDEX XIF_DEV_ENCAP_DOMAIN_DEVID ON DEVICE_ENCAPSULATION_DOMAIN
(DEVICE_ID   ASC);

CREATE  INDEX XIF_DEV_ENCAP_DOMAIN_ENCAPTYP ON DEVICE_ENCAPSULATION_DOMAIN
(ENCAPSULATION_TYPE   ASC);

CREATE  INDEX XIF_DEV_ENCAP_DOMAIN_ENC_DOMTY ON DEVICE_ENCAPSULATION_DOMAIN
(ENCAPSULATION_DOMAIN   ASC,ENCAPSULATION_TYPE   ASC);

/***********************************************
 * Table: DEVICE_LAYER2_NETWORK
 ***********************************************/

CREATE TABLE DEVICE_LAYER2_NETWORK
(
	DEVICE_ID            INTEGER NOT NULL,
	LAYER2_NETWORK_ID    INTEGER NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DEVICE_LAYER2_NETWORK
	ADD CONSTRAINT  PK_DEVICE_LAYER2_NETWORK PRIMARY KEY (DEVICE_ID,LAYER2_NETWORK_ID)       ;

CREATE  INDEX XIF_DEVICE_L2_NET_DEVID ON DEVICE_LAYER2_NETWORK
(DEVICE_ID   ASC);

CREATE  INDEX XIF_DEVICE_L2_NET_L2NETID ON DEVICE_LAYER2_NETWORK
(LAYER2_NETWORK_ID   ASC);

/***********************************************
 * Table: DEVICE_MANAGEMENT_CONTROLLER
 ***********************************************/

CREATE TABLE DEVICE_MANAGEMENT_CONTROLLER
(
	MANAGER_DEVICE_ID    INTEGER NOT NULL,
	DEVICE_ID            INTEGER NOT NULL,
	DEVICE_MGMT_CONTROL_TYPE VARCHAR(255) NOT NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DEVICE_MANAGEMENT_CONTROLLER
	ADD CONSTRAINT  PK_DEVICE_MANAGEMENT_CONTROLLE PRIMARY KEY (MANAGER_DEVICE_ID,DEVICE_ID)       ;

CREATE  INDEX XIF1DEVICE_MANAGEMENT_CONTROLL ON DEVICE_MANAGEMENT_CONTROLLER
(MANAGER_DEVICE_ID   ASC);

CREATE  INDEX XIF2DEVICE_MANAGEMENT_CONTROLL ON DEVICE_MANAGEMENT_CONTROLLER
(DEVICE_ID   ASC);

CREATE  INDEX XIF3DEVICE_MANAGEMENT_CONTROLL ON DEVICE_MANAGEMENT_CONTROLLER
(DEVICE_MGMT_CONTROL_TYPE   ASC);

/***********************************************
 * Table: DEVICE_NOTE
 ***********************************************/

CREATE TABLE DEVICE_NOTE
(
	NOTE_ID              INTEGER NOT NULL 
,
	DEVICE_ID            INTEGER NOT NULL 
,
	NOTE_TEXT            VARCHAR(4000) NOT NULL 
,
	NOTE_DATE            TIMESTAMP WITH TIME ZONE NOT NULL 
,
	NOTE_USER            VARCHAR(30) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DEVICE_NOTE
	ADD CONSTRAINT  PK_DEVICE_NOTE PRIMARY KEY (NOTE_ID)       ;

ALTER TABLE DEVICE_NOTE
	ADD CONSTRAINT  CKC_NOTE_USER_DEVICE_N CHECK (NOTE_USER = upper(NOTE_USER));

CREATE  INDEX IDX_DEVNOTE_DEVID ON DEVICE_NOTE
(DEVICE_ID   ASC);

/***********************************************
 * Table: DEVICE_POWER_CONNECTION
 ***********************************************/

CREATE TABLE DEVICE_POWER_CONNECTION
(
	DEVICE_POWER_CONNECTION_ID SERIAL NOT NULL 
,
	RPC_DEVICE_ID        INTEGER NOT NULL 
,
	RPC_POWER_INTERFACE_PORT VARCHAR(20) NOT NULL 
,
	POWER_INTERFACE_PORT VARCHAR(20) NOT NULL 
,
	DEVICE_ID            INTEGER NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DEVICE_POWER_CONNECTION
	ADD CONSTRAINT  PK_DEVICE_POWER_CONNECTION PRIMARY KEY (DEVICE_POWER_CONNECTION_ID)       ;

CREATE  INDEX IDX_DEVPCONN_RPCDEVPINT ON DEVICE_POWER_CONNECTION
(RPC_DEVICE_ID   ASC,RPC_POWER_INTERFACE_PORT   ASC);

CREATE  INDEX IDX_DEVPCONN_SVRDEVPINT ON DEVICE_POWER_CONNECTION
(DEVICE_ID   ASC,POWER_INTERFACE_PORT   ASC);

/***********************************************
 * Table: DEVICE_POWER_INTERFACE
 ***********************************************/

CREATE TABLE DEVICE_POWER_INTERFACE
(
	DEVICE_ID            INTEGER NOT NULL 
,
	POWER_INTERFACE_PORT VARCHAR(20) NOT NULL 
,
	POWER_PLUG_STYLE     VARCHAR(50) NOT NULL,
	VOLTAGE              INTEGER NOT NULL,
	MAX_AMPERAGE         INTEGER NOT NULL,
	PROVIDES_POWER       CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN DEVICE_POWER_INTERFACE.POWER_PLUG_STYLE IS 'Generally initialized from device_type_power_port_templt';

COMMENT ON COLUMN DEVICE_POWER_INTERFACE.VOLTAGE IS 'Generally initialized from device_type_power_port_templt';

COMMENT ON COLUMN DEVICE_POWER_INTERFACE.MAX_AMPERAGE IS 'Generally initialized from device_type_power_port_templt';

COMMENT ON COLUMN DEVICE_POWER_INTERFACE.PROVIDES_POWER IS 'Generally initialized from device_type_power_port_templt';

ALTER TABLE DEVICE_POWER_INTERFACE
	ADD CONSTRAINT  PK_DEVICE_POWER_INTERFACE PRIMARY KEY (DEVICE_ID,POWER_INTERFACE_PORT)       ;

ALTER TABLE DEVICE_POWER_INTERFACE
	ADD CONSTRAINT  CHECK_YES_NO_2067088750 CHECK (PROVIDES_POWER IN ('Y', 'N'));

ALTER TABLE DEVICE_POWER_INTERFACE
	ALTER PROVIDES_POWER SET DEFAULT 'N';

CREATE  INDEX XIF2DEVICE_POWER_INTERFACE ON DEVICE_POWER_INTERFACE
(POWER_PLUG_STYLE   ASC);

/***********************************************
 * Table: DEVICE_SSH_KEY
 ***********************************************/

CREATE TABLE DEVICE_SSH_KEY
(
	DEVICE_ID            INTEGER NOT NULL,
	SSH_KEY_ID           INTEGER NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DEVICE_SSH_KEY
	ADD CONSTRAINT  PK_DEVICE_SSH_KEY PRIMARY KEY (DEVICE_ID,SSH_KEY_ID)       ;

CREATE  INDEX XIF1DEVICE_SSH_KEY ON DEVICE_SSH_KEY
(SSH_KEY_ID   ASC);

CREATE  INDEX XIF2DEVICE_SSH_KEY ON DEVICE_SSH_KEY
(DEVICE_ID   ASC);

/***********************************************
 * Table: DEVICE_TICKET
 ***********************************************/

CREATE TABLE DEVICE_TICKET
(
	DEVICE_ID            INTEGER NOT NULL,
	TICKETING_SYSTEM_ID  INTEGER NOT NULL,
	TICKET_NUMBER        VARCHAR(30) NOT NULL,
	DEVICE_TICKET_NOTES  VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE DEVICE_TICKET IS 'associates devices and trouble tickets together (external to jazzhands)';

COMMENT ON COLUMN DEVICE_TICKET.TICKET_NUMBER IS 'trouble ticketing system id';

COMMENT ON COLUMN DEVICE_TICKET.DEVICE_TICKET_NOTES IS 'free form notes about the ticket/device association';

ALTER TABLE DEVICE_TICKET
	ADD CONSTRAINT  PK_DEVICE_TICKET PRIMARY KEY (DEVICE_ID,TICKETING_SYSTEM_ID,TICKET_NUMBER);

CREATE  INDEX XIFDEV_TKT_DEV_ID ON DEVICE_TICKET
(DEVICE_ID   ASC);

CREATE  INDEX XIFDEV_TKT_TKT_SYSTEM ON DEVICE_TICKET
(TICKETING_SYSTEM_ID   ASC);

/***********************************************
 * Table: DEVICE_TYPE
 ***********************************************/

CREATE TABLE DEVICE_TYPE
(
	DEVICE_TYPE_ID SERIAL NOT NULL 
,
	COMPANY_ID           INTEGER NULL,
	MODEL                VARCHAR(255) NOT NULL 
,
	DEVICE_TYPE_DEPTH_IN_CM CHAR(18) NULL,
	PROCESSOR_ARCHITECTURE VARCHAR(50) NULL,
	CONFIG_FETCH_TYPE    VARCHAR(50) NULL,
	RACK_UNITS           INTEGER NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	HAS_802_3_INTERFACE  CHAR(1) NOT NULL 
,
	HAS_802_11_INTERFACE CHAR(1) NOT NULL 
,
	SNMP_CAPABLE         CHAR(1) NOT NULL 
,
	IS_CHASSIS           CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DEVICE_TYPE
	ADD CONSTRAINT  PK_DEVICE_TYPE PRIMARY KEY (DEVICE_TYPE_ID)       ;

ALTER TABLE DEVICE_TYPE
	ADD CONSTRAINT  CKC_HAS_802_3_INTERFA_DEVICE_T CHECK (HAS_802_3_INTERFACE IN ('Y', 'N'));

ALTER TABLE DEVICE_TYPE
	ADD CONSTRAINT  CKC_HAS_802_11_INTERF_DEVICE_T CHECK (HAS_802_11_INTERFACE IN ('Y', 'N'));

ALTER TABLE DEVICE_TYPE
	ADD CONSTRAINT  CKC_SNMP_CAPABLE_DEVICE_T CHECK (SNMP_CAPABLE IN ('Y', 'N'));

ALTER TABLE DEVICE_TYPE
	ADD CONSTRAINT  CKC_DEVTYP_ISCHS CHECK (IS_CHASSIS IN ('Y', 'N'));

ALTER TABLE DEVICE_TYPE
	ALTER IS_CHASSIS SET DEFAULT 'N';

CREATE  INDEX XIF4DEVICE_TYPE ON DEVICE_TYPE
(COMPANY_ID   ASC);

/***********************************************
 * Table: DEVICE_TYPE_MODULE
 ***********************************************/

CREATE TABLE DEVICE_TYPE_MODULE
(
	DEVICE_TYPE_ID       INTEGER NOT NULL 
,
	DEVICE_TYPE_MODULE_NAME VARCHAR(255) NOT NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	DEVICE_TYPE_X_OFFSET CHAR(18) NULL,
	DEVICE_TYPE_Y_OFFSET CHAR(18) NULL,
	DEVICE_TYPE_Z_OFFSET CHAR(18) NULL,
	DEVICE_TYPE_SIDE     CHAR(18) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN DEVICE_TYPE_MODULE.DEVICE_TYPE_ID IS 'Device Type of the Container Device (Chassis)';

COMMENT ON COLUMN DEVICE_TYPE_MODULE.DEVICE_TYPE_MODULE_NAME IS 'Name used to describe the module programatically.';

COMMENT ON COLUMN DEVICE_TYPE_MODULE.DEVICE_TYPE_X_OFFSET IS 'Horizontal offset from left to right';

COMMENT ON COLUMN DEVICE_TYPE_MODULE.DEVICE_TYPE_Y_OFFSET IS 'Vertical offset from top to bottom';

COMMENT ON COLUMN DEVICE_TYPE_MODULE.DEVICE_TYPE_Z_OFFSET IS 'Offset inside the device (front to back, yes, that is Z).  Only this or device_type_side may be set.';

COMMENT ON COLUMN DEVICE_TYPE_MODULE.DEVICE_TYPE_SIDE IS 'Only this or z_offset may be set.  Front or back of the chassis/container device_type';

ALTER TABLE DEVICE_TYPE_MODULE
	ADD CONSTRAINT  PK_DEVICE_TYPE_MODULE PRIMARY KEY (DEVICE_TYPE_ID,DEVICE_TYPE_MODULE_NAME)       ;

ALTER TABLE DEVICE_TYPE_MODULE
	ADD CONSTRAINT  CKC_DT_MOD_DT_SIDE CHECK (DEVICE_TYPE_SIDE in ('FRONT','BACK'));

ALTER TABLE DEVICE_TYPE_MODULE
	ALTER DEVICE_TYPE_SIDE SET DEFAULT 'FRONT';

CREATE  INDEX XIF1DEVICE_TYPE_MODULE ON DEVICE_TYPE_MODULE
(DEVICE_TYPE_ID   ASC);

/***********************************************
 * Table: DEVICE_TYPE_MODULE_DEVICE_TYPE
 ***********************************************/

CREATE TABLE DEVICE_TYPE_MODULE_DEVICE_TYPE
(
	MODULE_DEVICE_TYPE_ID INTEGER NOT NULL,
	DEVICE_TYPE_ID       INTEGER NOT NULL,
	DEVICE_TYPE_MODULE_NAME VARCHAR(255) NOT NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE DEVICE_TYPE_MODULE_DEVICE_TYPE IS 'Used to validate that a given module device_type is allowed to be placed inside a specific module in a chassis_device_type';

COMMENT ON COLUMN DEVICE_TYPE_MODULE_DEVICE_TYPE.MODULE_DEVICE_TYPE_ID IS 'Id of a module that is permitted to be placed in this slot';

COMMENT ON COLUMN DEVICE_TYPE_MODULE_DEVICE_TYPE.DEVICE_TYPE_ID IS 'Device Type of the Container Device (Chassis)';

COMMENT ON COLUMN DEVICE_TYPE_MODULE_DEVICE_TYPE.DEVICE_TYPE_MODULE_NAME IS 'Name used to describe the module programatically.';

ALTER TABLE DEVICE_TYPE_MODULE_DEVICE_TYPE
	ADD CONSTRAINT  PK_DEVICE_TYPE_MODULE_DEVICE_T PRIMARY KEY (MODULE_DEVICE_TYPE_ID,DEVICE_TYPE_ID,DEVICE_TYPE_MODULE_NAME)       ;

CREATE  INDEX XIF_DT_MOD_DEV_TYPE_DTMOD ON DEVICE_TYPE_MODULE_DEVICE_TYPE
(DEVICE_TYPE_ID   ASC,DEVICE_TYPE_MODULE_NAME   ASC);

CREATE  INDEX XIF_DT_MOD_DEV_TYPE_MOD_DTID ON DEVICE_TYPE_MODULE_DEVICE_TYPE
(MODULE_DEVICE_TYPE_ID   ASC);

/***********************************************
 * Table: DEVICE_TYPE_PHYS_PORT_TEMPLT
 ***********************************************/

CREATE TABLE DEVICE_TYPE_PHYS_PORT_TEMPLT
(
	PORT_NAME            VARCHAR(50) NOT NULL 
,
	DEVICE_TYPE_ID       INTEGER NOT NULL 
,
	PORT_TYPE            VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	PORT_PLUG_STYLE      VARCHAR(50) NULL,
	PORT_MEDIUM          VARCHAR(50) NULL,
	PORT_PROTOCOL        VARCHAR(50) NULL,
	PORT_SPEED           VARCHAR(50) NULL,
	PHYSICAL_LABEL       VARCHAR(50) NULL,
	PORT_PURPOSE         VARCHAR(50) NULL,
	TCP_PORT             INTEGER NULL,
	IS_HARDWIRED         CHAR(1) NOT NULL,
	IS_OPTIONAL          CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DEVICE_TYPE_PHYS_PORT_TEMPLT
	ADD CONSTRAINT  PK_DEVICE_TYPE_PHYS_PORT_TEMPL PRIMARY KEY (PORT_NAME,DEVICE_TYPE_ID)       ;

ALTER TABLE DEVICE_TYPE_PHYS_PORT_TEMPLT
	ADD CONSTRAINT  CKC_DVTYP_PHYSP_TMP_OPT CHECK (IS_OPTIONAL IN ('Y', 'N'));

ALTER TABLE DEVICE_TYPE_PHYS_PORT_TEMPLT
	ADD CONSTRAINT  CHECK_YES_NO_400418313 CHECK (IS_HARDWIRED IN ('Y', 'N'));

ALTER TABLE DEVICE_TYPE_PHYS_PORT_TEMPLT
	ALTER IS_OPTIONAL SET DEFAULT 'N';

ALTER TABLE DEVICE_TYPE_PHYS_PORT_TEMPLT
	ALTER IS_HARDWIRED SET DEFAULT 'Y';

CREATE  INDEX XIF3DEVICE_TYPE_PHYS_PORT_TEMP ON DEVICE_TYPE_PHYS_PORT_TEMPLT
(PORT_TYPE   ASC);

CREATE  INDEX XIF4DEVICE_TYPE_PHYS_PORT_TEMP ON DEVICE_TYPE_PHYS_PORT_TEMPLT
(PORT_PROTOCOL   ASC);

CREATE  INDEX XIF5DEVICE_TYPE_PHYS_PORT_TEMP ON DEVICE_TYPE_PHYS_PORT_TEMPLT
(PORT_MEDIUM   ASC,PORT_PLUG_STYLE   ASC);

CREATE  INDEX XIF6DEVICE_TYPE_PHYS_PORT_TEMP ON DEVICE_TYPE_PHYS_PORT_TEMPLT
(PORT_SPEED   ASC);

/***********************************************
 * Table: DEVICE_TYPE_POWER_PORT_TEMPLT
 ***********************************************/

CREATE TABLE DEVICE_TYPE_POWER_PORT_TEMPLT
(
	POWER_INTERFACE_PORT VARCHAR(20) NOT NULL 
,
	DEVICE_TYPE_ID       INTEGER NOT NULL 
,
	POWER_PLUG_STYLE     VARCHAR(50) NOT NULL 
,
	VOLTAGE              INTEGER NOT NULL 
,
	MAX_AMPERAGE         INTEGER NOT NULL 
,
	PROVIDES_POWER       CHAR(1) NOT NULL 
,
	IS_OPTIONAL          CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DEVICE_TYPE_POWER_PORT_TEMPLT
	ADD CONSTRAINT  PK_DEVICE_TYPE_POWER_PORT_TEMP PRIMARY KEY (POWER_INTERFACE_PORT,DEVICE_TYPE_ID)       ;

ALTER TABLE DEVICE_TYPE_POWER_PORT_TEMPLT
	ADD CONSTRAINT  CKC_PROVIDES_POWER_DEVICE_T CHECK (PROVIDES_POWER in ('Y','N') and PROVIDES_POWER = upper(PROVIDES_POWER));

ALTER TABLE DEVICE_TYPE_POWER_PORT_TEMPLT
	ADD CONSTRAINT  CKC_DTYP_PWRTMP_OPT CHECK (IS_OPTIONAL IN ('Y', 'N'));

ALTER TABLE DEVICE_TYPE_POWER_PORT_TEMPLT
	ALTER IS_OPTIONAL SET DEFAULT 'N';

/***********************************************
 * Table: DNS_CHANGE_RECORD
 ***********************************************/

CREATE TABLE DNS_CHANGE_RECORD
(
	DNS_CHANGE_RECORD_ID BIGSERIAL NOT NULL,
	DNS_DOMAIN_ID        INTEGER NULL,
	IP_ADDRESS inet NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DNS_CHANGE_RECORD
	ADD CONSTRAINT  PK_DNS_CHANGE_RECORD PRIMARY KEY (DNS_CHANGE_RECORD_ID)       ;

CREATE  INDEX XIF1DNS_CHANGE_RECORD ON DNS_CHANGE_RECORD
(DNS_DOMAIN_ID   ASC);

/***********************************************
 * Table: DNS_DOMAIN
 ***********************************************/

CREATE TABLE DNS_DOMAIN
(
	DNS_DOMAIN_ID SERIAL NOT NULL 
,
	SOA_NAME             VARCHAR(255) NULL,
	SOA_CLASS            VARCHAR(50) NULL,
	SOA_TTL              INTEGER NULL,
	SOA_SERIAL bigint NULL,
	SOA_REFRESH          INTEGER NULL,
	SOA_RETRY            INTEGER NULL,
	SOA_EXPIRE           INTEGER NULL,
	SOA_MINIMUM          INTEGER NULL,
	SOA_MNAME            VARCHAR(255) NULL,
	SOA_RNAME            VARCHAR(255) NOT NULL 
,
	PARENT_DNS_DOMAIN_ID INTEGER NULL,
	SHOULD_GENERATE      CHAR(1) CONSTRAINT SYS_C0074101 NOT NULL 
,
	LAST_GENERATED       TIMESTAMP WITH TIME ZONE NULL,
	DNS_DOMAIN_TYPE      VARCHAR(50) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DNS_DOMAIN
	ADD CONSTRAINT  PK_DNS_DOMAIN PRIMARY KEY (DNS_DOMAIN_ID)       ;

ALTER TABLE DNS_DOMAIN
	ADD CONSTRAINT  CKC_SHOULD_GENERATE_DNS_DOMA CHECK (SHOULD_GENERATE in ('Y','N') and SHOULD_GENERATE = upper(SHOULD_GENERATE));

CREATE  INDEX IDX_DNSDOMAIN_PARENTDNSDOMAIN ON DNS_DOMAIN
(PARENT_DNS_DOMAIN_ID   ASC);

CREATE  INDEX XIFDNS_DOM_DNS_DOM_TYPE ON DNS_DOMAIN
(DNS_DOMAIN_TYPE   ASC);

/***********************************************
 * Table: DNS_RECORD
 ***********************************************/

CREATE TABLE DNS_RECORD
(
	DNS_RECORD_ID SERIAL NOT NULL 
,
	DNS_NAME             VARCHAR(255) NULL,
	DNS_DOMAIN_ID        INTEGER NOT NULL 
,
	DNS_TTL              INTEGER NULL,
	DNS_CLASS            VARCHAR(50) NOT NULL 
,
	DNS_TYPE             VARCHAR(50) NOT NULL 
,
	DNS_VALUE            VARCHAR(512) NULL,
	DNS_PRIORITY         INTEGER NULL,
	DNS_SRV_SERVICE      VARCHAR(50) NULL,
	DNS_SRV_PROTOCOL     VARCHAR(4) NULL,
	DNS_SRV_WEIGHT       INTEGER NULL,
	DNS_SRV_PORT         INTEGER NULL,
	NETBLOCK_ID          INTEGER NULL,
	REFERENCE_DNS_RECORD_ID INTEGER NULL,
	DNS_VALUE_RECORD_ID  INTEGER NULL,
	SHOULD_GENERATE_PTR  CHAR(1) NOT NULL 
,
	IS_ENABLED           CHAR(1) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DNS_RECORD
	ADD CONSTRAINT  PK_DNS_RECORD PRIMARY KEY (DNS_RECORD_ID)       ;

ALTER TABLE DNS_RECORD
	ADD CONSTRAINT  CKC_DNS_SRV_PROTOCOL_DNS_RECO CHECK (DNS_SRV_PROTOCOL is null or (DNS_SRV_PROTOCOL in ('tcp','udp') and DNS_SRV_PROTOCOL = lower(DNS_SRV_PROTOCOL)));

ALTER TABLE DNS_RECORD
	ADD CONSTRAINT  CKC_SHOULD_GENERATE_P_DNS_RECO CHECK (SHOULD_GENERATE_PTR in ('Y','N') and SHOULD_GENERATE_PTR = upper(SHOULD_GENERATE_PTR));

ALTER TABLE DNS_RECORD
	ADD CONSTRAINT  CKC_IS_ENABLED_DNS_RECO CHECK (IS_ENABLED in ('Y','N') and IS_ENABLED = upper(IS_ENABLED));

ALTER TABLE DNS_RECORD
	ALTER DNS_CLASS SET DEFAULT 'IN';

ALTER TABLE DNS_RECORD
	ALTER SHOULD_GENERATE_PTR SET DEFAULT 'Y';

ALTER TABLE DNS_RECORD
	ALTER IS_ENABLED SET DEFAULT 'Y';

CREATE  INDEX IDX_DNSREC_DNSCLASS ON DNS_RECORD
(DNS_CLASS   ASC);

CREATE  INDEX IDX_DNSREC_DNSSRVSERVICE ON DNS_RECORD
(DNS_SRV_SERVICE   ASC);

CREATE INDEX IDX_DNSREC_DNSTYPE ON DNS_RECORD
(DNS_TYPE   ASC);

CREATE  INDEX IDX_DNSREC_REFDNSREC ON DNS_RECORD
(REFERENCE_DNS_RECORD_ID   ASC);

CREATE  INDEX IX_DNSID_DOMID ON DNS_RECORD
(DNS_DOMAIN_ID   ASC);

CREATE  INDEX IX_DNSID_NETBLOCK_ID ON DNS_RECORD
(NETBLOCK_ID   ASC);

/***********************************************
 * Table: DNS_RECORD_RELATION
 ***********************************************/

CREATE TABLE DNS_RECORD_RELATION
(
	DNS_RECORD_ID        INTEGER NOT NULL 
,
	RELATED_DNS_RECORD_ID INTEGER NOT NULL 
,
	DNS_RECORD_RELATION_TYPE VARCHAR(50) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE DNS_RECORD_RELATION
	ADD CONSTRAINT  PK_DNS_RECORD_RELATION PRIMARY KEY (DNS_RECORD_ID,RELATED_DNS_RECORD_ID,DNS_RECORD_RELATION_TYPE)       ;

/***********************************************
 * Table: ENCAPSULATION_DOMAIN
 ***********************************************/

CREATE TABLE ENCAPSULATION_DOMAIN
(
	ENCAPSULATION_DOMAIN VARCHAR(50) NOT NULL 
,
	ENCAPSULATION_TYPE   VARCHAR(50) NOT NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE ENCAPSULATION_DOMAIN
	ADD CONSTRAINT  PK_ENCAPSULATION_DOMAIN PRIMARY KEY (ENCAPSULATION_DOMAIN,ENCAPSULATION_TYPE)       ;

CREATE  INDEX XIF_ENCAP_DOMAIN_ENCAP_TYP ON ENCAPSULATION_DOMAIN
(ENCAPSULATION_TYPE   ASC);

/***********************************************
 * Table: ENCAPSULATION_RANGE
 ***********************************************/

CREATE TABLE ENCAPSULATION_RANGE
(
	ENCAPSULATION_RANGE_ID INTEGER NOT NULL 
,
	PARENT_ENCAPSULATION_RANGE_ID INTEGER NULL,
	SITE_CODE            VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE ENCAPSULATION_RANGE IS 'Captures how tables are assigned administratively.  This is not use for enforcement but primarily for presentation';

ALTER TABLE ENCAPSULATION_RANGE
	ADD CONSTRAINT  PK_VLAN_RANGE PRIMARY KEY (ENCAPSULATION_RANGE_ID)       ;

CREATE  INDEX IXF_ENCAP_RANGE_PARENTVLAN ON ENCAPSULATION_RANGE
(PARENT_ENCAPSULATION_RANGE_ID   ASC);

CREATE  INDEX IXF_ENCAP_RANGE_SITECODE ON ENCAPSULATION_RANGE
(SITE_CODE   ASC);

/***********************************************
 * Table: ENCRYPTION_KEY
 ***********************************************/

CREATE TABLE ENCRYPTION_KEY
(
	ENCRYPTION_KEY_ID SERIAL NOT NULL 
,
	ENCRYPTION_KEY_DB_VALUE VARCHAR(255) NOT NULL 
,
	ENCRYPTION_KEY_PURPOSE VARCHAR(50) NOT NULL 
,
	ENCRYPTION_KEY_PURPOSE_VERSION INTEGER NOT NULL 
,
	ENCRYPTION_METHOD    VARCHAR(50) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE ENCRYPTION_KEY IS 'Keep information on keys used to encrypt sensitive data in the schema';

COMMENT ON COLUMN ENCRYPTION_KEY.ENCRYPTION_KEY_DB_VALUE IS 'part of 3-tuple that is the key used to encrypt.  The other portions are provided by a user and stored in the key_crypto package';

COMMENT ON COLUMN ENCRYPTION_KEY.ENCRYPTION_KEY_PURPOSE IS 'indicates the purpose of infrastructure providing the key.  Used externally by applications to manage their portion of the key';

COMMENT ON COLUMN ENCRYPTION_KEY.ENCRYPTION_KEY_PURPOSE_VERSION IS 'indicates the version of the application portion of the key.  Used externally by applications to manage their portion of the key';

COMMENT ON COLUMN ENCRYPTION_KEY.ENCRYPTION_METHOD IS 'Text representation of the method of encryption.  Format is the same as Kerberos uses such as in rfc3962';

ALTER TABLE ENCRYPTION_KEY
	ADD CONSTRAINT  PK_ENCRYPTION_KEY PRIMARY KEY (ENCRYPTION_KEY_ID)       ;

/***********************************************
 * Table: IP_GROUP
 ***********************************************/

CREATE TABLE IP_GROUP
(
	IP_GROUP_ID SERIAL NOT NULL,
	IP_GROUP_PROTOCOL    CHAR(18) NOT NULL,
	NETBLOCK_COLLECTION_ID INTEGER NOT NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE IP_GROUP
	ADD CONSTRAINT  PK_IP_GROUP PRIMARY KEY (IP_GROUP_ID)       ;

CREATE  INDEX XIF1IP_GROUP ON IP_GROUP
(IP_GROUP_PROTOCOL   ASC);

CREATE  INDEX XIF2IP_GROUP ON IP_GROUP
(NETBLOCK_COLLECTION_ID   ASC);

/***********************************************
 * Table: IP_GROUP_NETWORK_INTERFACE
 ***********************************************/

CREATE TABLE IP_GROUP_NETWORK_INTERFACE
(
	IP_GROUP_ID          INTEGER NOT NULL,
	NETWORK_INTERFACE_ID INTEGER NOT NULL,
	PRIORITY             INTEGER NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE IP_GROUP_NETWORK_INTERFACE
	ADD CONSTRAINT  PK_IP_GROUP_NETWORK_INTERFACE PRIMARY KEY (IP_GROUP_ID,NETWORK_INTERFACE_ID)       ;

CREATE  INDEX XIF1IP_GROUP_NETWORK_INTERFACE ON IP_GROUP_NETWORK_INTERFACE
(IP_GROUP_ID   ASC);

CREATE  INDEX XIF2IP_GROUP_NETWORK_INTERFACE ON IP_GROUP_NETWORK_INTERFACE
(NETWORK_INTERFACE_ID   ASC);

/***********************************************
 * Table: IP_UNIVERSE
 ***********************************************/

CREATE TABLE IP_UNIVERSE
(
	IP_UNIVERSE_ID SERIAL NOT NULL,
	IP_UNIVERSE_NAME     VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE IP_UNIVERSE
	ADD CONSTRAINT  PK_IP_UNIVERSE PRIMARY KEY (IP_UNIVERSE_ID)       ;

ALTER TABLE IP_UNIVERSE
ADD CONSTRAINT  AK_IP_UNIVERSE_NAME UNIQUE (IP_UNIVERSE_NAME);

/***********************************************
 * Table: KERBEROS_REALM
 ***********************************************/

CREATE TABLE KERBEROS_REALM
(
	KRB_REALM_ID SERIAL NOT NULL 
,
	REALM_NAME           VARCHAR(100) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE KERBEROS_REALM
	ADD CONSTRAINT  PK_KERBEROS_REALMS PRIMARY KEY (KRB_REALM_ID)       ;

CREATE  INDEX IDX_REALM_NAME ON KERBEROS_REALM
(REALM_NAME   ASC);

/***********************************************
 * Table: KLOGIN
 ***********************************************/

CREATE TABLE KLOGIN
(
	KLOGIN_ID SERIAL NOT NULL 
,
	ACCOUNT_ID           INTEGER NOT NULL 
,
	ACCOUNT_COLLECTION_ID INTEGER NULL,
	KRB_REALM_ID         INTEGER NOT NULL 
,
	KRB_INSTANCE         VARCHAR(50) NULL,
	DEST_ACCOUNT_ID      INTEGER NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE KLOGIN
	ADD CONSTRAINT  PK_KLOGIN_ID PRIMARY KEY (KLOGIN_ID)       ;

CREATE  INDEX IDX_KLOGIN_ACCTID ON KLOGIN
(ACCOUNT_ID   ASC);

CREATE  INDEX IDX_KLOGIN_DESTACCTID ON KLOGIN
(DEST_ACCOUNT_ID   ASC);

CREATE  INDEX IDX_KLOGIN_KRBREALMID ON KLOGIN
(KRB_REALM_ID   ASC);

/***********************************************
 * Table: KLOGIN_MCLASS
 ***********************************************/

CREATE TABLE KLOGIN_MCLASS
(
	KLOGIN_ID            INTEGER NOT NULL 
,
	DEVICE_COLLECTION_ID INTEGER NOT NULL 
,
	INCLUDE_EXCLUDE_FLAG VARCHAR(10) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE KLOGIN_MCLASS
	ADD CONSTRAINT  PK_KLOGIN_MCLASS PRIMARY KEY (KLOGIN_ID,DEVICE_COLLECTION_ID)       ;

ALTER TABLE KLOGIN_MCLASS
	ADD CONSTRAINT  CKC_INCLUDE_EXCLUDE_F_KLOGIN_M CHECK (INCLUDE_EXCLUDE_FLAG in ('INCLUDE','EXCLUDE') and INCLUDE_EXCLUDE_FLAG = upper(INCLUDE_EXCLUDE_FLAG));

CREATE INDEX IDXBM_KLOGINMCLASS_INCLEXCLFLG ON KLOGIN_MCLASS
(INCLUDE_EXCLUDE_FLAG   ASC);

/***********************************************
 * Table: LAYER1_CONNECTION
 ***********************************************/

CREATE TABLE LAYER1_CONNECTION
(
	LAYER1_CONNECTION_ID SERIAL NOT NULL 
,
	PHYSICAL_PORT1_ID    INTEGER NULL,
	PHYSICAL_PORT2_ID    INTEGER NULL,
	CIRCUIT_ID           INTEGER NULL,
	BAUD                 INTEGER NULL,
	DATA_BITS            INTEGER NULL,
	STOP_BITS            INTEGER NULL,
	PARITY               VARCHAR(10) NULL,
	FLOW_CONTROL         VARCHAR(10) NULL,
	TCPSRV_DEVICE_ID     INTEGER NULL,
	IS_TCPSRV_ENABLED    CHAR(1) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE LAYER1_CONNECTION
	ADD CONSTRAINT  PK_LAYER1CONNETION PRIMARY KEY (LAYER1_CONNECTION_ID)       ;

ALTER TABLE LAYER1_CONNECTION
	ADD CONSTRAINT  CKC_IS_TCPSRV_ENABLED_LAYER1_C CHECK (IS_TCPSRV_ENABLED in ('Y','N') and IS_TCPSRV_ENABLED = upper(IS_TCPSRV_ENABLED));

ALTER TABLE LAYER1_CONNECTION
	ALTER IS_TCPSRV_ENABLED SET DEFAULT 'N';

CREATE  INDEX IDX_LAYER1CONN_CIRCUIT_ID ON LAYER1_CONNECTION
(CIRCUIT_ID   ASC);

CREATE  INDEX IDX_LAYER1CONN_PHYSPORT1 ON LAYER1_CONNECTION
(PHYSICAL_PORT1_ID   ASC);

CREATE  INDEX IDX_LAYER1CONN_PHYSPORT2 ON LAYER1_CONNECTION
(PHYSICAL_PORT2_ID   ASC);

/***********************************************
 * Table: LAYER2_CONNECTION
 ***********************************************/

CREATE TABLE LAYER2_CONNECTION
(
	LAYER2_CONNECTION_ID INTEGER NOT NULL 
,
	LOGICAL_PORT1_ID     INTEGER NULL,
	LOGICAL_PORT2_ID     INTEGER NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE LAYER2_CONNECTION
	ADD CONSTRAINT  PK_LAYER2_CONNECTION PRIMARY KEY (LAYER2_CONNECTION_ID)       ;

CREATE  INDEX XIF_L2_CONN_L1PORT ON LAYER2_CONNECTION
(LOGICAL_PORT1_ID   ASC);

CREATE  INDEX XIF_L2_CONN_L2PORT ON LAYER2_CONNECTION
(LOGICAL_PORT2_ID   ASC);

/***********************************************
 * Table: LAYER2_CONNECTION_L2_NETWORK
 ***********************************************/

CREATE TABLE LAYER2_CONNECTION_L2_NETWORK
(
	LAYER2_CONNECTION_ID INTEGER NOT NULL,
	LAYER2_NETWORK_ID    INTEGER NOT NULL,
	ENCAPSULATION_MODE   VARCHAR(50) NULL,
	ENCAPSULATION_TYPE   VARCHAR(50) NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE LAYER2_CONNECTION_L2_NETWORK
	ADD CONSTRAINT  PK_VAL_LAYER2_ENCAPSULATION_TY PRIMARY KEY (LAYER2_CONNECTION_ID,LAYER2_NETWORK_ID)       ;

CREATE  INDEX XIF_L2CL2N_L2NET_ID_ENCAP_TYP ON LAYER2_CONNECTION_L2_NETWORK
(LAYER2_NETWORK_ID   ASC,ENCAPSULATION_TYPE   ASC);

CREATE  INDEX XIF_L2C_L2N_ENCAP_MODE_TYPE ON LAYER2_CONNECTION_L2_NETWORK
(ENCAPSULATION_MODE   ASC,ENCAPSULATION_TYPE   ASC);

CREATE  INDEX XIF_L2C_L2N_L2CONNID ON LAYER2_CONNECTION_L2_NETWORK
(LAYER2_CONNECTION_ID   ASC);

CREATE  INDEX XIF_L2C_L2N_L2NETID ON LAYER2_CONNECTION_L2_NETWORK
(LAYER2_NETWORK_ID   ASC);

/***********************************************
 * Table: LAYER2_NETWORK
 ***********************************************/

CREATE TABLE LAYER2_NETWORK
(
	LAYER2_NETWORK_ID SERIAL NOT NULL 
,
	ENCAPSULATION_NAME   CHAR(32) NULL,
	ENCAPSULATION_DOMAIN VARCHAR(50) NULL,
	ENCAPSULATION_TYPE   VARCHAR(50) NULL,
	ENCAPSULATION_TAG    INTEGER NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	ENCAPSULATION_RANGE_ID INTEGER NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN LAYER2_NETWORK.ENCAPSULATION_RANGE_ID IS 'Administrative information about which range this is a part of';

ALTER TABLE LAYER2_NETWORK
	ADD CONSTRAINT  PK_LAYER2_NETWORK PRIMARY KEY (LAYER2_NETWORK_ID)       ;

ALTER TABLE LAYER2_NETWORK
ADD CONSTRAINT  AK_L2NET_ENCAP_NAME UNIQUE (ENCAPSULATION_DOMAIN,ENCAPSULATION_TYPE,ENCAPSULATION_NAME);

ALTER TABLE LAYER2_NETWORK
ADD CONSTRAINT  AK_L2NET_ENCAP_TAG UNIQUE (ENCAPSULATION_TYPE,ENCAPSULATION_DOMAIN,ENCAPSULATION_TAG);

ALTER TABLE LAYER2_NETWORK
ADD CONSTRAINT  AK_L2_NET_L2NET_ENCAP_TYP UNIQUE (LAYER2_NETWORK_ID,ENCAPSULATION_TYPE);

CREATE  INDEX XIF_L2_NET_ENCAP_DOMAIN ON LAYER2_NETWORK
(ENCAPSULATION_DOMAIN   ASC,ENCAPSULATION_TYPE   ASC);

CREATE  INDEX XIF_L2_NET_ENCAP_RANGE_ID ON LAYER2_NETWORK
(ENCAPSULATION_RANGE_ID   ASC);

/***********************************************
 * Table: LAYER3_NETWORK
 ***********************************************/

CREATE TABLE LAYER3_NETWORK
(
	LAYER3_NETWORK_ID SERIAL NOT NULL 
,
	NETBLOCK_ID          INTEGER NULL,
	LAYER2_NETWORK_ID    INTEGER NULL,
	DEFAULT_GATEWAY_NETBLOCK_ID INTEGER NOT NULL,
	RENDEVOUS_POINT_NETBLOCK_ID INTEGER NOT NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN LAYER3_NETWORK.RENDEVOUS_POINT_NETBLOCK_ID IS 'Multicast Rendevous Point Address';

ALTER TABLE LAYER3_NETWORK
	ADD CONSTRAINT  PK_LAYER3_NETWORK PRIMARY KEY (LAYER3_NETWORK_ID)       ;

ALTER TABLE LAYER3_NETWORK
ADD CONSTRAINT  AK_LAYER3_NETWORK_NETBLOCK_ID UNIQUE (NETBLOCK_ID);

CREATE  INDEX XIF_L3NET_L2NET ON LAYER3_NETWORK
(LAYER2_NETWORK_ID   ASC);

CREATE  INDEX XIF_L3NET_RNDV_PT_NBLK_ID ON LAYER3_NETWORK
(RENDEVOUS_POINT_NETBLOCK_ID   ASC);

CREATE  INDEX XIF_L3_NET_DEF_GATE_NBID ON LAYER3_NETWORK
(DEFAULT_GATEWAY_NETBLOCK_ID   ASC);

/***********************************************
 * Table: LOGICAL_PORT
 ***********************************************/

CREATE TABLE LOGICAL_PORT
(
	LOGICAL_PORT_ID SERIAL NOT NULL 
,
	LOGICAL_PORT_NAME    VARCHAR(50) NOT NULL,
	LOGICAL_PORT_TYPE    VARCHAR(50) NULL,
	PARENT_LOGICAL_PORT_ID INTEGER NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE LOGICAL_PORT
	ADD CONSTRAINT  PK_LOGICAL_PORT PRIMARY KEY (LOGICAL_PORT_ID)       ;

CREATE  INDEX XIF_LOGICAL_PORT_LG_PORT_TYPE ON LOGICAL_PORT
(LOGICAL_PORT_TYPE   ASC);

CREATE  INDEX XIF_LOGICAL_PORT_PARNET_ID ON LOGICAL_PORT
(PARENT_LOGICAL_PORT_ID   ASC);

/***********************************************
 * Table: MLAG_PEERING
 ***********************************************/

CREATE TABLE MLAG_PEERING
(
	MLAG_PEERING_ID SERIAL NOT NULL 
,
	DEVICE1_ID           INTEGER NULL,
	DEVICE2_ID           INTEGER NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE MLAG_PEERING
	ADD CONSTRAINT  PK_MLAG_PEERING PRIMARY KEY (MLAG_PEERING_ID)       ;

CREATE  INDEX XIF_MLAG_PEERING_DEVID1 ON MLAG_PEERING
(DEVICE1_ID   ASC);

CREATE  INDEX XIF_MLAG_PEERING_DEVID2 ON MLAG_PEERING
(DEVICE2_ID   ASC);

/***********************************************
 * Table: NETBLOCK
 ***********************************************/

CREATE TABLE NETBLOCK
(
	NETBLOCK_ID SERIAL NOT NULL 
,
	IP_ADDRESS inet NOT NULL,
	NETBLOCK_TYPE        VARCHAR(50) NOT NULL,
	IS_SINGLE_ADDRESS    CHAR(1) NOT NULL,
	CAN_SUBNET           CHAR(1) NOT NULL,
	PARENT_NETBLOCK_ID   INTEGER NULL,
	NETBLOCK_STATUS      VARCHAR(50) NOT NULL 
,
	NIC_ID               VARCHAR(255) NULL,
	NIC_COMPANY_ID       INTEGER NULL,
	IP_UNIVERSE_ID       INTEGER NOT NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	RESERVATION_TICKET_NUMBER VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE NETBLOCK
	ADD CONSTRAINT  PK_NETBLOCK PRIMARY KEY (NETBLOCK_ID)       ;

ALTER TABLE NETBLOCK
	ADD CONSTRAINT  CKC_IS_SINGLE_ADDRESS_NETBLOCK CHECK (IS_SINGLE_ADDRESS is null or (IS_SINGLE_ADDRESS in ('Y','N') and IS_SINGLE_ADDRESS = upper(IS_SINGLE_ADDRESS)));

ALTER TABLE NETBLOCK
	ADD CONSTRAINT  CHECK_YES_NO_172122967 CHECK (CAN_SUBNET IN ('Y', 'N'));

ALTER TABLE NETBLOCK
	ALTER IP_UNIVERSE_ID SET DEFAULT 0;

CREATE  INDEX XIF5NETBLOCK ON NETBLOCK
(NIC_COMPANY_ID   ASC);

CREATE  INDEX XIF6NETBLOCK ON NETBLOCK
(IP_UNIVERSE_ID   ASC);

CREATE  INDEX XIF7NETBLOCK ON NETBLOCK
(NETBLOCK_TYPE   ASC);

CREATE INDEX IDX_NETBLK_NETBLKSTATUS ON NETBLOCK
(NETBLOCK_STATUS   ASC);

CREATE  INDEX IX_NETBLK_IP_ADDRESS ON NETBLOCK
(IP_ADDRESS   ASC);

CREATE  INDEX IX_NETBLK_IP_ADDRESS_PARENT ON NETBLOCK
(PARENT_NETBLOCK_ID   ASC);

/***********************************************
 * Table: NETBLOCK_COLLECTION
 ***********************************************/

CREATE TABLE NETBLOCK_COLLECTION
(
	NETBLOCK_COLLECTION_ID SERIAL NOT NULL 
,
	NETBLOCK_COLLECTION_NAME VARCHAR(255) NOT NULL 
,
	NETBLOCK_COLLECTION_TYPE VARCHAR(50) NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE NETBLOCK_COLLECTION
	ADD CONSTRAINT  PK_NETBLOCK_COLLECTION PRIMARY KEY (NETBLOCK_COLLECTION_ID)       ;

ALTER TABLE NETBLOCK_COLLECTION
ADD CONSTRAINT  UQ_NETBLOCK_COLLECTION_NAME UNIQUE (NETBLOCK_COLLECTION_NAME,NETBLOCK_COLLECTION_TYPE)       ;

CREATE  INDEX XIFK_NB_COL_VAL_NB_COL_TYP ON NETBLOCK_COLLECTION
(NETBLOCK_COLLECTION_TYPE   ASC);

/***********************************************
 * Table: NETBLOCK_COLLECTION_HIER
 ***********************************************/

CREATE TABLE NETBLOCK_COLLECTION_HIER
(
	NETBLOCK_COLLECTION_ID INTEGER NOT NULL,
	CHILD_NETBLOCK_COLLECTION_ID INTEGER NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE NETBLOCK_COLLECTION_HIER
	ADD CONSTRAINT  PK_NETBLOCK_COLLECTION_HIER PRIMARY KEY (NETBLOCK_COLLECTION_ID,CHILD_NETBLOCK_COLLECTION_ID)       ;

CREATE  INDEX XIFK_NBLK_C_HIER_CHLD_NC ON NETBLOCK_COLLECTION_HIER
(CHILD_NETBLOCK_COLLECTION_ID   ASC);

CREATE  INDEX XIFK_NBLK_C_HIER_PRNT_NC ON NETBLOCK_COLLECTION_HIER
(NETBLOCK_COLLECTION_ID   ASC);

CREATE TABLE NETBLOCK_COLLECTION_NETBLOCK
(
	NETBLOCK_COLLECTION_ID INTEGER NOT NULL,
	NETBLOCK_ID          INTEGER NOT NULL,
	NETBLOCK_ID_RANK     INTEGER NULL,
	START_DATE           TIMESTAMP NULL,
	FINISH_DATE          TIMESTAMP NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE NETBLOCK_COLLECTION_NETBLOCK
	ADD CONSTRAINT  PK_NETBLOCK_COLLECTION_NETBLOC PRIMARY KEY (NETBLOCK_COLLECTION_ID,NETBLOCK_ID)       ;

ALTER TABLE NETBLOCK_COLLECTION_NETBLOCK
ADD CONSTRAINT  AK_NETBLK_COLL_NBLK_ID UNIQUE (NETBLOCK_COLLECTION_ID,NETBLOCK_ID_RANK);

CREATE  INDEX IFK_NB_COL_NB_NBLKID ON NETBLOCK_COLLECTION_NETBLOCK
(NETBLOCK_ID   ASC);

CREATE  INDEX XIFK_NB_COL_NB_NBCOLID ON NETBLOCK_COLLECTION_NETBLOCK
(NETBLOCK_COLLECTION_ID   ASC);

/***********************************************
 * Table: NETWORK_INTERFACE
 ***********************************************/

CREATE TABLE NETWORK_INTERFACE
(
	NETWORK_INTERFACE_ID SERIAL NOT NULL 
,
	DEVICE_ID            INTEGER NOT NULL,
	NETWORK_INTERFACE_NAME VARCHAR(255) NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	PARENT_NETWORK_INTERFACE_ID INTEGER NULL,
	PARENT_RELATION_TYPE VARCHAR(255) NULL,
	NETBLOCK_ID          INTEGER NULL,
	PHYSICAL_PORT_ID     INTEGER NULL,
	LOGICAL_PORT_ID      INTEGER NULL,
	NETWORK_INTERFACE_TYPE VARCHAR(50) NOT NULL 
,
	IS_INTERFACE_UP      CHAR(1) NOT NULL 
,
	MAC_ADDR macaddr NULL,
	SHOULD_MONITOR       VARCHAR(255) NOT NULL 
,
	PROVIDES_NAT         CHAR(1) NOT NULL 
,
	SHOULD_MANAGE        CHAR(1) NOT NULL 
,
	PROVIDES_DHCP        CHAR(1) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN NETWORK_INTERFACE.PHYSICAL_PORT_ID IS 'This column will be dropped!';

ALTER TABLE NETWORK_INTERFACE
	ADD CONSTRAINT  PK_NETWORK_INTERFACE_ID PRIMARY KEY (NETWORK_INTERFACE_ID)       ;

ALTER TABLE NETWORK_INTERFACE
ADD CONSTRAINT  FK_NETINT_DEVID_NAME UNIQUE (DEVICE_ID,NETWORK_INTERFACE_NAME);

ALTER TABLE NETWORK_INTERFACE
ADD CONSTRAINT  AK_NET_INT_DEVID_NETINTID UNIQUE (NETWORK_INTERFACE_ID,DEVICE_ID);

ALTER TABLE NETWORK_INTERFACE
	ADD CONSTRAINT  CKC_IS_INTERFACE_UP_NETWORK_ CHECK (IS_INTERFACE_UP in ('Y','N') and IS_INTERFACE_UP = upper(IS_INTERFACE_UP));

ALTER TABLE NETWORK_INTERFACE
	ADD CONSTRAINT  CKC_PROVIDES_NAT_NETWORK_ CHECK (PROVIDES_NAT in ('Y','N') and PROVIDES_NAT = upper(PROVIDES_NAT));

ALTER TABLE NETWORK_INTERFACE
	ADD CONSTRAINT  CKC_SHOULD_MANAGE_NETWORK_ CHECK (SHOULD_MANAGE in ('Y','N') and SHOULD_MANAGE = upper(SHOULD_MANAGE));

ALTER TABLE NETWORK_INTERFACE
	ADD CONSTRAINT  CKC_PROVIDES_DHCP_NETWORK_ CHECK (PROVIDES_DHCP in ('Y','N') and PROVIDES_DHCP = upper(PROVIDES_DHCP));

ALTER TABLE NETWORK_INTERFACE
	ADD CONSTRAINT  CKC_NETINT_PARENT_R_1604677531 CHECK (PARENT_RELATION_TYPE IN ('NONE', 'SUBINTERFACE', 'SECONDARY'));

ALTER TABLE NETWORK_INTERFACE
	ALTER IS_INTERFACE_UP SET DEFAULT 'Y';

ALTER TABLE NETWORK_INTERFACE
	ALTER PROVIDES_NAT SET DEFAULT 'N';

ALTER TABLE NETWORK_INTERFACE
	ALTER SHOULD_MANAGE SET DEFAULT 'Y';

ALTER TABLE NETWORK_INTERFACE
	ALTER PROVIDES_DHCP SET DEFAULT 'N';

CREATE INDEX IDX_NETINT_ISIFACEUP ON NETWORK_INTERFACE
(IS_INTERFACE_UP   ASC);

CREATE INDEX IDX_NETINT_PROVIDESNAT ON NETWORK_INTERFACE
(PROVIDES_NAT   ASC);

CREATE INDEX IDX_NETINT_PROVIDES_DHCP ON NETWORK_INTERFACE
(PROVIDES_DHCP   ASC);

CREATE INDEX IDX_NETINT_SHOULDMANGE ON NETWORK_INTERFACE
(SHOULD_MANAGE   ASC);

CREATE INDEX IDX_NETINT_SHOULDMONITOR ON NETWORK_INTERFACE
(SHOULD_MONITOR   ASC);

CREATE  INDEX XIF_NETINT_NETDEV_ID ON NETWORK_INTERFACE
(DEVICE_ID   ASC);

CREATE  INDEX XIF_NETINT_PARENTNETINT ON NETWORK_INTERFACE
(PARENT_NETWORK_INTERFACE_ID   ASC);

CREATE  INDEX XIF_NETINT_PRIM_V4ID ON NETWORK_INTERFACE
(NETBLOCK_ID   ASC);

CREATE INDEX XIF_NETINT_TYPEID ON NETWORK_INTERFACE
(NETWORK_INTERFACE_TYPE   ASC);

CREATE  INDEX XIF_NET_INT_LGL_PORT_ID ON NETWORK_INTERFACE
(LOGICAL_PORT_ID   ASC);

CREATE  INDEX XIF_NET_INT_PHS_PORT_DEVID ON NETWORK_INTERFACE
(PHYSICAL_PORT_ID   ASC,DEVICE_ID   ASC);

/***********************************************
 * Table: NETWORK_INTERFACE_NETBLOCK
 ***********************************************/

CREATE TABLE NETWORK_INTERFACE_NETBLOCK
(
	NETWORK_INTERFACE_ID INTEGER NOT NULL,
	NETBLOCK_ID          INTEGER NOT NULL,
	NETWORK_INTERFACE_RANK INTEGER NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN NETWORK_INTERFACE_NETBLOCK.NETWORK_INTERFACE_RANK IS 'specifies the order of priority for the ip address.  generally only the highest priority matters (or highest priority v4 and v6) and is the "primary" if the underlying device supports it.';

ALTER TABLE NETWORK_INTERFACE_NETBLOCK
	ADD CONSTRAINT  PK_NETWORK_INTERFACE_NETBLOCK PRIMARY KEY (NETWORK_INTERFACE_ID,NETBLOCK_ID)     ;

ALTER TABLE NETWORK_INTERFACE_NETBLOCK
ADD CONSTRAINT  AK_NETINT_NBLK_NBLK_ID UNIQUE (NETBLOCK_ID);

ALTER TABLE NETWORK_INTERFACE_NETBLOCK
ADD CONSTRAINT  AK_NETWORK_INTERFACE_NBLK_NI_R UNIQUE (NETWORK_INTERFACE_ID,NETWORK_INTERFACE_RANK);

ALTER TABLE NETWORK_INTERFACE_NETBLOCK
	ALTER NETWORK_INTERFACE_RANK SET DEFAULT 0;

CREATE  INDEX XIF_NETINT_NB_NBLK_ID ON NETWORK_INTERFACE_NETBLOCK
(NETWORK_INTERFACE_ID   ASC);

/***********************************************
 * Table: NETWORK_INTERFACE_PURPOSE
 ***********************************************/

CREATE TABLE NETWORK_INTERFACE_PURPOSE
(
	DEVICE_ID            INTEGER NOT NULL,
	NETWORK_INTERFACE_PURPOSE VARCHAR(50) NOT NULL 
,
	NETWORK_INTERFACE_ID INTEGER NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE NETWORK_INTERFACE_PURPOSE
	ADD CONSTRAINT  PK_NETWORK_INT_PURPOSE PRIMARY KEY (DEVICE_ID,NETWORK_INTERFACE_PURPOSE)       ;

CREATE  INDEX XIF1NETWORK_INTERFACE_PURPOSE ON NETWORK_INTERFACE_PURPOSE
(DEVICE_ID   ASC);

CREATE  INDEX XIF2NETWORK_INTERFACE_PURPOSE ON NETWORK_INTERFACE_PURPOSE
(NETWORK_INTERFACE_PURPOSE   ASC);

CREATE  INDEX XIF3NETWORK_INTERFACE_PURPOSE ON NETWORK_INTERFACE_PURPOSE
(NETWORK_INTERFACE_ID   ASC,DEVICE_ID   ASC);

/***********************************************
 * Table: NETWORK_RANGE
 ***********************************************/

CREATE TABLE NETWORK_RANGE
(
	NETWORK_RANGE_ID SERIAL NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	START_NETBLOCK_ID    INTEGER NOT NULL 
,
	STOP_NETBLOCK_ID     INTEGER NOT NULL 
,
	DNS_PREFIX           VARCHAR(255) NULL,
	DNS_DOMAIN_ID        INTEGER NOT NULL,
	LEASE_TIME           INTEGER NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE NETWORK_RANGE
	ADD CONSTRAINT  PK_NETWORK_RANGE PRIMARY KEY (NETWORK_RANGE_ID)       ;

CREATE  INDEX IDX_NETRNG_DNSDOMAINID ON NETWORK_RANGE
(DNS_DOMAIN_ID   ASC);

CREATE  INDEX IDX_NETRNG_STARTNETBLK ON NETWORK_RANGE
(START_NETBLOCK_ID   ASC);

CREATE  INDEX IDX_NETRNG_STOPNETBLK ON NETWORK_RANGE
(STOP_NETBLOCK_ID   ASC);

/***********************************************
 * Table: NETWORK_SERVICE
 ***********************************************/

CREATE TABLE NETWORK_SERVICE
(
	NETWORK_SERVICE_ID SERIAL NOT NULL 
,
	NAME                 VARCHAR(255) NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	NETWORK_SERVICE_TYPE VARCHAR(50) NOT NULL 
,
	IS_MONITORED         CHAR(1) NULL,
	DEVICE_ID            INTEGER NULL,
	NETWORK_INTERFACE_ID INTEGER NULL,
	DNS_RECORD_ID        INTEGER NULL,
	SERVICE_ENVIRONMENT_ID INTEGER NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE NETWORK_SERVICE
	ADD CONSTRAINT  PK_SERVICE PRIMARY KEY (NETWORK_SERVICE_ID)       ;

ALTER TABLE NETWORK_SERVICE
	ADD CONSTRAINT  CKC_IS_MONITORED_NETWORK_ CHECK (IS_MONITORED is null or (IS_MONITORED in ('Y','N') and IS_MONITORED = upper(IS_MONITORED)));

CREATE INDEX IDX_NETSVC_ISMONITORED ON NETWORK_SERVICE
(IS_MONITORED   ASC);

CREATE INDEX IDX_NETSVC_NETSVCTYPE ON NETWORK_SERVICE
(NETWORK_SERVICE_TYPE   ASC);

CREATE INDEX IDX_NETSVC_SVCENV ON NETWORK_SERVICE
(SERVICE_ENVIRONMENT_ID   ASC);

CREATE  INDEX IX_NETSVC_DNSIDRECID ON NETWORK_SERVICE
(DNS_RECORD_ID   ASC);

CREATE  INDEX IX_NETSVC_NETDEVID ON NETWORK_SERVICE
(DEVICE_ID   ASC);

CREATE  INDEX IX_NETSVC_NETINTID ON NETWORK_SERVICE
(NETWORK_INTERFACE_ID   ASC);

/***********************************************
 * Table: OPERATING_SYSTEM
 ***********************************************/

CREATE TABLE OPERATING_SYSTEM
(
	OPERATING_SYSTEM_ID SERIAL NOT NULL 
,
	OPERATING_SYSTEM_NAME VARCHAR(255) NOT NULL 
,
	VERSION              VARCHAR(255) NOT NULL 
,
	COMPANY_ID           INTEGER NULL,
	PROCESSOR_ARCHITECTURE VARCHAR(50) NOT NULL 
,
	SW_PACKAGE_REPOSITORY_ID INTEGER NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE OPERATING_SYSTEM
	ADD CONSTRAINT  PK_OPERATING_SYSTEM PRIMARY KEY (OPERATING_SYSTEM_ID)       ;

CREATE  INDEX XIF5OPERATING_SYSTEM ON OPERATING_SYSTEM
(COMPANY_ID   ASC);

/***********************************************
 * Table: PERSON
 ***********************************************/

CREATE TABLE PERSON
(
	PERSON_ID SERIAL NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	FIRST_NAME           VARCHAR(50) NOT NULL 
,
	MIDDLE_NAME          VARCHAR(50) NULL,
	LAST_NAME            VARCHAR(50) NOT NULL 
,
	NAME_SUFFIX          VARCHAR(10) NULL,
	GENDER               CHAR(1) NULL,
	PREFERRED_FIRST_NAME VARCHAR(50) NULL,
	PREFERRED_LAST_NAME  VARCHAR(50) NULL,
	NICKNAME             VARCHAR(255) NULL,
	BIRTH_DATE           TIMESTAMP WITH TIME ZONE NULL,
	DIET                 VARCHAR(255) NULL,
	SHIRT_SIZE           VARCHAR(20) NULL,
	PANT_SIZE            VARCHAR(20) NULL,
	HAT_SIZE             VARCHAR(20) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN PERSON.FIRST_NAME IS 'Legal First Name';

COMMENT ON COLUMN PERSON.MIDDLE_NAME IS 'Legal Middle name or name(s)';

COMMENT ON COLUMN PERSON.LAST_NAME IS 'Legal Last Name';

COMMENT ON COLUMN PERSON.PREFERRED_FIRST_NAME IS 'What the person''s preferred name is called, suitable for official commications.';

COMMENT ON COLUMN PERSON.PREFERRED_LAST_NAME IS 'A known last name, typically used if someone has a different married name but professionally is known by something different.';

COMMENT ON COLUMN PERSON.DESCRIPTION IS 'free form description, generally unused';

COMMENT ON COLUMN PERSON.NICKNAME IS 'Common nickname for the person, differs from the preferred name in that its more casual.';

ALTER TABLE PERSON
	ADD CONSTRAINT  PK_PERSON_ID PRIMARY KEY (PERSON_ID)       ;

ALTER TABLE PERSON
	ADD CONSTRAINT  Validation_Rule_176_1095976282 CHECK (GENDER is null or (GENDER in ('M','F','U') and GENDER = upper(GENDER)));

ALTER TABLE PERSON
	ADD CONSTRAINT  Validation_Rule_1770_218378485 CHECK (SHIRT_SIZE is null or (SHIRT_SIZE in ('XS','S','M','L','XL','XXL','XXXL') and SHIRT_SIZE = upper(SHIRT_SIZE)));

ALTER TABLE PERSON
	ADD CONSTRAINT  Validation_Rule_177_1190387970 CHECK (PANT_SIZE is null or (PANT_SIZE in ('XS','S','M','L','XL','XXL','XXXL') and PANT_SIZE = upper(PANT_SIZE)));

CREATE  INDEX XIF1PERSON ON PERSON
(DIET   ASC);

CREATE  INDEX IDX_PERSON_NAME ON PERSON
(FIRST_NAME   ASC,LAST_NAME   ASC);

/***********************************************
 * Table: PERSON_ACCOUNT_REALM_COMPANY
 ***********************************************/

CREATE TABLE PERSON_ACCOUNT_REALM_COMPANY
(
	PERSON_ID            INTEGER NOT NULL,
	COMPANY_ID           INTEGER NOT NULL,
	ACCOUNT_REALM_ID     INTEGER NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE PERSON_ACCOUNT_REALM_COMPANY
	ADD CONSTRAINT  PK_PERSON_ACCOUNT_REALM_COMPAN PRIMARY KEY (PERSON_ID,COMPANY_ID,ACCOUNT_REALM_ID)       ;

CREATE  INDEX XIF2PERSON_ACCOUNT_REALM_COMPA ON PERSON_ACCOUNT_REALM_COMPANY
(ACCOUNT_REALM_ID   ASC,COMPANY_ID   ASC);

CREATE  INDEX XIF3PERSON_ACCOUNT_REALM_COMPA ON PERSON_ACCOUNT_REALM_COMPANY
(PERSON_ID   ASC);

/***********************************************
 * Table: PERSON_AUTH_QUESTION
 ***********************************************/

CREATE TABLE PERSON_AUTH_QUESTION
(
	AUTH_QUESTION_ID     INTEGER NOT NULL 
,
	PERSON_ID            INTEGER NOT NULL,
	USER_ANSWER          VARCHAR(255) NOT NULL 
,
	IS_ACTIVE            CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE PERSON_AUTH_QUESTION IS 'Captures system user chosen answers to the set of predetermined questions for user authentication purposes.';

COMMENT ON COLUMN PERSON_AUTH_QUESTION.AUTH_QUESTION_ID IS 'Uniquely identifies authentication question.';

COMMENT ON COLUMN PERSON_AUTH_QUESTION.USER_ANSWER IS 'Records system user answer to the authentication question.';

ALTER TABLE PERSON_AUTH_QUESTION
	ADD CONSTRAINT  PK_PERSON_AUTH_QUESTION PRIMARY KEY (AUTH_QUESTION_ID,PERSON_ID)       ;

ALTER TABLE PERSON_AUTH_QUESTION
	ADD CONSTRAINT  CHECK_YES_NO_272505412 CHECK (IS_ACTIVE IN ('Y', 'N'));

CREATE  INDEX XIF3PERSON_AUTH_QUESTION ON PERSON_AUTH_QUESTION
(PERSON_ID   ASC);

CREATE  INDEX IX_PERSON_AQ_AUTH_QUES_ID ON PERSON_AUTH_QUESTION
(AUTH_QUESTION_ID   ASC);

/***********************************************
 * Table: PERSON_COMPANY
 ***********************************************/

CREATE TABLE PERSON_COMPANY
(
	COMPANY_ID           INTEGER NOT NULL 
,
	PERSON_ID            INTEGER NOT NULL,
	PERSON_COMPANY_STATUS VARCHAR(50) NOT NULL,
	PERSON_COMPANY_RELATION VARCHAR(50) NOT NULL,
	IS_EXEMPT            CHAR(1) NOT NULL,
	IS_MANAGEMENT        CHAR(1) NOT NULL,
	IS_FULL_TIME         CHAR(1) NOT NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	EMPLOYEE_ID          VARCHAR(255) NULL,
	PAYROLL_ID           VARCHAR(255) NULL,
	EXTERNAL_HR_ID       VARCHAR(255) NULL,
	POSITION_TITLE       VARCHAR(50) NULL,
	BADGE_SYSTEM_ID      VARCHAR(255) NULL,
	HIRE_DATE            TIMESTAMP WITH TIME ZONE NULL,
	TERMINATION_DATE     TIMESTAMP WITH TIME ZONE NULL,
	MANAGER_PERSON_ID    INTEGER NULL,
	SUPERVISOR_PERSON_ID INTEGER NULL,
	NICKNAME             VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN PERSON_COMPANY.NICKNAME IS 'Nickname in the context of a given company.  This is less likely to be used, the value in person is preferrred.';

ALTER TABLE PERSON_COMPANY
	ADD CONSTRAINT  PK_PERSON_COMPANY PRIMARY KEY (COMPANY_ID,PERSON_ID)       ;

ALTER TABLE PERSON_COMPANY
ADD CONSTRAINT  AK_UQ_PERSON_COMPANY_EMPID UNIQUE (EMPLOYEE_ID,COMPANY_ID)       ;

ALTER TABLE PERSON_COMPANY
ADD CONSTRAINT  AK_UQ_PRSON_COMPANY_BDGID UNIQUE (BADGE_SYSTEM_ID,COMPANY_ID)       ;

ALTER TABLE PERSON_COMPANY
	ADD CONSTRAINT  CHECK_YES_NO_1391508687 CHECK (IS_EXEMPT IN ('Y', 'N'));

ALTER TABLE PERSON_COMPANY
	ADD CONSTRAINT  CHECK_YES_NO_PRSNCMPY_MGMT CHECK (IS_MANAGEMENT IN ('Y', 'N'));

ALTER TABLE PERSON_COMPANY
	ADD CONSTRAINT  CHECK_YES_NO_691526916 CHECK (IS_FULL_TIME IN ('Y', 'N'));

ALTER TABLE PERSON_COMPANY
	ALTER IS_EXEMPT SET DEFAULT 'Y';

ALTER TABLE PERSON_COMPANY
	ALTER IS_MANAGEMENT SET DEFAULT 'N';

ALTER TABLE PERSON_COMPANY
	ALTER IS_FULL_TIME SET DEFAULT 'Y';

CREATE  INDEX XIF3PERSON_COMPANY ON PERSON_COMPANY
(MANAGER_PERSON_ID   ASC);

CREATE  INDEX XIF4PERSON_COMPANY ON PERSON_COMPANY
(SUPERVISOR_PERSON_ID   ASC);

CREATE  INDEX XIF5PERSON_COMPANY ON PERSON_COMPANY
(PERSON_COMPANY_STATUS   ASC);

CREATE  INDEX XIF6PERSON_COMPANY ON PERSON_COMPANY
(PERSON_COMPANY_RELATION   ASC);

CREATE  INDEX XIFPERSON_COMPANY_COMPANY_ID ON PERSON_COMPANY
(COMPANY_ID   ASC);

CREATE  INDEX XIFPERSON_COMPANY_PERSON_ID ON PERSON_COMPANY
(PERSON_ID   ASC);

/***********************************************
 * Table: PERSON_COMPANY_BADGE
 ***********************************************/

CREATE TABLE PERSON_COMPANY_BADGE
(
	COMPANY_ID           INTEGER NOT NULL,
	PERSON_ID            INTEGER NOT NULL,
	BADGE_ID             VARCHAR(255) NOT NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE PERSON_COMPANY_BADGE IS 'badges associated with a person''s relationship to a company';

COMMENT ON COLUMN PERSON_COMPANY_BADGE.BADGE_ID IS 'Identification usually defined externally in a badge system.';

ALTER TABLE PERSON_COMPANY_BADGE
	ADD CONSTRAINT  PK_PERSON_COMPANY_BADGE PRIMARY KEY (COMPANY_ID,PERSON_ID,BADGE_ID)       ;

CREATE  INDEX XIF1PERSON_COMPANY_BADGE ON PERSON_COMPANY_BADGE
(COMPANY_ID   ASC,PERSON_ID   ASC);

/***********************************************
 * Table: PERSON_CONTACT
 ***********************************************/

CREATE TABLE PERSON_CONTACT
(
	PERSON_CONTACT_ID SERIAL NOT NULL 
,
	PERSON_ID            INTEGER NOT NULL,
	PERSON_CONTACT_TYPE  VARCHAR(50) NOT NULL,
	PERSON_CONTACT_TECHNOLOGY VARCHAR(50) NOT NULL,
	PERSON_CONTACT_LOCATION_TYPE VARCHAR(50) NOT NULL,
	PERSON_CONTACT_PRIVACY VARCHAR(255) NOT NULL,
	PERSON_CONTACT_CR_COMPANY_ID INTEGER NULL,
	ISO_COUNTRY_CODE     CHAR(2) NOT NULL 
,
	PHONE_NUMBER         VARCHAR(50) NULL,
	PHONE_EXTENSION      VARCHAR(10) NULL,
	PHONE_PIN            INTEGER NULL,
	PERSON_CONTACT_ACCOUNT_NAME VARCHAR(255) NULL,
	PERSON_CONTACT_ORDER INTEGER NOT NULL 
,
	PERSON_CONTACT_NOTES VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN PERSON_CONTACT.PERSON_CONTACT_CR_COMPANY_ID IS 'The Contact''s Carrier Company Id';

COMMENT ON COLUMN PERSON_CONTACT.PERSON_CONTACT_TECHNOLOGY IS 'technology sub-type or protocol(phone,mobile,fax,voicemail,conference)';

ALTER TABLE PERSON_CONTACT
	ADD CONSTRAINT  PK_PERSON_CONTACT_TYPE PRIMARY KEY (PERSON_CONTACT_ID)       ;

ALTER TABLE PERSON_CONTACT
ADD CONSTRAINT  AK_PRSN_CONTCT_TYPE_ORDER UNIQUE (PERSON_CONTACT_ORDER,PERSON_ID,PERSON_CONTACT_TYPE)       ;

ALTER TABLE PERSON_CONTACT
	ADD CONSTRAINT  CKC_CONTACT_PRIVACY_440865622 CHECK (PERSON_CONTACT_PRIVACY IN ('PRIVATE', 'PUBLIC', 'HIDDEN'));

CREATE  INDEX XIF4PERSON_CONTACT ON PERSON_CONTACT
(PERSON_CONTACT_LOCATION_TYPE   ASC);

CREATE  INDEX XIF5PERSON_CONTACT ON PERSON_CONTACT
(PERSON_CONTACT_CR_COMPANY_ID   ASC);

CREATE  INDEX XIF6PERSON_CONTACT ON PERSON_CONTACT
(PERSON_CONTACT_TECHNOLOGY   ASC,PERSON_CONTACT_TYPE   ASC);

CREATE  INDEX XIF_PERSON_CONTACT_PERSON_ID ON PERSON_CONTACT
(PERSON_ID   ASC);

CREATE  INDEX XIF_PERSON_TYPE_ISO_CODE ON PERSON_CONTACT
(ISO_COUNTRY_CODE   ASC);

/***********************************************
 * Table: PERSON_IMAGE
 ***********************************************/

CREATE TABLE PERSON_IMAGE
(
	PERSON_IMAGE_ID SERIAL NOT NULL 
,
	PERSON_ID            INTEGER NOT NULL,
	PERSON_IMAGE_ORDER   INTEGER NOT NULL,
	IMAGE_TYPE           VARCHAR(50) NOT NULL 
,
	IMAGE_BLOB           OID NOT NULL,
	IMAGE_CHECKSUM       VARCHAR(255) NULL,
	IMAGE_LABEL          VARCHAR(255) NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE PERSON_IMAGE
	ADD CONSTRAINT  PK_PERSON_IMAGE PRIMARY KEY (PERSON_IMAGE_ID)       ;

CREATE  INDEX XIF3PERSON_IMAGE ON PERSON_IMAGE
(PERSON_ID   ASC);

CREATE INDEX IDX_PRSNIMG_IMG_TYPE ON PERSON_IMAGE
(IMAGE_TYPE   ASC);

/***********************************************
 * Table: PERSON_IMAGE_USAGE
 ***********************************************/

CREATE TABLE PERSON_IMAGE_USAGE
(
	PERSON_IMAGE_ID      INTEGER NOT NULL,
	PERSON_IMAGE_USAGE   VARCHAR(50) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE PERSON_IMAGE_USAGE
	ADD CONSTRAINT  PK_PERSON_IMAGE_USAGE PRIMARY KEY (PERSON_IMAGE_ID,PERSON_IMAGE_USAGE)       ;

CREATE  INDEX XIF1PERSON_IMAGE_USAGE ON PERSON_IMAGE_USAGE
(PERSON_IMAGE_ID   ASC);

CREATE  INDEX XIF2PERSON_IMAGE_USAGE ON PERSON_IMAGE_USAGE
(PERSON_IMAGE_USAGE   ASC);

/***********************************************
 * Table: PERSON_LOCATION
 ***********************************************/

CREATE TABLE PERSON_LOCATION
(
	PERSON_LOCATION_ID SERIAL NOT NULL 
,
	PERSON_ID            INTEGER NULL,
	PERSON_LOCATION_TYPE VARCHAR(50) NULL,
	SITE_CODE            VARCHAR(50) NULL,
	PHYSICAL_ADDRESS_ID  INTEGER NULL,
	BUILDING             VARCHAR(50) NULL,
	FLOOR                VARCHAR(10) NULL,
	SECTION              VARCHAR(50) NULL,
	SEAT_NUMBER          VARCHAR(10) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE PERSON_LOCATION
	ADD CONSTRAINT  PK_PERSON_LOCATION PRIMARY KEY (PERSON_LOCATION_ID)       ;

CREATE  INDEX XIFPERSLOC_PERSID ON PERSON_LOCATION
(PERSON_ID   ASC);

CREATE  INDEX XIFPERSLOC_PERSLOCTYP ON PERSON_LOCATION
(PERSON_LOCATION_TYPE   ASC);

CREATE  INDEX XIFPERSLOC_PHYSADDRID ON PERSON_LOCATION
(PHYSICAL_ADDRESS_ID   ASC);

CREATE  INDEX XIFPERSLOC_SITECODE ON PERSON_LOCATION
(SITE_CODE   ASC);

/***********************************************
 * Table: PERSON_NOTE
 ***********************************************/

CREATE TABLE PERSON_NOTE
(
	NOTE_ID SERIAL NOT NULL 
,
	PERSON_ID            INTEGER NULL,
	NOTE_TEXT            VARCHAR(4000) NOT NULL 
,
	NOTE_DATE            TIMESTAMP WITH TIME ZONE NOT NULL 
,
	NOTE_USER            VARCHAR(30) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE PERSON_NOTE
	ADD CONSTRAINT  PK_PERSON_NOTE PRIMARY KEY (NOTE_ID)       ;

ALTER TABLE PERSON_NOTE
	ADD CONSTRAINT  CKC_NOTE_USER_SYSTEM_U CHECK (NOTE_USER = upper(NOTE_USER));

CREATE  INDEX XIF1PERSON_NOTE ON PERSON_NOTE
(PERSON_ID   ASC);

/***********************************************
 * Table: PERSON_PARKING_PASS
 ***********************************************/

CREATE TABLE PERSON_PARKING_PASS
(
	PERSON_PARKING_PASS_ID INTEGER NOT NULL 
,
	PERSON_ID            INTEGER NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE PERSON_PARKING_PASS
	ADD CONSTRAINT  PK_SYSTEM_PARKING_PASS PRIMARY KEY (PERSON_PARKING_PASS_ID,PERSON_ID)       ;

CREATE  INDEX XIF2PERSON_PARKING_PASS ON PERSON_PARKING_PASS
(PERSON_ID   ASC);

/***********************************************
 * Table: PERSON_VEHICLE
 ***********************************************/

CREATE TABLE PERSON_VEHICLE
(
	PERSON_VEHICLE_ID SERIAL NOT NULL 
,
	PERSON_ID            INTEGER NOT NULL,
	VEHICLE_MAKE         VARCHAR(50) NOT NULL 
,
	VEHICLE_MODEL        VARCHAR(50) NOT NULL 
,
	VEHICLE_YEAR         VARCHAR(5) NOT NULL 
,
	VEHICLE_COLOR        VARCHAR(50) NOT NULL 
,
	VEHICLE_LICENSE_PLATE VARCHAR(8) NOT NULL 
,
	VEHICLE_LICENSE_STATE CHAR(2) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE PERSON_VEHICLE
	ADD CONSTRAINT  PK_PERSON_VEHICLE PRIMARY KEY (PERSON_VEHICLE_ID)       ;

ALTER TABLE PERSON_VEHICLE
ADD CONSTRAINT  AK_UQ_PERSON_VEHICLE_PRSNID UNIQUE (VEHICLE_LICENSE_PLATE,VEHICLE_LICENSE_STATE)       ;

CREATE  INDEX XIF2PERSON_VEHICLE ON PERSON_VEHICLE
(PERSON_ID   ASC);

/***********************************************
 * Table: PHYSICAL_ADDRESS
 ***********************************************/

CREATE TABLE PHYSICAL_ADDRESS
(
	PHYSICAL_ADDRESS_ID SERIAL NOT NULL 
,
	COMPANY_ID           INTEGER NULL,
	SITE_RANK            INTEGER NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DISPLAY_LABEL        VARCHAR(100) NULL,
	ADDRESS_AGENT        VARCHAR(100) NULL,
	ADDRESS_HOUSENAME    VARCHAR(255) NULL,
	ADDRESS_STREET       VARCHAR(255) NULL,
	ADDRESS_BUILDING     VARCHAR(255) NULL,
	ADDRESS_POBOX        VARCHAR(255) NULL,
	ADDRESS_NEIGHBORHOOD VARCHAR(255) NULL,
	ADDRESS_CITY         VARCHAR(100) NULL,
	ADDRESS_SUBREGION    CHAR(18) NULL,
	ADDRESS_REGION       VARCHAR(100) NULL,
	POSTAL_CODE          VARCHAR(20) NULL,
	ISO_COUNTRY_CODE     CHAR(2) NOT NULL,
	ADDRESS_FREEFORM     VARCHAR(50) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE PHYSICAL_ADDRESS
	ADD CONSTRAINT  PK_VAL_OFFICE_SITE PRIMARY KEY (PHYSICAL_ADDRESS_ID)       ;

ALTER TABLE PHYSICAL_ADDRESS
ADD CONSTRAINT  AK_PHYSADDR_COMPID_SITERK UNIQUE (COMPANY_ID,SITE_RANK);

CREATE  INDEX XIF1PHYSICAL_ADDRESS ON PHYSICAL_ADDRESS
(ISO_COUNTRY_CODE   ASC);

CREATE  INDEX XIF2PHYSICAL_ADDRESS ON PHYSICAL_ADDRESS
(COMPANY_ID   ASC);

/***********************************************
 * Table: PHYSICAL_CONNECTION
 ***********************************************/

CREATE TABLE PHYSICAL_CONNECTION
(
	PHYSICAL_CONNECTION_ID SERIAL NOT NULL 
,
	PHYSICAL_PORT1_ID    INTEGER NOT NULL 
,
	PHYSICAL_PORT2_ID    INTEGER NOT NULL 
,
	CABLE_TYPE           VARCHAR(50) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE PHYSICAL_CONNECTION
	ADD CONSTRAINT  PK_PHYSICAL_CONNECTION PRIMARY KEY (PHYSICAL_CONNECTION_ID)       ;

ALTER TABLE PHYSICAL_CONNECTION
ADD CONSTRAINT  AK_UQ_PHYSICAL_PORT_ID1 UNIQUE (PHYSICAL_PORT1_ID)       ;

ALTER TABLE PHYSICAL_CONNECTION
ADD CONSTRAINT  AK_UQ_PHYSICAL_PORT_ID2 UNIQUE (PHYSICAL_PORT2_ID)       ;

CREATE INDEX IDX_PHYSCONN_CABLETYPE ON PHYSICAL_CONNECTION
(CABLE_TYPE   ASC);

/***********************************************
 * Table: PHYSICAL_PORT
 ***********************************************/

CREATE TABLE PHYSICAL_PORT
(
	PHYSICAL_PORT_ID SERIAL NOT NULL 
,
	DEVICE_ID            INTEGER NOT NULL 
,
	PORT_NAME            VARCHAR(50) NOT NULL 
,
	PORT_TYPE            VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	PORT_PLUG_STYLE      VARCHAR(50) NULL,
	PORT_MEDIUM          VARCHAR(50) NULL,
	PORT_PROTOCOL        VARCHAR(50) NULL,
	PORT_SPEED           VARCHAR(50) NULL,
	PHYSICAL_LABEL       VARCHAR(50) NULL,
	PORT_PURPOSE         VARCHAR(50) NULL,
	LOGICAL_PORT_ID      INTEGER NULL,
	TCP_PORT             INTEGER NULL,
	IS_HARDWIRED         CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE PHYSICAL_PORT IS 'Non-power plugs on devices.  Something gets plugged into these.';

COMMENT ON COLUMN PHYSICAL_PORT.IS_HARDWIRED IS 'Indicates that the port is physically hardwired into the device and can not be removed.';

ALTER TABLE PHYSICAL_PORT
	ADD CONSTRAINT  PK_PHYSICAL_PORT PRIMARY KEY (PHYSICAL_PORT_ID)       ;

ALTER TABLE PHYSICAL_PORT
ADD CONSTRAINT  AK_PHYSICAL_PORT_DEVNAMTYPE UNIQUE (DEVICE_ID,PORT_NAME,PORT_TYPE)       ;

ALTER TABLE PHYSICAL_PORT
ADD CONSTRAINT  IAK_PPORT_DVID_PPORTID UNIQUE (PHYSICAL_PORT_ID,DEVICE_ID);

ALTER TABLE PHYSICAL_PORT
	ADD CONSTRAINT  CHECK_YES_NO_1847015416 CHECK (IS_HARDWIRED IN ('Y', 'N'));

ALTER TABLE PHYSICAL_PORT
	ALTER IS_HARDWIRED SET DEFAULT 'Y';

CREATE  INDEX XIF4PHYSICAL_PORT ON PHYSICAL_PORT
(PORT_PROTOCOL   ASC);

CREATE  INDEX XIF5PHYSICAL_PORT ON PHYSICAL_PORT
(PORT_MEDIUM   ASC,PORT_PLUG_STYLE   ASC);

CREATE  INDEX XIF6PHYSICAL_PORT ON PHYSICAL_PORT
(PORT_SPEED   ASC);

CREATE  INDEX XIF7PHYSICAL_PORT ON PHYSICAL_PORT
(LOGICAL_PORT_ID   ASC);

CREATE  INDEX IDX_PHYSPORT_DEVICE_ID ON PHYSICAL_PORT
(DEVICE_ID   ASC);

CREATE INDEX IDX_PHYSPORT_PORTTYPE ON PHYSICAL_PORT
(PORT_TYPE   ASC);

/***********************************************
 * Table: PROPERTY
 ***********************************************/

CREATE TABLE PROPERTY
(
	PROPERTY_ID SERIAL NOT NULL,
	ACCOUNT_COLLECTION_ID INTEGER NULL,
	ACCOUNT_ID           INTEGER NULL,
	ACCOUNT_REALM_ID     INTEGER NULL,
	COMPANY_ID           INTEGER NULL,
	DEVICE_COLLECTION_ID INTEGER NULL,
	DNS_DOMAIN_ID        INTEGER NULL,
	NETBLOCK_COLLECTION_ID INTEGER NULL,
	LAYER2_NETWORK_ID    INTEGER NULL,
	LAYER3_NETWORK_ID    INTEGER NULL,
	OPERATING_SYSTEM_ID  INTEGER NULL,
	PERSON_ID            INTEGER NULL,
	PROPERTY_COLLECTION_ID INTEGER NULL,
	SERVICE_ENV_COLLECTION_ID INTEGER NULL,
	SITE_CODE            VARCHAR(50) NULL,
	PROPERTY_NAME        VARCHAR(255) NOT NULL,
	PROPERTY_TYPE        VARCHAR(50) NOT NULL,
	PROPERTY_VALUE       VARCHAR(1024) NULL,
	PROPERTY_VALUE_TIMESTAMP TIMESTAMP NULL,
	PROPERTY_VALUE_COMPANY_ID INTEGER NULL,
	PROPERTY_VALUE_ACCOUNT_COLL_ID INTEGER NULL,
	PROPERTY_VALUE_DNS_DOMAIN_ID INTEGER NULL,
	PROPERTY_VALUE_NBLK_COLL_ID INTEGER NULL,
	PROPERTY_VALUE_PASSWORD_TYPE VARCHAR(50) NULL,
	PROPERTY_VALUE_PERSON_ID INTEGER NULL,
	PROPERTY_VALUE_SW_PACKAGE_ID INTEGER NULL,
	PROPERTY_VALUE_TOKEN_COL_ID INTEGER NULL,
	PROPERTY_RANK        INTEGER NULL,
	START_DATE           TIMESTAMP NULL,
	FINISH_DATE          TIMESTAMP NULL,
	IS_ENABLED           CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE PROPERTY IS 'generic property instance that describes system wide properties, as well as properties for various values of columns used throughout the db for configuration, acls, defaults, etc; also used to relate some tables';

COMMENT ON COLUMN PROPERTY.PROPERTY_ID IS 'primary key for table to uniquely identify rows.';

COMMENT ON COLUMN PROPERTY.COMPANY_ID IS 'company that properties may be set on.';

COMMENT ON COLUMN PROPERTY.DEVICE_COLLECTION_ID IS 'device collection that properties may be set on.';

COMMENT ON COLUMN PROPERTY.DNS_DOMAIN_ID IS 'dns domain that properties may be set on.';

COMMENT ON COLUMN PROPERTY.ACCOUNT_ID IS 'system user that properties may be set on.';

COMMENT ON COLUMN PROPERTY.ACCOUNT_COLLECTION_ID IS 'user collection that properties may be set on.';

COMMENT ON COLUMN PROPERTY.SITE_CODE IS 'site_code that properties may be set on';

COMMENT ON COLUMN PROPERTY.PROPERTY_NAME IS 'textual name of a property';

COMMENT ON COLUMN PROPERTY.PROPERTY_TYPE IS 'textual type of a department';

COMMENT ON COLUMN PROPERTY.PROPERTY_VALUE IS 'general purpose column for value of property not defined by other types.  This may be enforced by fk (trigger) if val_property.property_data_type is list (fk is to val_property_value).';

COMMENT ON COLUMN PROPERTY.PROPERTY_VALUE_TIMESTAMP IS 'property is defined as a timestamp';

COMMENT ON COLUMN PROPERTY.START_DATE IS 'date/time that the assignment takes effect';

COMMENT ON COLUMN PROPERTY.FINISH_DATE IS 'date/time that the assignment ceases taking effect';

COMMENT ON COLUMN PROPERTY.IS_ENABLED IS 'indiciates if the property is temporarily disabled or not.';

COMMENT ON COLUMN PROPERTY.OPERATING_SYSTEM_ID IS 'operating system that properties may be set on.';

ALTER TABLE PROPERTY
	ADD CONSTRAINT  PK_PROPERTY PRIMARY KEY (PROPERTY_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT  CKC_PROP_ISENBLD CHECK (IS_ENABLED IN ('Y', 'N'));

ALTER TABLE PROPERTY
	ALTER IS_ENABLED SET DEFAULT 'Y';

CREATE  INDEX XIF17PROPERTY ON PROPERTY
(PROPERTY_VALUE_PERSON_ID   ASC);

CREATE  INDEX XIF18PROPERTY ON PROPERTY
(PERSON_ID   ASC);

CREATE  INDEX XIF19PROPERTY ON PROPERTY
(PROPERTY_VALUE_NBLK_COLL_ID   ASC);

CREATE  INDEX XIF20PROPERTY ON PROPERTY
(NETBLOCK_COLLECTION_ID   ASC);

CREATE  INDEX XIF21PROPERTY ON PROPERTY
(SERVICE_ENV_COLLECTION_ID   ASC);

CREATE  INDEX XIF22PROPERTY ON PROPERTY
(ACCOUNT_REALM_ID   ASC);

CREATE  INDEX XIF23PROPERTY ON PROPERTY
(LAYER2_NETWORK_ID   ASC);

CREATE  INDEX XIF24PROPERTY ON PROPERTY
(LAYER3_NETWORK_ID   ASC);

CREATE  INDEX XIF25PROPERTY ON PROPERTY
(PROPERTY_COLLECTION_ID   ASC);

CREATE  INDEX XIFPROP_ACCOUNT_ID ON PROPERTY
(ACCOUNT_ID   ASC);

CREATE  INDEX XIFPROP_ACCTCOL_ID ON PROPERTY
(ACCOUNT_COLLECTION_ID   ASC);

CREATE  INDEX XIFPROP_COMPID ON PROPERTY
(COMPANY_ID   ASC);

CREATE  INDEX XIFPROP_DEVCOLID ON PROPERTY
(DEVICE_COLLECTION_ID   ASC);

CREATE  INDEX XIFPROP_DNSDOMID ON PROPERTY
(DNS_DOMAIN_ID   ASC);

CREATE  INDEX XIFPROP_NMTYP ON PROPERTY
(PROPERTY_NAME   ASC,PROPERTY_TYPE   ASC);

CREATE  INDEX XIFPROP_OSID ON PROPERTY
(OPERATING_SYSTEM_ID   ASC);

CREATE  INDEX XIFPROP_PVAL_ACCT_COLID ON PROPERTY
(PROPERTY_VALUE_ACCOUNT_COLL_ID   ASC);

CREATE  INDEX XIFPROP_PVAL_COMPID ON PROPERTY
(PROPERTY_VALUE_COMPANY_ID   ASC);

CREATE  INDEX XIFPROP_PVAL_DNSDOMID ON PROPERTY
(PROPERTY_VALUE_DNS_DOMAIN_ID   ASC);

CREATE  INDEX XIFPROP_PVAL_PWDTYP ON PROPERTY
(PROPERTY_VALUE_PASSWORD_TYPE   ASC);

CREATE  INDEX XIFPROP_PVAL_SWPKGID ON PROPERTY
(PROPERTY_VALUE_SW_PACKAGE_ID   ASC);

CREATE  INDEX XIFPROP_PVAL_TOKCOLID ON PROPERTY
(PROPERTY_VALUE_TOKEN_COL_ID   ASC);

CREATE  INDEX XIFPROP_SITE_CODE ON PROPERTY
(SITE_CODE   ASC);

/***********************************************
 * Table: PROPERTY_COLLECTION
 ***********************************************/

CREATE TABLE PROPERTY_COLLECTION
(
	PROPERTY_COLLECTION_ID SERIAL NOT NULL 
,
	PROPERTY_COLLECTION_NAME VARCHAR(255) NOT NULL 
,
	PROPERTY_COLLECTION_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE PROPERTY_COLLECTION IS 'Collections of Property Name/Types.  Used for grouping properties for different purposes';

ALTER TABLE PROPERTY_COLLECTION
	ADD CONSTRAINT  PK_PROPERTY_COLLECTION PRIMARY KEY (PROPERTY_COLLECTION_ID)       ;

ALTER TABLE PROPERTY_COLLECTION
ADD CONSTRAINT  AK_UQPROPCOLL_NAME_TYPE UNIQUE (PROPERTY_COLLECTION_NAME,PROPERTY_COLLECTION_TYPE)       ;

CREATE  INDEX XIF1PROPERTY_COLLECTION ON PROPERTY_COLLECTION
(PROPERTY_COLLECTION_TYPE   ASC);

/***********************************************
 * Table: PROPERTY_COLLECTION_HIER
 ***********************************************/

CREATE TABLE PROPERTY_COLLECTION_HIER
(
	PROPERTY_COLLECTION_ID INTEGER NOT NULL 
,
	CHILD_PROPERTY_COLLECTION_ID INTEGER NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE PROPERTY_COLLECTION_HIER
	ADD CONSTRAINT  PK_PROPERTY_COLLECTION_HIER PRIMARY KEY (PROPERTY_COLLECTION_ID,CHILD_PROPERTY_COLLECTION_ID)       ;

CREATE  INDEX XIF1PROPERTY_COLLECTION_HIER ON PROPERTY_COLLECTION_HIER
(PROPERTY_COLLECTION_ID   ASC);

CREATE  INDEX XIF2PROPERTY_COLLECTION_HIER ON PROPERTY_COLLECTION_HIER
(CHILD_PROPERTY_COLLECTION_ID   ASC);

/***********************************************
 * Table: PROPERTY_COLLECTION_PROPERTY
 ***********************************************/

CREATE TABLE PROPERTY_COLLECTION_PROPERTY
(
	PROPERTY_COLLECTION_ID INTEGER NOT NULL 
,
	PROPERTY_NAME        VARCHAR(255) NOT NULL,
	PROPERTY_TYPE        VARCHAR(50) NOT NULL,
	PROPERTY_ID_RANK     INTEGER NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE PROPERTY_COLLECTION_PROPERTY IS 'name,type members of a property collection';

COMMENT ON COLUMN PROPERTY_COLLECTION_PROPERTY.PROPERTY_NAME IS 'property name for validation purposes';

COMMENT ON COLUMN PROPERTY_COLLECTION_PROPERTY.PROPERTY_TYPE IS 'property type for validation purposes';

ALTER TABLE PROPERTY_COLLECTION_PROPERTY
	ADD CONSTRAINT  PK_PROPERTY_COLLECTION_PROPERT PRIMARY KEY (PROPERTY_COLLECTION_ID,PROPERTY_NAME,PROPERTY_TYPE)       ;

ALTER TABLE PROPERTY_COLLECTION_PROPERTY
ADD CONSTRAINT  XAKPROP_COLL_PROP_RANK UNIQUE (PROPERTY_COLLECTION_ID,PROPERTY_ID_RANK);

CREATE  INDEX XIFPROP_COLL_PROP_NAMTYP ON PROPERTY_COLLECTION_PROPERTY
(PROPERTY_NAME   ASC,PROPERTY_TYPE   ASC);

CREATE  INDEX XIFPROP_COLL_PROP_PROP_COLL_ID ON PROPERTY_COLLECTION_PROPERTY
(PROPERTY_COLLECTION_ID   ASC);

/***********************************************
 * Table: PSEUDO_KLOGIN
 ***********************************************/

CREATE TABLE PSEUDO_KLOGIN
(
	PSEUDO_KLOGIN_ID SERIAL NOT NULL 
,
	PRINCIPAL            VARCHAR(100) NULL,
	DEST_ACCOUNT_ID      INTEGER NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE PSEUDO_KLOGIN
	ADD CONSTRAINT  PK_PSEUDO_KLOGIN PRIMARY KEY (PSEUDO_KLOGIN_ID)       ;

CREATE  INDEX IDX_PSKLOGIN_DACCTID ON PSEUDO_KLOGIN
(DEST_ACCOUNT_ID   ASC);

/***********************************************
 * Table: RACK
 ***********************************************/

CREATE TABLE RACK
(
	RACK_ID SERIAL NOT NULL 
,
	SITE_CODE            VARCHAR(50) NOT NULL 
,
	ROOM                 VARCHAR(50) NULL,
	SUB_ROOM             VARCHAR(50) NULL,
	RACK_ROW             VARCHAR(50) NULL,
	RACK_NAME            VARCHAR(50) NOT NULL,
	RACK_STYLE           VARCHAR(50) NOT NULL 
,
	RACK_TYPE            VARCHAR(255) NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	RACK_HEIGHT_IN_U     INTEGER NOT NULL 
,
	DISPLAY_FROM_BOTTOM  CHAR(1) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE RACK
	ADD CONSTRAINT  PK_RACK_ID PRIMARY KEY (RACK_ID)       ;

ALTER TABLE RACK
ADD CONSTRAINT  AK_UQ_SITE_ROOM_SUB_R_RACK UNIQUE (SITE_CODE,ROOM,SUB_ROOM,RACK_ROW,RACK_NAME)       ;

ALTER TABLE RACK
	ADD CONSTRAINT  CKC_RACK_STYLE_RACK CHECK (RACK_STYLE in ('RELAY','CABINET') and RACK_STYLE = upper(RACK_STYLE));

ALTER TABLE RACK
	ADD CONSTRAINT  CKC_DISPLAY_FROM_BOTT_RACK CHECK (DISPLAY_FROM_BOTTOM in ('Y','N') and DISPLAY_FROM_BOTTOM = upper(DISPLAY_FROM_BOTTOM));

CREATE  INDEX XIF2RACK ON RACK
(RACK_TYPE   ASC);

/***********************************************
 * Table: RACK_LOCATION
 ***********************************************/

CREATE TABLE RACK_LOCATION
(
	RACK_LOCATION_ID SERIAL NOT NULL 
,
	RACK_ID              INTEGER NOT NULL,
	RACK_U_OFFSET_OF_DEVICE_TOP INTEGER NOT NULL,
	RACK_SIDE            VARCHAR(10) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE RACK_LOCATION
	ADD CONSTRAINT  PK_RACK_LOCATION PRIMARY KEY (RACK_LOCATION_ID)       ;

ALTER TABLE RACK_LOCATION
ADD CONSTRAINT  AK_UQ_RACK_OFFSET_SID_LOCATION UNIQUE (RACK_ID,RACK_U_OFFSET_OF_DEVICE_TOP,RACK_SIDE)       ;

ALTER TABLE RACK_LOCATION
	ADD CONSTRAINT  CKC_RACK_SIDE_LOCATION CHECK (RACK_SIDE in ('FRONT','BACK') and RACK_SIDE = upper(RACK_SIDE));

ALTER TABLE RACK_LOCATION
	ALTER RACK_SIDE SET DEFAULT 'FRONT';

/***********************************************
 * Table: SERVICE_ENVIRONMENT
 ***********************************************/

CREATE TABLE SERVICE_ENVIRONMENT
(
	SERVICE_ENVIRONMENT_ID SERIAL NOT NULL,
	SERVICE_ENVIRONMENT_NAME VARCHAR(50) NOT NULL 
,
	PRODUCTION_STATE     VARCHAR(50) NOT NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE SERVICE_ENVIRONMENT
	ADD CONSTRAINT  PK_SERVICE_ENVIRONMENT PRIMARY KEY (SERVICE_ENVIRONMENT_ID)       ;

CREATE  INDEX XIF1SERVICE_ENVIRONMENT ON SERVICE_ENVIRONMENT
(PRODUCTION_STATE   ASC);

/***********************************************
 * Table: SERVICE_ENVIRONMENT_COLL_HIER
 ***********************************************/

CREATE TABLE SERVICE_ENVIRONMENT_COLL_HIER
(
	SERVICE_ENV_COLLECTION_ID INTEGER NOT NULL,
	CHILD_SERVICE_ENV_COLL_ID INTEGER NOT NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE SERVICE_ENVIRONMENT_COLL_HIER
	ADD CONSTRAINT  PK_SERVICE_ENVIRONMENT_HIER PRIMARY KEY (SERVICE_ENV_COLLECTION_ID,CHILD_SERVICE_ENV_COLL_ID)       ;

CREATE  INDEX XIF1SERVICE_ENVIRONMENT_COLL_H ON SERVICE_ENVIRONMENT_COLL_HIER
(CHILD_SERVICE_ENV_COLL_ID   ASC);

CREATE  INDEX XIF2SERVICE_ENVIRONMENT_COLL_H ON SERVICE_ENVIRONMENT_COLL_HIER
(SERVICE_ENV_COLLECTION_ID   ASC);

/***********************************************
 * Table: SERVICE_ENVIRONMENT_COLLECTION
 ***********************************************/

CREATE TABLE SERVICE_ENVIRONMENT_COLLECTION
(
	SERVICE_ENV_COLLECTION_ID SERIAL NOT NULL 
,
	SERVICE_ENV_COLLECTION_NAME VARCHAR(50) NOT NULL,
	SERVICE_ENV_COLLECTION_TYPE VARCHAR(50) NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE SERVICE_ENVIRONMENT_COLLECTION
	ADD CONSTRAINT  PK_SERVICE_ENVIRONMENT_COLLECT PRIMARY KEY (SERVICE_ENV_COLLECTION_ID)       ;

ALTER TABLE SERVICE_ENVIRONMENT_COLLECTION
ADD CONSTRAINT  AK_VAL_SVC_ENV_NAME_TYPE UNIQUE (SERVICE_ENV_COLLECTION_NAME,SERVICE_ENV_COLLECTION_TYPE);

CREATE  INDEX XIF1SERVICE_ENVIRONMENT_COLLEC ON SERVICE_ENVIRONMENT_COLLECTION
(SERVICE_ENV_COLLECTION_TYPE   ASC);

/***********************************************
 * Table: SITE
 ***********************************************/

CREATE TABLE SITE
(
	SITE_CODE            VARCHAR(50) NOT NULL 
,
	COLO_COMPANY_ID      INTEGER NULL,
	NPANXX               VARCHAR(15) NULL,
	PHYSICAL_ADDRESS_ID  INTEGER NULL,
	SITE_STATUS          VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE SITE
	ADD CONSTRAINT  PK_SITE_CODE PRIMARY KEY (SITE_CODE)       ;

ALTER TABLE SITE
	ADD CONSTRAINT  CKC_SITE_STATUS_SITE CHECK (SITE_STATUS in ('ACTIVE','INACTIVE','OBSOLETE','PLANNED') and SITE_STATUS = upper(SITE_STATUS));

CREATE  INDEX FK_SITE_COLO_COMPANY_ID ON SITE
(COLO_COMPANY_ID   ASC);

CREATE  INDEX XIFSITE_PHYSADDR_ID ON SITE
(PHYSICAL_ADDRESS_ID   ASC);

/***********************************************
 * Table: SITE_NETBLOCK
 ***********************************************/

CREATE TABLE SITE_NETBLOCK
(
	SITE_CODE            VARCHAR(50) NOT NULL 
,
	NETBLOCK_ID          INTEGER NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE SITE_NETBLOCK
	ADD CONSTRAINT  PK_SITE_NETBLOCK PRIMARY KEY (SITE_CODE,NETBLOCK_ID)       ;

/***********************************************
 * Table: SNMP_COMMSTR
 ***********************************************/

CREATE TABLE SNMP_COMMSTR
(
	SNMP_COMMSTR_ID      INTEGER NOT NULL 
,
	DEVICE_ID            INTEGER NOT NULL 
,
	SNMP_COMMSTR_TYPE    VARCHAR(50) NOT NULL 
,
	RD_STRING            VARCHAR(255) NULL,
	WR_STRING            VARCHAR(255) NULL,
	PURPOSE              VARCHAR(255) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE SNMP_COMMSTR
	ADD CONSTRAINT  PK_SNMP_COMMSTR PRIMARY KEY (SNMP_COMMSTR_ID)       ;

ALTER TABLE SNMP_COMMSTR
ADD CONSTRAINT  AK_UQ_SNMP_COMMSTR_DE_SNMP_COM UNIQUE (DEVICE_ID,SNMP_COMMSTR_TYPE)       ;

CREATE  INDEX IX_SNMP_COMMSTR_NETDEV_ID ON SNMP_COMMSTR
(DEVICE_ID   ASC);

CREATE INDEX IX_SNMP_COMMSTR_TYPE_ID ON SNMP_COMMSTR
(SNMP_COMMSTR_TYPE   ASC);

/***********************************************
 * Table: SSH_KEY
 ***********************************************/

CREATE TABLE SSH_KEY
(
	SSH_KEY_ID SERIAL NOT NULL,
	SSH_KEY_TYPE         CHAR(18) NULL,
	SSH_PUBLIC_KEY       VARCHAR(4096) NOT NULL,
	SSH_PRIVATE_KEY      VARCHAR(4096) NULL,
	ENCRYPTION_KEY_ID    INTEGER NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE SSH_KEY
	ADD CONSTRAINT  PK_SSH_KEY PRIMARY KEY (SSH_KEY_ID)       ;

ALTER TABLE SSH_KEY
ADD CONSTRAINT  AK_SSH_KEY_PRIVATE_KEY UNIQUE (SSH_PRIVATE_KEY);

ALTER TABLE SSH_KEY
ADD CONSTRAINT  AK_SSH_KEY_PUBLIC_KEY UNIQUE (SSH_PUBLIC_KEY);

CREATE  INDEX XIF1SSH_KEY ON SSH_KEY
(ENCRYPTION_KEY_ID   ASC);

CREATE  INDEX XIF2SSH_KEY ON SSH_KEY
(SSH_KEY_TYPE   ASC);

/***********************************************
 * Table: STATIC_ROUTE
 ***********************************************/

CREATE TABLE STATIC_ROUTE
(
	STATIC_ROUTE_ID SERIAL NOT NULL 
,
	DEVICE_SRC_ID        INTEGER NOT NULL 
,
	NETWORK_INTERFACE_DST_ID INTEGER NOT NULL 
,
	NETBLOCK_ID          INTEGER NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE STATIC_ROUTE
	ADD CONSTRAINT  PK_STATIC_ROUTE_ID PRIMARY KEY (STATIC_ROUTE_ID)       ;

CREATE  INDEX IDX_STATICRT_DEVSRCID ON STATIC_ROUTE
(DEVICE_SRC_ID   ASC);

CREATE  INDEX IDX_STATICRT_NETBLOCKID ON STATIC_ROUTE
(NETBLOCK_ID   ASC);

CREATE  INDEX IDX_STATICRT_NETINTDSTID ON STATIC_ROUTE
(NETWORK_INTERFACE_DST_ID   ASC);

/***********************************************
 * Table: STATIC_ROUTE_TEMPLATE
 ***********************************************/

CREATE TABLE STATIC_ROUTE_TEMPLATE
(
	STATIC_ROUTE_TEMPLATE_ID SERIAL NOT NULL 
,
	NETBLOCK_SRC_ID      INTEGER NOT NULL 
,
	NETWORK_INTERFACE_DST_ID INTEGER NOT NULL 
,
	NETBLOCK_ID          INTEGER NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE STATIC_ROUTE_TEMPLATE
	ADD CONSTRAINT  PK_STATIC_ROUTE_TEMPLATE PRIMARY KEY (STATIC_ROUTE_TEMPLATE_ID)       ;

/***********************************************
 * Table: SUDO_ACCT_COL_DEVICE_COLLECTIO
 ***********************************************/

CREATE TABLE SUDO_ACCT_COL_DEVICE_COLLECTIO
(
	SUDO_ALIAS_NAME      VARCHAR(50) NOT NULL 
,
	DEVICE_COLLECTION_ID INTEGER NOT NULL 
,
	ACCOUNT_COLLECTION_ID INTEGER NOT NULL 
,
	RUN_AS_ACCOUNT_COLLECTION_ID INTEGER NULL,
	REQUIRES_PASSWORD    CHAR(1) NOT NULL,
	CAN_EXEC_CHILD       CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE SUDO_ACCT_COL_DEVICE_COLLECTIO
	ADD CONSTRAINT  PK_SUDO_ACCT_COL_DEV_COLL PRIMARY KEY (SUDO_ALIAS_NAME,DEVICE_COLLECTION_ID,ACCOUNT_COLLECTION_ID)       ;

ALTER TABLE SUDO_ACCT_COL_DEVICE_COLLECTIO
	ADD CONSTRAINT  CKC_SUDO_ALIAS_NAME_SUDO_UCL CHECK (sudo_alias_name ~  '^[A-Z][A-Z0-9_]*$');

ALTER TABLE SUDO_ACCT_COL_DEVICE_COLLECTIO
	ADD CONSTRAINT  CKC_REQUIRES_PASSWORD_SUDO_UCL CHECK (REQUIRES_PASSWORD is null or (REQUIRES_PASSWORD in ('Y','N') and REQUIRES_PASSWORD = upper(REQUIRES_PASSWORD)));

ALTER TABLE SUDO_ACCT_COL_DEVICE_COLLECTIO
	ADD CONSTRAINT  CKC_CAN_EXEC_CHILD_SUDO_UCL CHECK (CAN_EXEC_CHILD is null or (CAN_EXEC_CHILD in ('Y','N') and CAN_EXEC_CHILD = upper(CAN_EXEC_CHILD)));

/***********************************************
 * Table: SUDO_ALIAS
 ***********************************************/

CREATE TABLE SUDO_ALIAS
(
	SUDO_ALIAS_NAME      VARCHAR(50) NOT NULL 
,
	SUDO_ALIAS_VALUE     VARCHAR(4000) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE SUDO_ALIAS
	ADD CONSTRAINT  PK_SUDO_ALIAS PRIMARY KEY (SUDO_ALIAS_NAME)       ;

ALTER TABLE SUDO_ALIAS
	ADD CONSTRAINT  CKC_SUDO_ALIAS_NAME_SUDO_ALI CHECK (sudo_alias_name ~  '^[A-Z][A-Z0-9_]*$');

/***********************************************
 * Table: SVC_ENVIRONMENT_COLL_SVC_ENV
 ***********************************************/

CREATE TABLE SVC_ENVIRONMENT_COLL_SVC_ENV
(
	SERVICE_ENV_COLLECTION_ID INTEGER NOT NULL,
	SERVICE_ENVIRONMENT_ID INTEGER NOT NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE SVC_ENVIRONMENT_COLL_SVC_ENV
	ADD CONSTRAINT  PK_SVC_ENVIRONMENT_COLL_SVC_EN PRIMARY KEY (SERVICE_ENV_COLLECTION_ID,SERVICE_ENVIRONMENT_ID)       ;

CREATE  INDEX XIF1SVC_ENVIRONMENT_COLL_SVC_E ON SVC_ENVIRONMENT_COLL_SVC_ENV
(SERVICE_ENVIRONMENT_ID   ASC);

CREATE  INDEX XIF2SVC_ENVIRONMENT_COLL_SVC_E ON SVC_ENVIRONMENT_COLL_SVC_ENV
(SERVICE_ENV_COLLECTION_ID   ASC);

/***********************************************
 * Table: SW_PACKAGE
 ***********************************************/

CREATE TABLE SW_PACKAGE
(
	SW_PACKAGE_ID SERIAL NOT NULL 
,
	SW_PACKAGE_NAME      VARCHAR(50) NOT NULL 
,
	SW_PACKAGE_TYPE      VARCHAR(50) CONSTRAINT CKC_SW_PACKAGE_TYPE_NN NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE SW_PACKAGE
	ADD CONSTRAINT  PK_SW_PACKAGE PRIMARY KEY (SW_PACKAGE_ID)       ;

/***********************************************
 * Table: SW_PACKAGE_RELATION
 ***********************************************/

CREATE TABLE SW_PACKAGE_RELATION
(
	SW_PACKAGE_RELATION_ID SERIAL NOT NULL 
,
	SW_PACKAGE_RELEASE_ID INTEGER NOT NULL 
,
	RELATED_SW_PACKAGE_ID INTEGER NOT NULL 
,
	RELATED_SW_PACKAGE_VERSION VARCHAR(255) NULL,
	PACKAGE_RELATION_TYPE VARCHAR(50) NOT NULL 
,
	RELATION_RESTRICTION CHAR(2) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE SW_PACKAGE_RELATION
	ADD CONSTRAINT  PK_SW_PACKAGE_RELATION PRIMARY KEY (SW_PACKAGE_RELATION_ID)       ;

ALTER TABLE SW_PACKAGE_RELATION
	ADD CONSTRAINT  CKC_RELATION_RESTRICT_SW_PACKA CHECK (RELATION_RESTRICTION is null or (RELATION_RESTRICTION in ('<','>','<=','>=','=')));

CREATE  INDEX IDX_SW_PKG_RLTN_REL_SW_PKG_ID ON SW_PACKAGE_RELATION
(RELATED_SW_PACKAGE_ID   ASC);

CREATE  INDEX IDX_SW_PKG_RLTN_SW_PKG_REL_ID ON SW_PACKAGE_RELATION
(SW_PACKAGE_RELEASE_ID   ASC);

/***********************************************
 * Table: SW_PACKAGE_RELEASE
 ***********************************************/

CREATE TABLE SW_PACKAGE_RELEASE
(
	SW_PACKAGE_RELEASE_ID SERIAL NOT NULL 
,
	SW_PACKAGE_ID        INTEGER NOT NULL 
,
	SW_PACKAGE_VERSION   VARCHAR(50) NOT NULL 
,
	SW_PACKAGE_FORMAT    VARCHAR(50) NOT NULL 
,
	SW_PACKAGE_TYPE      VARCHAR(50) NULL,
	CREATION_ACCOUNT_ID  INTEGER NOT NULL 
,
	PROCESSOR_ARCHITECTURE VARCHAR(50) NOT NULL 
,
	SERVICE_ENVIRONMENT_ID INTEGER NOT NULL,
	SW_PACKAGE_REPOSITORY_ID INTEGER NOT NULL 
,
	UPLOADING_PRINCIPAL  VARCHAR(255) NULL,
	PACKAGE_SIZE         INTEGER NULL,
	INSTALLED_PACKAGE_SIZE_KB INTEGER NULL,
	PATHNAME             VARCHAR(1024) NULL,
	MD5SUM               VARCHAR(255) NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	INSTANTIATION_DATE   TIMESTAMP WITH TIME ZONE NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE SW_PACKAGE_RELEASE
	ADD CONSTRAINT  PK_SW_PACKAGE_RELEASE PRIMARY KEY (SW_PACKAGE_RELEASE_ID)       ;

ALTER TABLE SW_PACKAGE_RELEASE
ADD CONSTRAINT  AK_UQ_SW_PKG_REL_COMB_SW_PACKA UNIQUE (SW_PACKAGE_ID,SW_PACKAGE_VERSION,PROCESSOR_ARCHITECTURE,SW_PACKAGE_REPOSITORY_ID)       ;

CREATE  INDEX IDX_SW_PKG_REL_SW_PKG_ID ON SW_PACKAGE_RELEASE
(SW_PACKAGE_ID   ASC);

/***********************************************
 * Table: SW_PACKAGE_REPOSITORY
 ***********************************************/

CREATE TABLE SW_PACKAGE_REPOSITORY
(
	SW_PACKAGE_REPOSITORY_ID SERIAL NOT NULL 
,
	SW_REPOSITORY_NAME   VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	APT_REPOSITORY       VARCHAR(255) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE SW_PACKAGE_REPOSITORY
	ADD CONSTRAINT  PK_SW_PACKAGE_REPOSITORY PRIMARY KEY (SW_PACKAGE_REPOSITORY_ID)       ;

ALTER TABLE SW_PACKAGE_REPOSITORY
ADD CONSTRAINT  AK_UQ_SW_PKG_REP_APT_SW_PACKA UNIQUE (APT_REPOSITORY)       ;

ALTER TABLE SW_PACKAGE_REPOSITORY
ADD CONSTRAINT  AK_UQ_SW_PKG_REP_SW_R_SW_PACKA UNIQUE (SW_REPOSITORY_NAME)       ;

/***********************************************
 * Table: TICKETING_SYSTEM
 ***********************************************/

CREATE TABLE TICKETING_SYSTEM
(
	TICKETING_SYSTEM_ID SERIAL NOT NULL 
,
	TICKETING_SYSTEM_NAME VARCHAR(50) NOT NULL,
	TICKETING_SYSTEM_URL VARCHAR(255) NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE TICKETING_SYSTEM
	ADD CONSTRAINT  PK_TICKETING_SYSTEM_ID PRIMARY KEY (TICKETING_SYSTEM_ID)       ;

/***********************************************
 * Table: TOKEN
 ***********************************************/

CREATE TABLE TOKEN
(
	TOKEN_ID SERIAL NOT NULL 
,
	TOKEN_TYPE           VARCHAR(50) NOT NULL 
,
	TOKEN_STATUS         VARCHAR(50) NULL,
	TOKEN_SERIAL         VARCHAR(20) NULL,
	ZERO_TIME            TIMESTAMP WITH TIME ZONE NULL,
	TIME_MODULO          INTEGER NULL,
	TIME_SKEW            INTEGER NULL,
	TOKEN_KEY            VARCHAR(512) NULL,
	ENCRYPTION_KEY_ID    INTEGER NULL,
	TOKEN_PIN            VARCHAR(128) NULL,
	LAST_UPDATED         TIMESTAMP WITH TIME ZONE NOT NULL 
,
	EXPIRE_TIME          TIMESTAMP WITH TIME ZONE NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN TOKEN.ENCRYPTION_KEY_ID IS 'encryption information for token_key, if used';

ALTER TABLE TOKEN
	ADD CONSTRAINT  PK_TOKEN PRIMARY KEY (TOKEN_ID)       ;

ALTER TABLE TOKEN
ADD CONSTRAINT  AK_TOKEN_TOKEN_KEY UNIQUE (TOKEN_KEY);

ALTER TABLE TOKEN
	ADD CONSTRAINT  SYS_C0020104 CHECK (TOKEN_TYPE IS NOT
NULL);

ALTER TABLE TOKEN
	ADD CONSTRAINT  SYS_C0020105 CHECK (LAST_UPDATED IS NOT
NULL);

CREATE INDEX IDX_TOKEN_TOKENSTATUS ON TOKEN
(TOKEN_STATUS   ASC);

CREATE INDEX IDX_TOKEN_TOKENTYPE ON TOKEN
(TOKEN_TYPE   ASC);

/***********************************************
 * Table: TOKEN_COLLECTION
 ***********************************************/

CREATE TABLE TOKEN_COLLECTION
(
	TOKEN_COLLECTION_ID SERIAL NOT NULL 
,
	TOKEN_COLLECTION_NAME VARCHAR(50) NOT NULL 
,
	TOKEN_COLLECTION_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE TOKEN_COLLECTION IS 'Group tokens together in arbitrary ways.';

ALTER TABLE TOKEN_COLLECTION
	ADD CONSTRAINT  PK_TOKEN_COLLECTION PRIMARY KEY (TOKEN_COLLECTION_ID)       ;

ALTER TABLE TOKEN_COLLECTION
ADD CONSTRAINT  UQ_TOKEN_COLL_NAME_TYPE UNIQUE (TOKEN_COLLECTION_NAME,TOKEN_COLLECTION_TYPE)       ;

/***********************************************
 * Table: TOKEN_COLLECTION_HIER
 ***********************************************/

CREATE TABLE TOKEN_COLLECTION_HIER
(
	TOKEN_COLLECTION_ID  INTEGER NOT NULL,
	CHILD_TOKEN_COLLECTION_ID INTEGER NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE TOKEN_COLLECTION_HIER IS 'Assign individual tokens to groups.';

ALTER TABLE TOKEN_COLLECTION_HIER
	ADD CONSTRAINT  PK_TOKEN_COLLECTION_HIER PRIMARY KEY (TOKEN_COLLECTION_ID,CHILD_TOKEN_COLLECTION_ID)       ;

CREATE  INDEX XIF_TOK_COL_HIER_CH_TOK_COLID ON TOKEN_COLLECTION_HIER
(TOKEN_COLLECTION_ID   ASC);

CREATE  INDEX XIF_TOK_COL_HIER_TOK_COLID ON TOKEN_COLLECTION_HIER
(CHILD_TOKEN_COLLECTION_ID   ASC);

/***********************************************
 * Table: TOKEN_COLLECTION_TOKEN
 ***********************************************/

CREATE TABLE TOKEN_COLLECTION_TOKEN
(
	TOKEN_COLLECTION_ID  INTEGER NOT NULL 
,
	TOKEN_ID             INTEGER NOT NULL 
,
	TOKEN_ID_RANK        INTEGER NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE TOKEN_COLLECTION_TOKEN IS 'Assign individual tokens to groups.';

ALTER TABLE TOKEN_COLLECTION_TOKEN
	ADD CONSTRAINT  PK_TOKEN_COLLECTION_TOKEN PRIMARY KEY (TOKEN_COLLECTION_ID,TOKEN_ID)       ;

ALTER TABLE TOKEN_COLLECTION_TOKEN
ADD CONSTRAINT  AK_TOKCOLL_TOK_TOK_ID UNIQUE (TOKEN_COLLECTION_ID,TOKEN_ID_RANK);

CREATE  INDEX IDX_TOK_COL_TOKEN_TOK_COL_ID ON TOKEN_COLLECTION_TOKEN
(TOKEN_COLLECTION_ID   ASC);

CREATE  INDEX IDX_TOK_COL_TOKEN_TOK_ID ON TOKEN_COLLECTION_TOKEN
(TOKEN_ID   ASC);

/***********************************************
 * Table: TOKEN_SEQUENCE
 ***********************************************/

CREATE TABLE TOKEN_SEQUENCE
(
	TOKEN_ID             INTEGER NOT NULL 
,
	TOKEN_SEQUENCE       INTEGER NOT NULL 
,
	LAST_UPDATED         TIMESTAMP WITH TIME ZONE NOT NULL 
			  
);

ALTER TABLE TOKEN_SEQUENCE
	ADD CONSTRAINT  PK_TOKEN_SEQUENCE PRIMARY KEY (TOKEN_ID)       ;

/***********************************************
 * Table: UNIX_GROUP
 ***********************************************/

CREATE TABLE UNIX_GROUP
(
	ACCOUNT_COLLECTION_ID INTEGER NOT NULL,
	UNIX_GID             INTEGER NOT NULL 
,
	GROUP_PASSWORD       VARCHAR(20) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE UNIX_GROUP
	ADD CONSTRAINT  PK_UNIX_GROUP PRIMARY KEY (ACCOUNT_COLLECTION_ID)       ;

ALTER TABLE UNIX_GROUP
ADD CONSTRAINT  AK_UNIX_GROUP_UNIX_GID UNIQUE (UNIX_GID)       ;

/***********************************************
 * Table: VAL_ACCOUNT_COLLECTION_TYPE
 ***********************************************/

CREATE TABLE VAL_ACCOUNT_COLLECTION_TYPE
(
	ACCOUNT_COLLECTION_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	IS_INFRASTRUCTURE_TYPE CHAR(1) NOT NULL,
	MAX_NUM_MEMBERS      INTEGER NULL,
	MAX_NUM_COLLECTIONS  INTEGER NULL,
	CAN_HAVE_HIERARCHY   CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN VAL_ACCOUNT_COLLECTION_TYPE.MAX_NUM_MEMBERS IS 'Maximum INTEGER of members in a given collection of this type
';

COMMENT ON COLUMN VAL_ACCOUNT_COLLECTION_TYPE.CAN_HAVE_HIERARCHY IS 'Indicates if the collections can have other collections to make it hierarchical.';

COMMENT ON COLUMN VAL_ACCOUNT_COLLECTION_TYPE.MAX_NUM_COLLECTIONS IS 'Maximum INTEGER of collections a given member can be a part of of this type.
';

ALTER TABLE VAL_ACCOUNT_COLLECTION_TYPE
	ADD CONSTRAINT  PK_VAL_ACCOUNT_COLLECTION_TYPE PRIMARY KEY (ACCOUNT_COLLECTION_TYPE)       ;

ALTER TABLE VAL_ACCOUNT_COLLECTION_TYPE
	ADD CONSTRAINT  CHECK_YES_NO_1816418084 CHECK (IS_INFRASTRUCTURE_TYPE IN ('Y', 'N'));

ALTER TABLE VAL_ACCOUNT_COLLECTION_TYPE
	ADD CONSTRAINT  CHECK_YES_NO_ACT_CHH CHECK (CAN_HAVE_HIERARCHY IN ('Y', 'N'));

ALTER TABLE VAL_ACCOUNT_COLLECTION_TYPE
	ALTER IS_INFRASTRUCTURE_TYPE SET DEFAULT 'N';

ALTER TABLE VAL_ACCOUNT_COLLECTION_TYPE
	ALTER CAN_HAVE_HIERARCHY SET DEFAULT 'Y';

/***********************************************
 * Table: VAL_ACCOUNT_ROLE
 ***********************************************/

CREATE TABLE VAL_ACCOUNT_ROLE
(
	ACCOUNT_ROLE         VARCHAR(50) NOT NULL 
,
	UID_GID_FORCED       CHAR(1) NOT NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_ACCOUNT_ROLE IS 'Defines the role for the account, such as primary, administrator, privileged/superuser, test, etc';

ALTER TABLE VAL_ACCOUNT_ROLE
	ADD CONSTRAINT  PK_VAL_ACCOUNT_ROLE PRIMARY KEY (ACCOUNT_ROLE)       ;

ALTER TABLE VAL_ACCOUNT_ROLE
	ADD CONSTRAINT  CHECK_YES_NO_312716257 CHECK (UID_GID_FORCED IN ('Y', 'N'));

/***********************************************
 * Table: VAL_ACCOUNT_TYPE
 ***********************************************/

CREATE TABLE VAL_ACCOUNT_TYPE
(
	ACCOUNT_TYPE         VARCHAR(50) NOT NULL 
,
	IS_PERSON            CHAR(1) NOT NULL 
,
	UID_GID_FORCED       CHAR(1) NOT NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_ACCOUNT_TYPE IS 'Defines the type of the account (pseudouser or person).  is_person is probably unnecessary and will be dropped in the future.';

ALTER TABLE VAL_ACCOUNT_TYPE
	ADD CONSTRAINT  PK_VAL_ACCOUNT_TYPE PRIMARY KEY (ACCOUNT_TYPE)       ;

ALTER TABLE VAL_ACCOUNT_TYPE
	ADD CONSTRAINT  CKC_IS_PERSON_VAL_SYST CHECK (IS_PERSON in ('Y','N') and IS_PERSON = upper(IS_PERSON));

ALTER TABLE VAL_ACCOUNT_TYPE
	ADD CONSTRAINT  CHECK_YES_NO_245606871 CHECK (UID_GID_FORCED IN ('Y', 'N'));

CREATE INDEX IDX_VACCOUNT_TYPE_ISPERSON ON VAL_ACCOUNT_TYPE
(IS_PERSON   ASC);

/***********************************************
 * Table: VAL_APP_KEY
 ***********************************************/

CREATE TABLE VAL_APP_KEY
(
	APP_KEY              VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_APP_KEY
	ADD CONSTRAINT  PK_VAL_APP_KEY PRIMARY KEY (APP_KEY)       ;

/***********************************************
 * Table: VAL_APP_KEY_VALUES
 ***********************************************/

CREATE TABLE VAL_APP_KEY_VALUES
(
	APP_KEY              VARCHAR(50) NOT NULL 
,
	APP_VALUE            VARCHAR(4000) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_APP_KEY_VALUES
	ADD CONSTRAINT  PK_VAL_APP_KEY_VALUES PRIMARY KEY (APP_KEY,APP_VALUE)       ;

/***********************************************
 * Table: VAL_AUTH_QUESTION
 ***********************************************/

CREATE TABLE VAL_AUTH_QUESTION
(
	AUTH_QUESTION_ID     INTEGER NOT NULL 
,
	QUESTION_TEXT        VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_AUTH_QUESTION
	ADD CONSTRAINT  PK_VAL_AUTH_QUESTION PRIMARY KEY (AUTH_QUESTION_ID)       ;

/***********************************************
 * Table: VAL_AUTH_RESOURCE
 ***********************************************/

CREATE TABLE VAL_AUTH_RESOURCE
(
	AUTH_RESOURCE        VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL 
);

ALTER TABLE VAL_AUTH_RESOURCE
	ADD CONSTRAINT  PK_VAL_AUTH_RESOURCE PRIMARY KEY (AUTH_RESOURCE)       ;

/***********************************************
 * Table: VAL_BADGE_STATUS
 ***********************************************/

CREATE TABLE VAL_BADGE_STATUS
(
	BADGE_STATUS         VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_BADGE_STATUS
	ADD CONSTRAINT  PK_VAL_BADGE_STATUS PRIMARY KEY (BADGE_STATUS)       ;

/***********************************************
 * Table: VAL_BAUD
 ***********************************************/

CREATE TABLE VAL_BAUD
(
	BAUD                 INTEGER NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_BAUD
	ADD CONSTRAINT  PK_VAL_BAUD PRIMARY KEY (BAUD)       ;

/***********************************************
 * Table: VAL_CABLE_TYPE
 ***********************************************/

CREATE TABLE VAL_CABLE_TYPE
(
	CABLE_TYPE           VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_CABLE_TYPE
	ADD CONSTRAINT  PK_CABLE_TYPE PRIMARY KEY (CABLE_TYPE)       ;

/***********************************************
 * Table: VAL_COMPANY_TYPE
 ***********************************************/

CREATE TABLE VAL_COMPANY_TYPE
(
	COMPANY_TYPE         VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_COMPANY_TYPE
	ADD CONSTRAINT  PK_VAL_COMPANY_TYPE PRIMARY KEY (COMPANY_TYPE)       ;

/***********************************************
 * Table: VAL_CONTRACT_TYPE
 ***********************************************/

CREATE TABLE VAL_CONTRACT_TYPE
(
	CONTRACT_TYPE        VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_CONTRACT_TYPE
	ADD CONSTRAINT  PK_VAL_CONTRACT_TYPE PRIMARY KEY (CONTRACT_TYPE)       ;

/***********************************************
 * Table: VAL_COUNTRY_CODE
 ***********************************************/

CREATE TABLE VAL_COUNTRY_CODE
(
	ISO_COUNTRY_CODE     CHAR(2) NOT NULL 
,
	DIAL_COUNTRY_CODE    VARCHAR(4) NOT NULL 
,
	COUNTRY_NAME         VARCHAR(255) NULL,
	DISPLAY_PRIORITY     INTEGER NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_COUNTRY_CODE
	ADD CONSTRAINT  PK_VAL_COUNTRY_CODE PRIMARY KEY (ISO_COUNTRY_CODE)       ;

/***********************************************
 * Table: VAL_DATA_BITS
 ***********************************************/

CREATE TABLE VAL_DATA_BITS
(
	DATA_BITS            INTEGER NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_DATA_BITS
	ADD CONSTRAINT  PK_VAL_DATA_BITS PRIMARY KEY (DATA_BITS)       ;

/***********************************************
 * Table: VAL_DEVICE_AUTO_MGMT_PROTOCOL
 ***********************************************/

CREATE TABLE VAL_DEVICE_AUTO_MGMT_PROTOCOL
(
	AUTO_MGMT_PROTOCOL   VARCHAR(50) NOT NULL 
,
	CONNECTION_PORT      INTEGER NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_DEVICE_AUTO_MGMT_PROTOCOL
	ADD CONSTRAINT  PK_VAL_DEVICE_AUTO_MGMT_PROTOC PRIMARY KEY (AUTO_MGMT_PROTOCOL)       ;

/***********************************************
 * Table: VAL_DEVICE_COLLECTION_TYPE
 ***********************************************/

CREATE TABLE VAL_DEVICE_COLLECTION_TYPE
(
	DEVICE_COLLECTION_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	MAX_NUM_MEMBERS      INTEGER NULL,
	MAX_NUM_COLLECTIONS  INTEGER NULL,
	CAN_HAVE_HIERARCHY   CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN VAL_DEVICE_COLLECTION_TYPE.MAX_NUM_MEMBERS IS 'Maximum INTEGER of members in a given collection of this type
';

COMMENT ON COLUMN VAL_DEVICE_COLLECTION_TYPE.CAN_HAVE_HIERARCHY IS 'Indicates if the collections can have other collections to make it hierarchical.';

COMMENT ON COLUMN VAL_DEVICE_COLLECTION_TYPE.MAX_NUM_COLLECTIONS IS 'Maximum INTEGER of collections a given member can be a part of of this type.
';

ALTER TABLE VAL_DEVICE_COLLECTION_TYPE
	ADD CONSTRAINT  PK_VAL_DEVICE_COLLECTION_TYPE PRIMARY KEY (DEVICE_COLLECTION_TYPE)       ;

ALTER TABLE VAL_DEVICE_COLLECTION_TYPE
	ADD CONSTRAINT  CHECK_YES_NO_DCT_CHH CHECK (CAN_HAVE_HIERARCHY IN ('Y', 'N'));

ALTER TABLE VAL_DEVICE_COLLECTION_TYPE
	ALTER CAN_HAVE_HIERARCHY SET DEFAULT 'Y';

/***********************************************
 * Table: VAL_DEVICE_MGMT_CTRL_TYPE
 ***********************************************/

CREATE TABLE VAL_DEVICE_MGMT_CTRL_TYPE
(
	DEVICE_MGMT_CONTROL_TYPE VARCHAR(255) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_DEVICE_MGMT_CTRL_TYPE
	ADD CONSTRAINT  PK_VAL_DEVICE_MGMT_CTRL_TYPE PRIMARY KEY (DEVICE_MGMT_CONTROL_TYPE)       ;

/***********************************************
 * Table: VAL_DEVICE_STATUS
 ***********************************************/

CREATE TABLE VAL_DEVICE_STATUS
(
	DEVICE_STATUS        VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_DEVICE_STATUS
	ADD CONSTRAINT  PK_VAL_STATUS PRIMARY KEY (DEVICE_STATUS)       ;

/***********************************************
 * Table: VAL_DIET
 ***********************************************/

CREATE TABLE VAL_DIET
(
	DIET                 VARCHAR(255) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_DIET
	ADD CONSTRAINT  PK_VAL_DIET PRIMARY KEY (DIET)       ;

/***********************************************
 * Table: VAL_DNS_CLASS
 ***********************************************/

CREATE TABLE VAL_DNS_CLASS
(
	DNS_CLASS            VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_DNS_CLASS
	ADD CONSTRAINT  PK_VAL_DNS_CLASS PRIMARY KEY (DNS_CLASS)       ;

CREATE TABLE VAL_DNS_DOMAIN_TYPE
(
	DNS_DOMAIN_TYPE      VARCHAR(50) NOT NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_DNS_DOMAIN_TYPE
	ADD CONSTRAINT  PKVAL_DNS_DOMAIN_TYPE PRIMARY KEY (DNS_DOMAIN_TYPE);

/***********************************************
 * Table: VAL_DNS_RECORD_RELATION_TYPE
 ***********************************************/

CREATE TABLE VAL_DNS_RECORD_RELATION_TYPE
(
	DNS_RECORD_RELATION_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_DNS_RECORD_RELATION_TYPE
	ADD CONSTRAINT  PK_VAL_DNS_RECORD_RELATION_TYP PRIMARY KEY (DNS_RECORD_RELATION_TYPE)       ;

/***********************************************
 * Table: VAL_DNS_SRV_SERVICE
 ***********************************************/

CREATE TABLE VAL_DNS_SRV_SERVICE
(
	DNS_SRV_SERVICE      VARCHAR(50) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_DNS_SRV_SERVICE
	ADD CONSTRAINT  PK_VAL_DNS_SRV_SRVICE PRIMARY KEY (DNS_SRV_SERVICE)       ;

/***********************************************
 * Table: VAL_DNS_TYPE
 ***********************************************/

CREATE TABLE VAL_DNS_TYPE
(
	DNS_TYPE             VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	ID_TYPE              VARCHAR(10) CONSTRAINT SYS_C0074678 NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_DNS_TYPE
	ADD CONSTRAINT  PK_VAL_DNS_TYPE PRIMARY KEY (DNS_TYPE)       ;

ALTER TABLE VAL_DNS_TYPE
	ADD CONSTRAINT  CKC_ID_TYPE_VAL_DNS_ CHECK (ID_TYPE IN ('ID', 'LINK', 'NON-ID', 'HIDDEN'));

/***********************************************
 * Table: VAL_ENCAPSULATION_MODE
 ***********************************************/

CREATE TABLE VAL_ENCAPSULATION_MODE
(
	ENCAPSULATION_MODE   VARCHAR(50) NOT NULL 
,
	ENCAPSULATION_TYPE   VARCHAR(50) NOT NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_ENCAPSULATION_MODE
	ADD CONSTRAINT  PK_VAL_ENCAPSULATION_MODE PRIMARY KEY (ENCAPSULATION_MODE,ENCAPSULATION_TYPE)       ;

CREATE  INDEX XIF_VAL_ENCAP_MODE_TYPE ON VAL_ENCAPSULATION_MODE
(ENCAPSULATION_TYPE   ASC);

/***********************************************
 * Table: VAL_ENCAPSULATION_TYPE
 ***********************************************/

CREATE TABLE VAL_ENCAPSULATION_TYPE
(
	ENCAPSULATION_TYPE   VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_ENCAPSULATION_TYPE
	ADD CONSTRAINT  PK_VAL_ENCAPSULATION_TYPE PRIMARY KEY (ENCAPSULATION_TYPE)       ;

/***********************************************
 * Table: VAL_ENCRYPTION_KEY_PURPOSE
 ***********************************************/

CREATE TABLE VAL_ENCRYPTION_KEY_PURPOSE
(
	ENCRYPTION_KEY_PURPOSE VARCHAR(50) NOT NULL 
,
	ENCRYPTION_KEY_PURPOSE_VERSION INTEGER NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_ENCRYPTION_KEY_PURPOSE IS 'Valid purpose of encryption used by the key_crypto package; Used to identify which functional application knows the app provided portion of the encryption key';

ALTER TABLE VAL_ENCRYPTION_KEY_PURPOSE
	ADD CONSTRAINT  PK_VAL_ENCRYPTION_KEY_PURPOSE PRIMARY KEY (ENCRYPTION_KEY_PURPOSE,ENCRYPTION_KEY_PURPOSE_VERSION)       ;

/***********************************************
 * Table: VAL_ENCRYPTION_METHOD
 ***********************************************/

CREATE TABLE VAL_ENCRYPTION_METHOD
(
	ENCRYPTION_METHOD    VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_ENCRYPTION_METHOD IS 'List of text representations of methods of encryption.  Format is the same as Kerberos uses such as in rfc3962';

ALTER TABLE VAL_ENCRYPTION_METHOD
	ADD CONSTRAINT  PK_VAL_ENCRYPTION_METHOD PRIMARY KEY (ENCRYPTION_METHOD)       ;

/***********************************************
 * Table: VAL_FLOW_CONTROL
 ***********************************************/

CREATE TABLE VAL_FLOW_CONTROL
(
	FLOW_CONTROL         VARCHAR(10) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_FLOW_CONTROL
	ADD CONSTRAINT  PK_VAL_FLOW_CONTROL PRIMARY KEY (FLOW_CONTROL)       ;

/***********************************************
 * Table: VAL_IMAGE_TYPE
 ***********************************************/

CREATE TABLE VAL_IMAGE_TYPE
(
	IMAGE_TYPE           VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_IMAGE_TYPE
	ADD CONSTRAINT  PK_VAL_IMAGE_TYPE PRIMARY KEY (IMAGE_TYPE)       ;

/***********************************************
 * Table: VAL_IP_GROUP_PROTOCOL
 ***********************************************/

CREATE TABLE VAL_IP_GROUP_PROTOCOL
(
	IP_GROUP_PROTOCOL    CHAR(18) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_IP_GROUP_PROTOCOL
	ADD CONSTRAINT  PK_VAL_IP_GROUP_PROTOCOL PRIMARY KEY (IP_GROUP_PROTOCOL)       ;

/***********************************************
 * Table: VAL_KEY_USG_REASON_FOR_ASSGN
 ***********************************************/

CREATE TABLE VAL_KEY_USG_REASON_FOR_ASSGN
(
	KEY_USAGE_REASON_FOR_ASSIGN VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_KEY_USG_REASON_FOR_ASSGN IS 'Identifies a reason why certificate has been assigned a given key usage attribute.';

COMMENT ON COLUMN VAL_KEY_USG_REASON_FOR_ASSGN.KEY_USAGE_REASON_FOR_ASSIGN IS 'Uniquely identifies and indicates reason for assignment.';

ALTER TABLE VAL_KEY_USG_REASON_FOR_ASSGN
	ADD CONSTRAINT  PK_REASON_FOR_ASSIGNMENT PRIMARY KEY (KEY_USAGE_REASON_FOR_ASSIGN)       ;

/***********************************************
 * Table: VAL_LOGICAL_PORT_TYPE
 ***********************************************/

CREATE TABLE VAL_LOGICAL_PORT_TYPE
(
	LOGICAL_PORT_TYPE    VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_LOGICAL_PORT_TYPE
	ADD CONSTRAINT  PK_VAL_LOGICAL_PORT_TYPE PRIMARY KEY (LOGICAL_PORT_TYPE)       ;

/***********************************************
 * Table: VAL_NETBLOCK_COLLECTION_TYPE
 ***********************************************/

CREATE TABLE VAL_NETBLOCK_COLLECTION_TYPE
(
	NETBLOCK_COLLECTION_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	MAX_NUM_MEMBERS      INTEGER NULL,
	MAX_NUM_COLLECTIONS  INTEGER NULL,
	CAN_HAVE_HIERARCHY   CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN VAL_NETBLOCK_COLLECTION_TYPE.MAX_NUM_MEMBERS IS 'Maximum INTEGER of members in a given collection of this type
';

COMMENT ON COLUMN VAL_NETBLOCK_COLLECTION_TYPE.CAN_HAVE_HIERARCHY IS 'Indicates if the collections can have other collections to make it hierarchical.';

COMMENT ON COLUMN VAL_NETBLOCK_COLLECTION_TYPE.MAX_NUM_COLLECTIONS IS 'Maximum INTEGER of collections a given member can be a part of of this type.
';

ALTER TABLE VAL_NETBLOCK_COLLECTION_TYPE
	ADD CONSTRAINT  PK_VAL_NETBLOCK_COLLECTION_TYP PRIMARY KEY (NETBLOCK_COLLECTION_TYPE)       ;

ALTER TABLE VAL_NETBLOCK_COLLECTION_TYPE
	ADD CONSTRAINT  CHECK_YES_NO_NCT_CHH CHECK (CAN_HAVE_HIERARCHY IN ('Y', 'N'));

ALTER TABLE VAL_NETBLOCK_COLLECTION_TYPE
	ALTER CAN_HAVE_HIERARCHY SET DEFAULT 'Y';

/***********************************************
 * Table: VAL_NETBLOCK_STATUS
 ***********************************************/

CREATE TABLE VAL_NETBLOCK_STATUS
(
	NETBLOCK_STATUS      VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_NETBLOCK_STATUS
	ADD CONSTRAINT  PK_VAL_NETBLOCK_STATUS PRIMARY KEY (NETBLOCK_STATUS)       ;

/***********************************************
 * Table: VAL_NETBLOCK_TYPE
 ***********************************************/

CREATE TABLE VAL_NETBLOCK_TYPE
(
	NETBLOCK_TYPE        VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DB_FORCED_HIERARCHY  CHAR(1) NOT NULL,
	IS_VALIDATED_HIERARCHY CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_NETBLOCK_TYPE
	ADD CONSTRAINT  PK_VAL_NETBLOCK_TYPE PRIMARY KEY (NETBLOCK_TYPE)       ;

ALTER TABLE VAL_NETBLOCK_TYPE
	ADD CONSTRAINT  CHECK_YES_NO_1634617190 CHECK (DB_FORCED_HIERARCHY IN ('Y', 'N'));

ALTER TABLE VAL_NETBLOCK_TYPE
	ADD CONSTRAINT  CHECK_YES_NO_1459364629 CHECK (IS_VALIDATED_HIERARCHY IN ('Y', 'N'));

/***********************************************
 * Table: VAL_NETWORK_INTERFACE_PURPOSE
 ***********************************************/

CREATE TABLE VAL_NETWORK_INTERFACE_PURPOSE
(
	NETWORK_INTERFACE_PURPOSE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_NETWORK_INTERFACE_PURPOSE
	ADD CONSTRAINT  PK_VAL_NETWORK_INT_PURPOSE PRIMARY KEY (NETWORK_INTERFACE_PURPOSE)       ;

/***********************************************
 * Table: VAL_NETWORK_INTERFACE_TYPE
 ***********************************************/

CREATE TABLE VAL_NETWORK_INTERFACE_TYPE
(
	NETWORK_INTERFACE_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_NETWORK_INTERFACE_TYPE
	ADD CONSTRAINT  PK_NETWORK_INT_TYPE PRIMARY KEY (NETWORK_INTERFACE_TYPE)       ;

/***********************************************
 * Table: VAL_NETWORK_SERVICE_TYPE
 ***********************************************/

CREATE TABLE VAL_NETWORK_SERVICE_TYPE
(
	NETWORK_SERVICE_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_NETWORK_SERVICE_TYPE
	ADD CONSTRAINT  PK_NETWORK_SERVICE_TYPE PRIMARY KEY (NETWORK_SERVICE_TYPE)       ;

/***********************************************
 * Table: VAL_OWNERSHIP_STATUS
 ***********************************************/

CREATE TABLE VAL_OWNERSHIP_STATUS
(
	OWNERSHIP_STATUS     VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_OWNERSHIP_STATUS
	ADD CONSTRAINT  PK_VAL_OWNERSHIP_STATUS PRIMARY KEY (OWNERSHIP_STATUS)       ;

/***********************************************
 * Table: VAL_PACKAGE_RELATION_TYPE
 ***********************************************/

CREATE TABLE VAL_PACKAGE_RELATION_TYPE
(
	PACKAGE_RELATION_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_PACKAGE_RELATION_TYPE
	ADD CONSTRAINT  PK_VAL_PACKAGE_RELATION_TYPE PRIMARY KEY (PACKAGE_RELATION_TYPE)       ;

/***********************************************
 * Table: VAL_PARITY
 ***********************************************/

CREATE TABLE VAL_PARITY
(
	PARITY               VARCHAR(10) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_PARITY
	ADD CONSTRAINT  PK_VAL_PARITY PRIMARY KEY (PARITY)       ;

/***********************************************
 * Table: VAL_PASSWORD_TYPE
 ***********************************************/

CREATE TABLE VAL_PASSWORD_TYPE
(
	PASSWORD_TYPE        VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_PASSWORD_TYPE
	ADD CONSTRAINT  PK_VAL_PASSWORD_TYPE PRIMARY KEY (PASSWORD_TYPE)       ;

/***********************************************
 * Table: VAL_PERSON_COMPANY_RELATION
 ***********************************************/

CREATE TABLE VAL_PERSON_COMPANY_RELATION
(
	PERSON_COMPANY_RELATION VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_PERSON_COMPANY_RELATION IS 'person''s relationship to the company (employee, consultant, vendor, etc)
';

ALTER TABLE VAL_PERSON_COMPANY_RELATION
	ADD CONSTRAINT  PK_VAL_PERSON_COMPANY_RELATION PRIMARY KEY (PERSON_COMPANY_RELATION)       ;

/***********************************************
 * Table: VAL_PERSON_CONTACT_LOC_TYPE
 ***********************************************/

CREATE TABLE VAL_PERSON_CONTACT_LOC_TYPE
(
	PERSON_CONTACT_LOCATION_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_PERSON_CONTACT_LOC_TYPE IS 'The location type of the contact (personal, home, office)';

ALTER TABLE VAL_PERSON_CONTACT_LOC_TYPE
	ADD CONSTRAINT  PK_VAL_PERSON_CONTACT_LOC_TYPE PRIMARY KEY (PERSON_CONTACT_LOCATION_TYPE)       ;

/***********************************************
 * Table: VAL_PERSON_CONTACT_TECHNOLOGY
 ***********************************************/

CREATE TABLE VAL_PERSON_CONTACT_TECHNOLOGY
(
	PERSON_CONTACT_TECHNOLOGY VARCHAR(50) NOT NULL 
,
	PERSON_CONTACT_TYPE  VARCHAR(50) NOT NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_PERSON_CONTACT_TECHNOLOGY IS 'The location type of the contact (personal, home, office)';

COMMENT ON COLUMN VAL_PERSON_CONTACT_TECHNOLOGY.PERSON_CONTACT_TECHNOLOGY IS 'technology sub-type or protocol(phone,mobile,fax,voicemail,conference)';

ALTER TABLE VAL_PERSON_CONTACT_TECHNOLOGY
	ADD CONSTRAINT  PK_VAL_PERSON_CONTACT_TECHNOLO PRIMARY KEY (PERSON_CONTACT_TECHNOLOGY,PERSON_CONTACT_TYPE)       ;

CREATE  INDEX XIF1VAL_PERSON_CONTACT_TECHNOL ON VAL_PERSON_CONTACT_TECHNOLOGY
(PERSON_CONTACT_TYPE   ASC);

/***********************************************
 * Table: VAL_PERSON_CONTACT_TYPE
 ***********************************************/

CREATE TABLE VAL_PERSON_CONTACT_TYPE
(
	PERSON_CONTACT_TYPE  VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_PERSON_CONTACT_TYPE IS 'Contact Type -- chat, phone, etc.  This essentially details if phone or account is used as the identifier and should be triggered.';

ALTER TABLE VAL_PERSON_CONTACT_TYPE
	ADD CONSTRAINT  PK_VAL_PHONE_NUMBER_TYPE PRIMARY KEY (PERSON_CONTACT_TYPE)       ;

/***********************************************
 * Table: VAL_PERSON_IMAGE_USAGE
 ***********************************************/

CREATE TABLE VAL_PERSON_IMAGE_USAGE
(
	PERSON_IMAGE_USAGE   VARCHAR(50) NOT NULL,
	IS_MULTIVALUE        CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_PERSON_IMAGE_USAGE
	ADD CONSTRAINT  PK_VAL_PERSON_IMAGE_USAGE PRIMARY KEY (PERSON_IMAGE_USAGE)       ;

ALTER TABLE VAL_PERSON_IMAGE_USAGE
	ADD CONSTRAINT  CHECK_YES_NO_1173391786 CHECK (IS_MULTIVALUE IN ('Y', 'N'));

/***********************************************
 * Table: VAL_PERSON_LOCATION_TYPE
 ***********************************************/

CREATE TABLE VAL_PERSON_LOCATION_TYPE
(
	PERSON_LOCATION_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_PERSON_LOCATION_TYPE
	ADD CONSTRAINT  PK_VAL_USER_LOCATION_TYPE PRIMARY KEY (PERSON_LOCATION_TYPE)       ;

/***********************************************
 * Table: VAL_PERSON_STATUS
 ***********************************************/

CREATE TABLE VAL_PERSON_STATUS
(
	PERSON_STATUS        VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	IS_DISABLED          CHAR(1) NOT NULL,
	PROPAGATE_FROM_PERSON CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_PERSON_STATUS
	ADD CONSTRAINT  PK_VAL_PERSON_STATUS PRIMARY KEY (PERSON_STATUS)       ;

ALTER TABLE VAL_PERSON_STATUS
	ADD CONSTRAINT  CHECK_YES_NO_856940377 CHECK (PROPAGATE_FROM_PERSON IN ('Y', 'N'));

ALTER TABLE VAL_PERSON_STATUS
	ADD CONSTRAINT  CHECK_YES_NO_100412184 CHECK (IS_DISABLED IN ('Y', 'N'));

/***********************************************
 * Table: VAL_PORT_MEDIUM
 ***********************************************/

CREATE TABLE VAL_PORT_MEDIUM
(
	PORT_MEDIUM          VARCHAR(50) NOT NULL 
,
	PORT_PLUG_STYLE      VARCHAR(50) NOT NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_PORT_MEDIUM
	ADD CONSTRAINT  PK_VAL_PORT_MEDIUM PRIMARY KEY (PORT_MEDIUM,PORT_PLUG_STYLE)       ;

CREATE  INDEX XIF1VAL_PORT_MEDIUM ON VAL_PORT_MEDIUM
(PORT_PLUG_STYLE   ASC);

/***********************************************
 * Table: VAL_PORT_PLUG_STYLE
 ***********************************************/

CREATE TABLE VAL_PORT_PLUG_STYLE
(
	PORT_PLUG_STYLE      VARCHAR(50) NOT NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_PORT_PLUG_STYLE
	ADD CONSTRAINT  PK_VAL_PORT_PLUG_STYLE PRIMARY KEY (PORT_PLUG_STYLE)       ;

/***********************************************
 * Table: VAL_PORT_PROTOCOL
 ***********************************************/

CREATE TABLE VAL_PORT_PROTOCOL
(
	PORT_PROTOCOL        VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_PORT_PROTOCOL
	ADD CONSTRAINT  PK_VAL_PORT_PROTOCOL PRIMARY KEY (PORT_PROTOCOL)       ;

/***********************************************
 * Table: VAL_PORT_PROTOCOL_SPEED
 ***********************************************/

CREATE TABLE VAL_PORT_PROTOCOL_SPEED
(
	PORT_PROTOCOL        VARCHAR(50) NOT NULL,
	PORT_SPEED           VARCHAR(50) NOT NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_PORT_PROTOCOL_SPEED
	ADD CONSTRAINT  PK_VAL_PORT_PROTOCOL_SPEED PRIMARY KEY (PORT_PROTOCOL,PORT_SPEED)       ;

CREATE  INDEX XIF1VAL_PORT_PROTOCOL_SPEED ON VAL_PORT_PROTOCOL_SPEED
(PORT_SPEED   ASC);

CREATE  INDEX XIF2VAL_PORT_PROTOCOL_SPEED ON VAL_PORT_PROTOCOL_SPEED
(PORT_PROTOCOL   ASC);

/***********************************************
 * Table: VAL_PORT_PURPOSE
 ***********************************************/

CREATE TABLE VAL_PORT_PURPOSE
(
	PORT_PURPOSE         VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	IS_LOM               CHAR(1) NOT NULL 
,
	IS_CONSOLE           CHAR(1) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_PORT_PURPOSE
	ADD CONSTRAINT  PK_VAL_PORT_PURPOSE PRIMARY KEY (PORT_PURPOSE)       ;

ALTER TABLE VAL_PORT_PURPOSE
	ADD CONSTRAINT  CKC_IS_LOM_VAL_PORT CHECK (IS_LOM in ('Y','N') and IS_LOM = upper(IS_LOM));

ALTER TABLE VAL_PORT_PURPOSE
	ADD CONSTRAINT  CKC_IS_CONSOLE_VAL_PORT CHECK (IS_CONSOLE in ('Y','N') and IS_CONSOLE = upper(IS_CONSOLE));

/***********************************************
 * Table: VAL_PORT_SPEED
 ***********************************************/

CREATE TABLE VAL_PORT_SPEED
(
	PORT_SPEED           VARCHAR(50) NOT NULL,
	PORT_SPEED_BPS bigint NOT NULL,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_PORT_SPEED
	ADD CONSTRAINT  PK_VAL_PORT_SPEED PRIMARY KEY (PORT_SPEED)       ;

/***********************************************
 * Table: VAL_PORT_TYPE
 ***********************************************/

CREATE TABLE VAL_PORT_TYPE
(
	PORT_TYPE            VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_PORT_TYPE
	ADD CONSTRAINT  PK_VAL_PORT_TYPE PRIMARY KEY (PORT_TYPE)       ;

/***********************************************
 * Table: VAL_POWER_PLUG_STYLE
 ***********************************************/

CREATE TABLE VAL_POWER_PLUG_STYLE
(
	POWER_PLUG_STYLE     VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_POWER_PLUG_STYLE
	ADD CONSTRAINT  PK_VAL_POWER_PLUG_STYLE PRIMARY KEY (POWER_PLUG_STYLE)       ;

/***********************************************
 * Table: VAL_PROCESSOR_ARCHITECTURE
 ***********************************************/

CREATE TABLE VAL_PROCESSOR_ARCHITECTURE
(
	PROCESSOR_ARCHITECTURE VARCHAR(50) NOT NULL 
,
	KERNEL_BITS          INTEGER CONSTRAINT SYS_C004774 NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_PROCESSOR_ARCHITECTURE
	ADD CONSTRAINT  PK_VAL_PROCESSOR_ARCHITECTURE PRIMARY KEY (PROCESSOR_ARCHITECTURE)       ;

ALTER TABLE VAL_PROCESSOR_ARCHITECTURE
	ADD CONSTRAINT  CKC_KERNEL_BITS_VAL_PROC CHECK (KERNEL_BITS in (0,32,64));

/***********************************************
 * Table: VAL_PRODUCTION_STATE
 ***********************************************/

CREATE TABLE VAL_PRODUCTION_STATE
(
	PRODUCTION_STATE     VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_PRODUCTION_STATE
	ADD CONSTRAINT  PK_VAL_PRODUCTION_STATE PRIMARY KEY (PRODUCTION_STATE)       ;

/***********************************************
 * Table: VAL_PROPERTY
 ***********************************************/

CREATE TABLE VAL_PROPERTY
(
	PROPERTY_NAME        VARCHAR(255) NOT NULL,
	PROPERTY_TYPE        VARCHAR(50) NOT NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	IS_MULTIVALUE        CHAR(1) NOT NULL,
	PROP_VAL_ACCT_COLL_TYPE_RSTRCT VARCHAR(50) NULL,
	PROP_VAL_NBLK_COLL_TYPE_RSTRCT VARCHAR(50) NULL,
	PROPERTY_DATA_TYPE   VARCHAR(50) NOT NULL,
	PERMIT_ACCOUNT_COLLECTION_ID CHAR(10) NOT NULL,
	PERMIT_ACCOUNT_ID    CHAR(10) NOT NULL,
	PERMIT_ACCOUNT_REALM_ID CHAR(10) NOT NULL,
	PERMIT_COMPANY_ID    CHAR(10) NOT NULL,
	PERMIT_DEVICE_COLLECTION_ID CHAR(10) NOT NULL,
	PERMIT_DNS_DOMAIN_ID CHAR(10) NOT NULL,
	PERMIT_LAYER2_NETWORK_ID CHAR(10) NOT NULL,
	PERMIT_LAYER3_NETWORK_ID CHAR(10) NOT NULL,
	PERMIT_NETBLOCK_COLLECTION_ID CHAR(10) NOT NULL,
	PERMIT_OPERATING_SYSTEM_ID CHAR(10) NOT NULL,
	PERMIT_PERSON_ID     CHAR(10) NOT NULL,
	PERMIT_PROPERTY_COLLECTION_ID CHAR(10) NOT NULL,
	PERMIT_SERVICE_ENV_COLLECTION CHAR(10) NOT NULL,
	PERMIT_SITE_CODE     CHAR(10) NOT NULL,
	PERMIT_PROPERTY_RANK CHAR(10) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_PROPERTY IS 'valid values and attributes for (name,type) pairs in the property table';

COMMENT ON COLUMN VAL_PROPERTY.PROPERTY_NAME IS 'property name for validation purposes';

COMMENT ON COLUMN VAL_PROPERTY.PROPERTY_TYPE IS 'property type for validation purposes';

COMMENT ON COLUMN VAL_PROPERTY.IS_MULTIVALUE IS 'If N, acts like an ak on property.(*_id,property_type)';

COMMENT ON COLUMN VAL_PROPERTY.PROPERTY_DATA_TYPE IS 'which of the property_table_* columns should be used for this value';

COMMENT ON COLUMN VAL_PROPERTY.PERMIT_COMPANY_ID IS 'defines how company id should be used in the property for this (name,type)';

COMMENT ON COLUMN VAL_PROPERTY.PERMIT_DEVICE_COLLECTION_ID IS 'defines how company id should be used in the property for this (name,type)';

COMMENT ON COLUMN VAL_PROPERTY.PERMIT_DNS_DOMAIN_ID IS 'defines how company id should be used in the property for this (name,type)';

COMMENT ON COLUMN VAL_PROPERTY.PERMIT_ACCOUNT_ID IS 'defines how company id should be used in the property for this (name,type)';

COMMENT ON COLUMN VAL_PROPERTY.PERMIT_ACCOUNT_COLLECTION_ID IS 'defines how company id should be used in the property for this (name,type)';

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  PK_VAL_PROPERTY PRIMARY KEY (PROPERTY_NAME,PROPERTY_TYPE);

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CKC_VAL_PROP_ISMULTI CHECK (IS_MULTIVALUE IN ('Y', 'N'));

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CKC_VAL_PROP_CMP_ID CHECK (PERMIT_COMPANY_ID IN ('REQUIRED', 'PROHIBITED', 'ALLOWED'));

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CKC_VAL_PROP_PDEVCOL_ID CHECK (PERMIT_DEVICE_COLLECTION_ID IN ('REQUIRED', 'PROHIBITED', 'ALLOWED'));

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CKC_VAL_PROP_PDNSDOMID CHECK (PERMIT_DNS_DOMAIN_ID IN ('REQUIRED', 'PROHIBITED', 'ALLOWED'));

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CKC_VAL_PROP_PACCT_ID CHECK (PERMIT_ACCOUNT_ID IN ('REQUIRED', 'PROHIBITED', 'ALLOWED'));

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CKC_VAL_PROP_PUCLS_ID CHECK (PERMIT_ACCOUNT_COLLECTION_ID IN ('REQUIRED', 'PROHIBITED', 'ALLOWED'));

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CKC_VAL_PROP_SITEC CHECK (PERMIT_SITE_CODE IN ('REQUIRED', 'PROHIBITED', 'ALLOWED'));

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CKC_VAL_PROP_PRODSTATE CHECK (PERMIT_SERVICE_ENV_COLLECTION IN ('REQUIRED', 'PROHIBITED', 'ALLOWED'));

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CKC_VAL_PROP_OSID CHECK (PERMIT_OPERATING_SYSTEM_ID IN ('REQUIRED', 'PROHIBITED', 'ALLOWED'));

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CHECK_PRP_PRMT_606225804 CHECK (PERMIT_PERSON_ID IN ('REQUIRED', 'PROHIBITED', 'ALLOWED'));

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CHECK_PRP_PRMT_354296970 CHECK (PERMIT_NETBLOCK_COLLECTION_ID IN ('REQUIRED', 'PROHIBITED', 'ALLOWED'));

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CHECK_PRP_PRMT_2139007167 CHECK (PERMIT_PROPERTY_RANK IN ('REQUIRED', 'PROHIBITED', 'ALLOWED'));

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CHECK_PRP_PRMT_2016888554 CHECK (PERMIT_ACCOUNT_REALM_ID IN ('REQUIRED', 'PROHIBITED', 'ALLOWED'));

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CHECK_PRP_PRMT_1279736503 CHECK (PERMIT_LAYER2_NETWORK_ID IN ('REQUIRED', 'PROHIBITED', 'ALLOWED'));

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CHECK_PRP_PRMT_1279736247 CHECK (PERMIT_LAYER3_NETWORK_ID IN ('REQUIRED', 'PROHIBITED', 'ALLOWED'));

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT  CHECK_PRP_PRMT_271462566 CHECK (PERMIT_PROPERTY_COLLECTION_ID IN ('REQUIRED', 'PROHIBITED', 'ALLOWED'));

ALTER TABLE VAL_PROPERTY
	ALTER PERMIT_COMPANY_ID SET DEFAULT 'PROHIBITED';

ALTER TABLE VAL_PROPERTY
	ALTER PERMIT_DEVICE_COLLECTION_ID SET DEFAULT 'PROHIBITED';

ALTER TABLE VAL_PROPERTY
	ALTER PERMIT_DNS_DOMAIN_ID SET DEFAULT 'PROHIBITED';

ALTER TABLE VAL_PROPERTY
	ALTER PERMIT_ACCOUNT_ID SET DEFAULT 'PROHIBITED';

ALTER TABLE VAL_PROPERTY
	ALTER PERMIT_ACCOUNT_COLLECTION_ID SET DEFAULT 'PROHIBITED';

ALTER TABLE VAL_PROPERTY
	ALTER PERMIT_SITE_CODE SET DEFAULT 'PROHIBITED';

ALTER TABLE VAL_PROPERTY
	ALTER PERMIT_SERVICE_ENV_COLLECTION SET DEFAULT 'PROHIBITED';

ALTER TABLE VAL_PROPERTY
	ALTER PERMIT_OPERATING_SYSTEM_ID SET DEFAULT 'PROHIBITED';

ALTER TABLE VAL_PROPERTY
	ALTER PERMIT_PERSON_ID SET DEFAULT 'PROHIBITED';

ALTER TABLE VAL_PROPERTY
	ALTER PERMIT_NETBLOCK_COLLECTION_ID SET DEFAULT 'PROHIBITED';

ALTER TABLE VAL_PROPERTY
	ALTER PERMIT_PROPERTY_RANK SET DEFAULT 'PROHIBITED';

ALTER TABLE VAL_PROPERTY
	ALTER PERMIT_ACCOUNT_REALM_ID SET DEFAULT 'PROHIBITED';

ALTER TABLE VAL_PROPERTY
	ALTER PERMIT_LAYER2_NETWORK_ID SET DEFAULT 'PROHIBITED';

ALTER TABLE VAL_PROPERTY
	ALTER PERMIT_LAYER3_NETWORK_ID SET DEFAULT 'PROHIBITED';

ALTER TABLE VAL_PROPERTY
	ALTER PERMIT_PROPERTY_COLLECTION_ID SET DEFAULT 'PROHIBITED';

CREATE  INDEX XIF3VAL_PROPERTY ON VAL_PROPERTY
(PROP_VAL_ACCT_COLL_TYPE_RSTRCT   ASC);

CREATE  INDEX XIF4VAL_PROPERTY ON VAL_PROPERTY
(PROP_VAL_NBLK_COLL_TYPE_RSTRCT   ASC);

CREATE  INDEX XIF1VAL_PROPERTY ON VAL_PROPERTY
(PROPERTY_DATA_TYPE   ASC);

CREATE  INDEX XIF2VAL_PROPERTY ON VAL_PROPERTY
(PROPERTY_TYPE   ASC);

/***********************************************
 * Table: VAL_PROPERTY_COLLECTION_TYPE
 ***********************************************/

CREATE TABLE VAL_PROPERTY_COLLECTION_TYPE
(
	PROPERTY_COLLECTION_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	MAX_NUM_MEMBERS      INTEGER NULL,
	MAX_NUM_COLLECTIONS  INTEGER NULL,
	CAN_HAVE_HIERARCHY   CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN VAL_PROPERTY_COLLECTION_TYPE.MAX_NUM_MEMBERS IS 'Maximum INTEGER of members in a given collection of this type
';

COMMENT ON COLUMN VAL_PROPERTY_COLLECTION_TYPE.CAN_HAVE_HIERARCHY IS 'Indicates if the collections can have other collections to make it hierarchical.';

COMMENT ON COLUMN VAL_PROPERTY_COLLECTION_TYPE.MAX_NUM_COLLECTIONS IS 'Maximum INTEGER of collections a given member can be a part of of this type.
';

ALTER TABLE VAL_PROPERTY_COLLECTION_TYPE
	ADD CONSTRAINT  PK_PROPERTY_COLLCTION_TYPE PRIMARY KEY (PROPERTY_COLLECTION_TYPE)       ;

ALTER TABLE VAL_PROPERTY_COLLECTION_TYPE
	ADD CONSTRAINT  CHECK_YES_NO_1132635988 CHECK (CAN_HAVE_HIERARCHY IN ('Y', 'N'));

ALTER TABLE VAL_PROPERTY_COLLECTION_TYPE
	ALTER CAN_HAVE_HIERARCHY SET DEFAULT 'Y';

/***********************************************
 * Table: VAL_PROPERTY_DATA_TYPE
 ***********************************************/

CREATE TABLE VAL_PROPERTY_DATA_TYPE
(
	PROPERTY_DATA_TYPE   VARCHAR(50) NOT NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_PROPERTY_DATA_TYPE IS 'valid data types for property (name,type) pairs';

ALTER TABLE VAL_PROPERTY_DATA_TYPE
	ADD CONSTRAINT  PK_VAL_PROPERTY_DATA_TYPE PRIMARY KEY (PROPERTY_DATA_TYPE);

/***********************************************
 * Table: VAL_PROPERTY_TYPE
 ***********************************************/

CREATE TABLE VAL_PROPERTY_TYPE
(
	PROPERTY_TYPE        VARCHAR(50) NOT NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	PROP_VAL_ACCT_COLL_TYPE_RSTRCT VARCHAR(50) NULL,
	IS_MULTIVALUE        CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_PROPERTY_TYPE IS 'validation table for property types';

ALTER TABLE VAL_PROPERTY_TYPE
	ADD CONSTRAINT  PK_VAL_PROPERTY_TYPE PRIMARY KEY (PROPERTY_TYPE);

ALTER TABLE VAL_PROPERTY_TYPE
	ADD CONSTRAINT  CKC_VAL_PROP_TYP_ISMULTI CHECK (IS_MULTIVALUE IN ('Y', 'N'));

CREATE  INDEX XIF1VAL_PROPERTY_TYPE ON VAL_PROPERTY_TYPE
(PROP_VAL_ACCT_COLL_TYPE_RSTRCT   ASC);

CREATE TABLE VAL_PROPERTY_VALUE
(
	PROPERTY_NAME        VARCHAR(255) NOT NULL,
	PROPERTY_TYPE        VARCHAR(50) NOT NULL,
	VALID_PROPERTY_VALUE VARCHAR(255) NOT NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON COLUMN VAL_PROPERTY_VALUE.PROPERTY_NAME IS 'property name for validation purposes';

COMMENT ON COLUMN VAL_PROPERTY_VALUE.PROPERTY_TYPE IS 'property type for validation purposes';

COMMENT ON COLUMN VAL_PROPERTY_VALUE.VALID_PROPERTY_VALUE IS 'if applicatable, servves as a fk for valid property_values.  This depends on val_property.property_data_type being set to list.';

ALTER TABLE VAL_PROPERTY_VALUE
	ADD CONSTRAINT  PK_VAL_PROPERTY_VAUE PRIMARY KEY (PROPERTY_NAME,PROPERTY_TYPE,VALID_PROPERTY_VALUE);

CREATE  INDEX XIFVALPROVAL_NAMTYP ON VAL_PROPERTY_VALUE
(PROPERTY_NAME   ASC,PROPERTY_TYPE   ASC);

/***********************************************
 * Table: VAL_RACK_TYPE
 ***********************************************/

CREATE TABLE VAL_RACK_TYPE
(
	RACK_TYPE            VARCHAR(255) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_RACK_TYPE
	ADD CONSTRAINT  PK_VAL_RACK_TYPE PRIMARY KEY (RACK_TYPE)       ;

/***********************************************
 * Table: VAL_SERVICE_ENV_COLL_TYPE
 ***********************************************/

CREATE TABLE VAL_SERVICE_ENV_COLL_TYPE
(
	SERVICE_ENV_COLLECTION_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	MAX_NUM_MEMBERS      INTEGER NULL,
	MAX_NUM_COLLECTIONS  INTEGER NULL,
	CAN_HAVE_HIERARCHY   CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_SERVICE_ENV_COLL_TYPE
	ADD CONSTRAINT  PK_VAL_SERVICE_ENV_COLL_TYPE PRIMARY KEY (SERVICE_ENV_COLLECTION_TYPE)       ;

ALTER TABLE VAL_SERVICE_ENV_COLL_TYPE
	ADD CONSTRAINT  CHECK_YES_NOSECT_HIER CHECK (CAN_HAVE_HIERARCHY IN ('Y', 'N'));

ALTER TABLE VAL_SERVICE_ENV_COLL_TYPE
	ALTER CAN_HAVE_HIERARCHY SET DEFAULT 'Y';

/***********************************************
 * Table: VAL_SNMP_COMMSTR_TYPE
 ***********************************************/

CREATE TABLE VAL_SNMP_COMMSTR_TYPE
(
	SNMP_COMMSTR_TYPE    VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) CONSTRAINT SYS_C0074788 NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_SNMP_COMMSTR_TYPE
	ADD CONSTRAINT  PK_SNMP_COMMSTR_TYPE PRIMARY KEY (SNMP_COMMSTR_TYPE)       ;

/***********************************************
 * Table: VAL_SSH_KEY_TYPE
 ***********************************************/

CREATE TABLE VAL_SSH_KEY_TYPE
(
	SSH_KEY_TYPE         CHAR(18) NOT NULL,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_SSH_KEY_TYPE
	ADD CONSTRAINT  PK_VAL_SSH_KEY_TYPE PRIMARY KEY (SSH_KEY_TYPE)       ;

/***********************************************
 * Table: VAL_STOP_BITS
 ***********************************************/

CREATE TABLE VAL_STOP_BITS
(
	STOP_BITS            INTEGER NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_STOP_BITS
	ADD CONSTRAINT  PK_VAL_STOP_BITS PRIMARY KEY (STOP_BITS)       ;

/***********************************************
 * Table: VAL_SW_PACKAGE_FORMAT
 ***********************************************/

CREATE TABLE VAL_SW_PACKAGE_FORMAT
(
	SW_PACKAGE_FORMAT    VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_SW_PACKAGE_FORMAT
	ADD CONSTRAINT  PK_VAL_SW_PACKAGE_FORMAT PRIMARY KEY (SW_PACKAGE_FORMAT)       ;

/***********************************************
 * Table: VAL_SW_PACKAGE_TYPE
 ***********************************************/

CREATE TABLE VAL_SW_PACKAGE_TYPE
(
	SW_PACKAGE_TYPE      VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_SW_PACKAGE_TYPE
	ADD CONSTRAINT  PK_VAL_SW_PACKAGE_TYPE PRIMARY KEY (SW_PACKAGE_TYPE)       ;

/***********************************************
 * Table: VAL_SYMBOLIC_TRACK_NAME
 ***********************************************/

CREATE TABLE VAL_SYMBOLIC_TRACK_NAME
(
	SYMBOLIC_TRACK_NAME  VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_SYMBOLIC_TRACK_NAME
	ADD CONSTRAINT  PK_VAL_SYMBOLIC_TRACK_NAME PRIMARY KEY (SYMBOLIC_TRACK_NAME)       ;

/***********************************************
 * Table: VAL_TOKEN_COLLECTION_TYPE
 ***********************************************/

CREATE TABLE VAL_TOKEN_COLLECTION_TYPE
(
	TOKEN_COLLECTION_TYPE VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	MAX_NUM_MEMBERS      INTEGER NULL,
	MAX_NUM_COLLECTIONS  INTEGER NULL,
	CAN_HAVE_HIERARCHY   CHAR(1) NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_TOKEN_COLLECTION_TYPE IS 'Assign purposes to arbitrary groupings';

COMMENT ON COLUMN VAL_TOKEN_COLLECTION_TYPE.MAX_NUM_MEMBERS IS 'Maximum INTEGER of members in a given collection of this type';

COMMENT ON COLUMN VAL_TOKEN_COLLECTION_TYPE.CAN_HAVE_HIERARCHY IS 'Indicates if the collections can have other collections to make it hierarchical.';

COMMENT ON COLUMN VAL_TOKEN_COLLECTION_TYPE.MAX_NUM_COLLECTIONS IS 'Maximum INTEGER of collections a given member can be a part of of this type.';

ALTER TABLE VAL_TOKEN_COLLECTION_TYPE
	ADD CONSTRAINT  PK_VAL_TOKEN_COLLECTION_TYPE PRIMARY KEY (TOKEN_COLLECTION_TYPE)       ;

ALTER TABLE VAL_TOKEN_COLLECTION_TYPE
	ADD CONSTRAINT  CHECK_YES_NO_126727163 CHECK (CAN_HAVE_HIERARCHY IN ('Y', 'N'));

ALTER TABLE VAL_TOKEN_COLLECTION_TYPE
	ALTER CAN_HAVE_HIERARCHY SET DEFAULT 'Y';

/***********************************************
 * Table: VAL_TOKEN_STATUS
 ***********************************************/

CREATE TABLE VAL_TOKEN_STATUS
(
	TOKEN_STATUS         VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_TOKEN_STATUS
	ADD CONSTRAINT  PK_VAL_TOKEN_STATUS PRIMARY KEY (TOKEN_STATUS)       ;

/***********************************************
 * Table: VAL_TOKEN_TYPE
 ***********************************************/

CREATE TABLE VAL_TOKEN_TYPE
(
	TOKEN_TYPE           VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_TOKEN_TYPE
	ADD CONSTRAINT  PK_VAL_TOKEN_TYPE PRIMARY KEY (TOKEN_TYPE)       ;

/***********************************************
 * Table: VAL_UPGRADE_SEVERITY
 ***********************************************/

CREATE TABLE VAL_UPGRADE_SEVERITY
(
	UPGRADE_SEVERITY     VARCHAR(50) NOT NULL 
,
	SEVERITY_FACTOR      INTEGER NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_UPGRADE_SEVERITY
	ADD CONSTRAINT  PK_VAL_UPGRADE_SEVERITY PRIMARY KEY (UPGRADE_SEVERITY)       ;

/***********************************************
 * Table: VAL_VOE_STATE
 ***********************************************/

CREATE TABLE VAL_VOE_STATE
(
	VOE_STATE            VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(4000) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VAL_VOE_STATE
	ADD CONSTRAINT  PK_VAL_VOE_STATE PRIMARY KEY (VOE_STATE)       ;

/***********************************************
 * Table: VAL_X509_CERTIFICATE_FILE_FMT
 ***********************************************/

CREATE TABLE VAL_X509_CERTIFICATE_FILE_FMT
(
	X509_FILE_FORMAT     VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_X509_CERTIFICATE_FILE_FMT IS 'Format of the file containing certificate.';

COMMENT ON COLUMN VAL_X509_CERTIFICATE_FILE_FMT.X509_FILE_FORMAT IS 'Format Name of the file containing Certificate information. Example; keytool, rsa';

ALTER TABLE VAL_X509_CERTIFICATE_FILE_FMT
	ADD CONSTRAINT  PK_CERTIFICATE_FILE_FORMAT PRIMARY KEY (X509_FILE_FORMAT)       ;

/***********************************************
 * Table: VAL_X509_KEY_USAGE
 ***********************************************/

CREATE TABLE VAL_X509_KEY_USAGE
(
	X509_KEY_USG         VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	IS_EXTENDED          CHAR(1) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_X509_KEY_USAGE IS 'Captures possible usage of the certificate key. Example: Client, Server, CA.';

COMMENT ON COLUMN VAL_X509_KEY_USAGE.X509_KEY_USG IS 'Name of the Certificate.';

COMMENT ON COLUMN VAL_X509_KEY_USAGE.DESCRIPTION IS 'Textual Description of the certificate key usage.';

COMMENT ON COLUMN VAL_X509_KEY_USAGE.IS_EXTENDED IS 'Indicates if certificate key is to have an extended key usage. Default is ''N'' - No.';

ALTER TABLE VAL_X509_KEY_USAGE
	ADD CONSTRAINT  PK_X509_KEY_USAGE PRIMARY KEY (X509_KEY_USG)       ;

/***********************************************
 * Table: VAL_X509_KEY_USAGE_CATEGORY
 ***********************************************/

CREATE TABLE VAL_X509_KEY_USAGE_CATEGORY
(
	X509_KEY_USG_CAT     VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE VAL_X509_KEY_USAGE_CATEGORY IS 'Categorizes Certificates based on the technology object the usage can be assigned to. Currently: Application, User.';

COMMENT ON COLUMN VAL_X509_KEY_USAGE_CATEGORY.X509_KEY_USG_CAT IS 'Category Name. Example: Application.';

COMMENT ON COLUMN VAL_X509_KEY_USAGE_CATEGORY.DESCRIPTION IS 'Textual description of the category.';

ALTER TABLE VAL_X509_KEY_USAGE_CATEGORY
	ADD CONSTRAINT  PK_X509_KEY_USAGE_CATEGORY PRIMARY KEY (X509_KEY_USG_CAT)       ;

/***********************************************
 * Table: VOE
 ***********************************************/

CREATE TABLE VOE
(
	VOE_ID SERIAL NOT NULL 
,
	VOE_NAME             VARCHAR(50) NOT NULL 
,
	VOE_STATE            VARCHAR(50) NOT NULL 
,
	SW_PACKAGE_REPOSITORY_ID INTEGER NOT NULL 
,
	SERVICE_ENVIRONMENT_ID INTEGER NOT NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VOE
	ADD CONSTRAINT  PK_VONAGE_OPERATING_ENV PRIMARY KEY (VOE_ID)       ;

ALTER TABLE VOE
ADD CONSTRAINT  AK_UQ_VOE_VOE_NAME_SW_VONAGE_O UNIQUE (VOE_NAME,SW_PACKAGE_REPOSITORY_ID)       ;

ALTER TABLE VOE
	ADD CONSTRAINT  SYS_C0033904 CHECK (VOE_ID IS
NOT NULL);

ALTER TABLE VOE
	ADD CONSTRAINT  SYS_C0033905 CHECK (VOE_NAME
IS NOT NULL);

ALTER TABLE VOE
	ADD CONSTRAINT  SYS_C0033906 CHECK (VOE_STATE
IS NOT NULL);

/***********************************************
 * Table: VOE_RELATION
 ***********************************************/

CREATE TABLE VOE_RELATION
(
	VOE_ID               INTEGER NOT NULL 
,
	RELATED_VOE_ID       INTEGER NOT NULL 
,
	UPGRADE_SEVERITY     VARCHAR(50) NOT NULL 
,
	IS_ACTIVE            CHAR(1) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VOE_RELATION
	ADD CONSTRAINT  PK_VOE_RELATION PRIMARY KEY (VOE_ID,RELATED_VOE_ID)       ;

ALTER TABLE VOE_RELATION
	ADD CONSTRAINT  SYS_C0033916 CHECK (VOE_ID IS NOT
NULL);

ALTER TABLE VOE_RELATION
	ADD CONSTRAINT  SYS_C0033917 CHECK (RELATED_VOE_ID IS
NOT NULL);

ALTER TABLE VOE_RELATION
	ADD CONSTRAINT  SYS_C0033918 CHECK (UPGRADE_SEVERITY
IS NOT NULL);

ALTER TABLE VOE_RELATION
	ADD CONSTRAINT  CKC_IS_ACTIVE_VOE_RELA CHECK (IS_ACTIVE in ('Y','N') and IS_ACTIVE = upper(IS_ACTIVE));

ALTER TABLE VOE_RELATION
	ADD CONSTRAINT  SYS_C0033919 CHECK (IS_ACTIVE IS NOT
NULL);

CREATE INDEX BMAP_VOE_REL_IS_ACTIVE ON VOE_RELATION
(IS_ACTIVE   ASC);

CREATE INDEX BMAP_VOE_REL_UPG_SEV ON VOE_RELATION
(UPGRADE_SEVERITY   ASC);

CREATE  INDEX IDX_VOE_REL_REL_VOE_ID ON VOE_RELATION
(RELATED_VOE_ID   ASC);

/***********************************************
 * Table: VOE_SW_PACKAGE
 ***********************************************/

CREATE TABLE VOE_SW_PACKAGE
(
	VOE_ID               INTEGER NOT NULL 
,
	SW_PACKAGE_RELEASE_ID INTEGER NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VOE_SW_PACKAGE
	ADD CONSTRAINT  PK_VOE_SW_PACKAGE PRIMARY KEY (VOE_ID,SW_PACKAGE_RELEASE_ID)       ;

ALTER TABLE VOE_SW_PACKAGE
	ADD CONSTRAINT  SYS_C0033927 CHECK (VOE_ID IS NOT
NULL);

/***********************************************
 * Table: VOE_SYMBOLIC_TRACK
 ***********************************************/

CREATE TABLE VOE_SYMBOLIC_TRACK
(
	VOE_SYMBOLIC_TRACK_ID INTEGER NOT NULL 
,
	SYMBOLIC_TRACK_NAME  VARCHAR(50) NOT NULL 
,
	ACTIVE_VOE_ID        INTEGER NOT NULL 
,
	PENDING_VOE_ID       INTEGER NULL,
	UPGRADE_SEVERITY_THRESHOLD VARCHAR(50) NOT NULL 
,
	SW_PACKAGE_REPOSITORY_ID INTEGER NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

ALTER TABLE VOE_SYMBOLIC_TRACK
	ADD CONSTRAINT  PK_VOE_SYMBOLIC_TRACK PRIMARY KEY (VOE_SYMBOLIC_TRACK_ID)       ;

ALTER TABLE VOE_SYMBOLIC_TRACK
ADD CONSTRAINT  AK_UQ_VSYMBTRK_TRK_SW_VOE_SYMB UNIQUE (SYMBOLIC_TRACK_NAME,SW_PACKAGE_REPOSITORY_ID)       ;

/***********************************************
 * Table: X509_CERTIFICATE
 ***********************************************/

CREATE TABLE X509_CERTIFICATE
(
	X509_CERT_ID SERIAL NOT NULL 
,
	IS_CERTIFICATE_AUTHORITY CHAR(1) NOT NULL,
	SIGNING_CERT_ID      INTEGER NULL,
	X509_CA_CERT_SERIAL_NUMBER numeric NULL,
	PUBLIC_KEY           VARCHAR(4000) NOT NULL 
,
	PRIVATE_KEY          VARCHAR(4000) NOT NULL 
,
	CERTIFICATE_SIGN_REQ VARCHAR(4000) NULL,
	SUBJECT              VARCHAR(255) NOT NULL 
,
	VALID_FROM           TIMESTAMP(6) NOT NULL 
,
	VALID_TO             TIMESTAMP(6) NOT NULL 
,
	IS_CERT_REVOKED      CHAR(1) NOT NULL 
,
	PASSPHRASE           VARCHAR(255) NULL,
	ENCRYPTION_KEY_ID    INTEGER NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE X509_CERTIFICATE IS 'X509 specification Certificate.';

COMMENT ON COLUMN X509_CERTIFICATE.X509_CERT_ID IS 'Uniquely identifies Certificate';

COMMENT ON COLUMN X509_CERTIFICATE.SIGNING_CERT_ID IS 'Identifier for the certificate that has signed this one.';

COMMENT ON COLUMN X509_CERTIFICATE.X509_CA_CERT_SERIAL_NUMBER IS 'Serial INTEGER assigned to the certificate within Certificate Authority. It uniquely identifies certificate within the realm of the CA.';

COMMENT ON COLUMN X509_CERTIFICATE.PUBLIC_KEY IS 'Textual representation of Certificate Public Key. Public Key is a component of X509 standard and is used for encryption.';

COMMENT ON COLUMN X509_CERTIFICATE.PRIVATE_KEY IS 'Textual representation of Certificate Private Key. Private Key is a component of X509 standard and is used for encryption.';

COMMENT ON COLUMN X509_CERTIFICATE.SUBJECT IS 'Textual representation of a certificate subject. Certificate subject is a part of X509 certificate specifications.';

COMMENT ON COLUMN X509_CERTIFICATE.VALID_FROM IS 'Timestamp indicating when the certificate becomes valid and can be used.';

COMMENT ON COLUMN X509_CERTIFICATE.VALID_TO IS 'Timestamp indicating when the certificate becomes invalid and can''t be used.';

COMMENT ON COLUMN X509_CERTIFICATE.IS_CERT_REVOKED IS 'Indicates if certificate has been revoked. ''Y'' indicates that Certificate has been revoked.';

ALTER TABLE X509_CERTIFICATE
	ADD CONSTRAINT  PK_X509_CERTIFICATE PRIMARY KEY (X509_CERT_ID)       ;

ALTER TABLE X509_CERTIFICATE
ADD CONSTRAINT  AK_X509_CERT_CERT_CA_SER UNIQUE (SIGNING_CERT_ID,X509_CA_CERT_SERIAL_NUMBER)       ;

ALTER TABLE X509_CERTIFICATE
	ADD CONSTRAINT  CHECK_YES_NO_293461963 CHECK (IS_CERT_REVOKED IN ('Y', 'N'));

ALTER TABLE X509_CERTIFICATE
	ADD CONSTRAINT  CHECK_YES_NO_31190954 CHECK (IS_CERTIFICATE_AUTHORITY IN ('Y', 'N'));

ALTER TABLE X509_CERTIFICATE
	ALTER IS_CERT_REVOKED SET DEFAULT 'N';

ALTER TABLE X509_CERTIFICATE
	ALTER IS_CERTIFICATE_AUTHORITY SET DEFAULT 'N';

/***********************************************
 * Table: X509_KEY_USAGE_ATTRIBUTE
 ***********************************************/

CREATE TABLE X509_KEY_USAGE_ATTRIBUTE
(
	X509_CERT_ID         INTEGER NOT NULL 
,
	X509_KEY_USG         VARCHAR(50) NOT NULL 
,
	X509_KEY_USG_CAT     VARCHAR(50) NOT NULL 
,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE X509_KEY_USAGE_ATTRIBUTE IS 'Actual attribute of certificate key usage.';

COMMENT ON COLUMN X509_KEY_USAGE_ATTRIBUTE.X509_KEY_USG_CAT IS 'Category Name. Example: Application.';

COMMENT ON COLUMN X509_KEY_USAGE_ATTRIBUTE.X509_KEY_USG IS 'Name of the Certificate.';

COMMENT ON COLUMN X509_KEY_USAGE_ATTRIBUTE.X509_CERT_ID IS 'Uniquely identifies Certificate';

ALTER TABLE X509_KEY_USAGE_ATTRIBUTE
	ADD CONSTRAINT  PK_KEY_USAGE_ATTRIBUTE PRIMARY KEY (X509_CERT_ID,X509_KEY_USG)       ;

/***********************************************
 * Table: X509_KEY_USAGE_CATEGORIZATION
 ***********************************************/

CREATE TABLE X509_KEY_USAGE_CATEGORIZATION
(
	X509_KEY_USG_CAT     VARCHAR(50) NOT NULL 
,
	X509_KEY_USG         VARCHAR(50) NOT NULL 
,
	DESCRIPTION          VARCHAR(255) NULL,
	DATA_INS_USER        VARCHAR(255) NULL,
	DATA_INS_DATE        TIMESTAMP WITH TIME ZONE NULL,
	DATA_UPD_USER        VARCHAR(255) NULL,
	DATA_UPD_DATE        TIMESTAMP WITH TIME ZONE NULL 
);

COMMENT ON TABLE X509_KEY_USAGE_CATEGORIZATION IS 'Captures certificate key usage categorization. Example: Client key usage can be assigned to USER, but CA usage can not.';

COMMENT ON COLUMN X509_KEY_USAGE_CATEGORIZATION.X509_KEY_USG_CAT IS 'Category Name. Example: Application.';

COMMENT ON COLUMN X509_KEY_USAGE_CATEGORIZATION.X509_KEY_USG IS 'Name of the Certificate.';

ALTER TABLE X509_KEY_USAGE_CATEGORIZATION
	ADD CONSTRAINT  PK_KEY_USAGE_CAT PRIMARY KEY (X509_KEY_USG_CAT,X509_KEY_USG)       ;

ALTER TABLE ACCOUNT
	ADD CONSTRAINT FK_ACCOUNT_ACCT_RLM_ID FOREIGN KEY (ACCOUNT_REALM_ID) REFERENCES ACCOUNT_REALM (ACCOUNT_REALM_ID);

ALTER TABLE ACCOUNT
	ADD CONSTRAINT FK_ACCOUNT_ACCTROLE FOREIGN KEY (ACCOUNT_ROLE) REFERENCES VAL_ACCOUNT_ROLE (ACCOUNT_ROLE);

ALTER TABLE ACCOUNT
	ADD CONSTRAINT FK_ACCOUNT_COMPANY_PERSON FOREIGN KEY (COMPANY_ID, PERSON_ID) REFERENCES PERSON_COMPANY (COMPANY_ID, PERSON_ID)  DEFERRABLE;

ALTER TABLE ACCOUNT
	ADD CONSTRAINT FK_ACCOUNT_PRSN_CMPY_ACCT FOREIGN KEY (PERSON_ID, COMPANY_ID, ACCOUNT_REALM_ID) REFERENCES PERSON_ACCOUNT_REALM_COMPANY (PERSON_ID, COMPANY_ID, ACCOUNT_REALM_ID)  DEFERRABLE;

ALTER TABLE ACCOUNT
	ADD CONSTRAINT FK_ACCT_STAT_ID FOREIGN KEY (ACCOUNT_STATUS) REFERENCES VAL_PERSON_STATUS (PERSON_STATUS)  ;

ALTER TABLE ACCOUNT
	ADD CONSTRAINT FK_ACCT_VACCT_TYPE FOREIGN KEY (ACCOUNT_TYPE) REFERENCES VAL_ACCOUNT_TYPE (ACCOUNT_TYPE)  ;

ALTER TABLE ACCOUNT_ASSIGND_CERT
	ADD CONSTRAINT FK_ACCT_ASDCRT_ACCTID FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID)  ;

ALTER TABLE ACCOUNT_ASSIGND_CERT
	ADD CONSTRAINT FK_X509_KEY_USG_ATTRBT_USR FOREIGN KEY (X509_CERT_ID, X509_KEY_USG) REFERENCES X509_KEY_USAGE_ATTRIBUTE (X509_CERT_ID, X509_KEY_USG)  ;

ALTER TABLE ACCOUNT_ASSIGND_CERT
	ADD CONSTRAINT FK_KEY_USG_REASON_FOR_ASSGN_U FOREIGN KEY (KEY_USAGE_REASON_FOR_ASSIGN) REFERENCES VAL_KEY_USG_REASON_FOR_ASSGN (KEY_USAGE_REASON_FOR_ASSIGN)  ;

ALTER TABLE ACCOUNT_AUTH_LOG
	ADD CONSTRAINT FK_AUTH_RESOURCE FOREIGN KEY (AUTH_RESOURCE) REFERENCES VAL_AUTH_RESOURCE (AUTH_RESOURCE)  ;

ALTER TABLE ACCOUNT_AUTH_LOG
	ADD CONSTRAINT FK_ACCTAUTHLOG_ACCID FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID)  ;

ALTER TABLE ACCOUNT_COLLECTION
	ADD CONSTRAINT FK_ACCTCOL_USRCOLTYP FOREIGN KEY (ACCOUNT_COLLECTION_TYPE) REFERENCES VAL_ACCOUNT_COLLECTION_TYPE (ACCOUNT_COLLECTION_TYPE)  ;

ALTER TABLE ACCOUNT_COLLECTION_ACCOUNT
	ADD CONSTRAINT FK_ACOL_ACCOUNT_ID FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID)  ;

ALTER TABLE ACCOUNT_COLLECTION_ACCOUNT
	ADD CONSTRAINT FK_ACCTCOL_USR_UCOL_ID FOREIGN KEY (ACCOUNT_COLLECTION_ID) REFERENCES ACCOUNT_COLLECTION (ACCOUNT_COLLECTION_ID)  ;

ALTER TABLE ACCOUNT_COLLECTION_HIER
	ADD CONSTRAINT FK_ACCTCOLHIER_ACCTCOLID FOREIGN KEY (ACCOUNT_COLLECTION_ID) REFERENCES ACCOUNT_COLLECTION (ACCOUNT_COLLECTION_ID)  ;

ALTER TABLE ACCOUNT_COLLECTION_HIER
	ADD CONSTRAINT FK_ACCTCOLHIER_CLDACCTCOLID FOREIGN KEY (CHILD_ACCOUNT_COLLECTION_ID) REFERENCES ACCOUNT_COLLECTION (ACCOUNT_COLLECTION_ID)  ;

ALTER TABLE ACCOUNT_PASSWORD
	ADD CONSTRAINT FK_SYSTEM_PASSWORD FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID)  ;

ALTER TABLE ACCOUNT_PASSWORD
	ADD CONSTRAINT FK_SYSTEM_PASS_REF_VPASSTYPE FOREIGN KEY (PASSWORD_TYPE) REFERENCES VAL_PASSWORD_TYPE (PASSWORD_TYPE)  ;

ALTER TABLE ACCOUNT_REALM_ACCT_COLL_TYPE
	ADD CONSTRAINT FK_ACCT_REALM_ACCT_COLL_TYP FOREIGN KEY (ACCOUNT_COLLECTION_TYPE) REFERENCES VAL_ACCOUNT_COLLECTION_TYPE (ACCOUNT_COLLECTION_TYPE);

ALTER TABLE ACCOUNT_REALM_ACCT_COLL_TYPE
	ADD CONSTRAINT FK_ACCT_REALM_ACCT_COLL_ARID FOREIGN KEY (ACCOUNT_REALM_ID) REFERENCES ACCOUNT_REALM (ACCOUNT_REALM_ID);

ALTER TABLE ACCOUNT_REALM_COMPANY
	ADD CONSTRAINT FK_ACCT_RLM_CMPY_CMPY_ID FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE ACCOUNT_REALM_COMPANY
	ADD CONSTRAINT FK_ACCT_RLM_CMPY_ACTRLMID FOREIGN KEY (ACCOUNT_REALM_ID) REFERENCES ACCOUNT_REALM (ACCOUNT_REALM_ID);

ALTER TABLE ACCOUNT_SSH_KEY
	ADD CONSTRAINT FK_ACCOUNT_SSH_KEY_SSH_KEY_ID FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID);

ALTER TABLE ACCOUNT_SSH_KEY
	ADD CONSTRAINT FK_ACCOUNT_SSH_KEY_ACCOUNT_ID FOREIGN KEY (SSH_KEY_ID) REFERENCES SSH_KEY (SSH_KEY_ID);

ALTER TABLE ACCOUNT_TOKEN
	ADD CONSTRAINT FK_ACCT_REF_ACCT_TOKEN FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID)  ;

ALTER TABLE ACCOUNT_TOKEN
	ADD CONSTRAINT FK_ACCT_TOKEN_REF_TOKEN FOREIGN KEY (TOKEN_ID) REFERENCES TOKEN (TOKEN_ID)  ;

ALTER TABLE ACCOUNT_UNIX_INFO
	ADD CONSTRAINT FK_AUXIFO_ACCT_ID FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID)  ;

ALTER TABLE ACCOUNT_UNIX_INFO
	ADD CONSTRAINT FK_AUXIFO_UNXGRP_ACCTCOLID FOREIGN KEY (UNIX_GROUP_ACCT_COLLECTION_ID) REFERENCES ACCOUNT_COLLECTION (ACCOUNT_COLLECTION_ID);

ALTER TABLE ACCOUNT_UNIX_INFO
	ADD CONSTRAINT FK_ACCT_UNX_INFO_AC_ACCT FOREIGN KEY (UNIX_GROUP_ACCT_COLLECTION_ID, ACCOUNT_ID) REFERENCES ACCOUNT_COLLECTION_ACCOUNT (ACCOUNT_COLLECTION_ID, ACCOUNT_ID);

ALTER TABLE APPAAL_INSTANCE
	ADD CONSTRAINT FK_APPAAL_I_FK_APPLIC_SVCENV FOREIGN KEY (SERVICE_ENVIRONMENT_ID) REFERENCES SERVICE_ENVIRONMENT (SERVICE_ENVIRONMENT_ID)  ;

ALTER TABLE APPAAL_INSTANCE
	ADD CONSTRAINT FK_APPAAL_REF_APPAAL_INST FOREIGN KEY (APPAAL_ID) REFERENCES APPAAL (APPAAL_ID)  ;

ALTER TABLE APPAAL_INSTANCE
	ADD CONSTRAINT FK_APPAAL_I_REFERENCE_FO_ACCTI FOREIGN KEY (FILE_OWNER_ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID)  ;

ALTER TABLE APPAAL_INSTANCE
	ADD CONSTRAINT FK_APPAAL_INST_FILGRPACCTCOLID FOREIGN KEY (FILE_GROUP_ACCT_COLLECTION_ID) REFERENCES ACCOUNT_COLLECTION (ACCOUNT_COLLECTION_ID);

ALTER TABLE APPAAL_INSTANCE_DEVICE_COLL
	ADD CONSTRAINT FK_APPAALINS_REF_APPAALINSDCOL FOREIGN KEY (APPAAL_INSTANCE_ID) REFERENCES APPAAL_INSTANCE (APPAAL_INSTANCE_ID)  ;

ALTER TABLE APPAAL_INSTANCE_DEVICE_COLL
	ADD CONSTRAINT FK_DEVCOLL_REF_APPAALINSTDCOLL FOREIGN KEY (DEVICE_COLLECTION_ID) REFERENCES DEVICE_COLLECTION (DEVICE_COLLECTION_ID)  ;

ALTER TABLE APPAAL_INSTANCE_PROPERTY
	ADD CONSTRAINT FK_APPAALINSTPROP_REF_VAPPKEY FOREIGN KEY (APP_KEY) REFERENCES VAL_APP_KEY (APP_KEY)  ;

ALTER TABLE APPAAL_INSTANCE_PROPERTY
	ADD CONSTRAINT FK_APPAALINS_REF_APPAALINSPROP FOREIGN KEY (APPAAL_INSTANCE_ID) REFERENCES APPAAL_INSTANCE (APPAAL_INSTANCE_ID)  ;

ALTER TABLE APPAAL_INSTANCE_PROPERTY
	ADD CONSTRAINT FK_APALINSTPRP_ENC_ID_ID FOREIGN KEY (ENCRYPTION_KEY_ID) REFERENCES ENCRYPTION_KEY (ENCRYPTION_KEY_ID)  ;

ALTER TABLE ASSET
	ADD CONSTRAINT FK_ASSET_CONTRACT_ID FOREIGN KEY (CONTRACT_ID) REFERENCES CONTRACT (CONTRACT_ID);

ALTER TABLE ASSET
	ADD CONSTRAINT FK_ASSET_OWNSHP_STAT FOREIGN KEY (OWNERSHIP_STATUS) REFERENCES VAL_OWNERSHIP_STATUS (OWNERSHIP_STATUS);

ALTER TABLE BADGE
	ADD CONSTRAINT FK_BADGE_BADGE_TYPE FOREIGN KEY (BADGE_TYPE_ID) REFERENCES BADGE_TYPE (BADGE_TYPE_ID)  ;

ALTER TABLE BADGE
	ADD CONSTRAINT FK_BADGE_VBADGESTATUS FOREIGN KEY (BADGE_STATUS) REFERENCES VAL_BADGE_STATUS (BADGE_STATUS)  ;

ALTER TABLE CHASSIS_LOCATION
	ADD CONSTRAINT FK_CHAS_LOC_DT_MODULE FOREIGN KEY (CHASSIS_DEVICE_TYPE_ID, DEVICE_TYPE_MODULE_NAME) REFERENCES DEVICE_TYPE_MODULE (DEVICE_TYPE_ID, DEVICE_TYPE_MODULE_NAME);

ALTER TABLE CHASSIS_LOCATION
	ADD CONSTRAINT FK_CHASS_LOC_MOD_DEV_TYP_ID FOREIGN KEY (MODULE_DEVICE_TYPE_ID) REFERENCES DEVICE_TYPE (DEVICE_TYPE_ID);

ALTER TABLE CHASSIS_LOCATION
	ADD CONSTRAINT FK_CHASS_LOC_CHASS_DEVID FOREIGN KEY (CHASSIS_DEVICE_ID) REFERENCES DEVICE (DEVICE_ID)  DEFERRABLE;

ALTER TABLE CHASSIS_LOCATION
	ADD CONSTRAINT FK_DTYP_MOD_DEV_CHASS_LOCATION FOREIGN KEY (MODULE_DEVICE_TYPE_ID, CHASSIS_DEVICE_TYPE_ID, DEVICE_TYPE_MODULE_NAME) REFERENCES DEVICE_TYPE_MODULE_DEVICE_TYPE (MODULE_DEVICE_TYPE_ID, DEVICE_TYPE_ID, DEVICE_TYPE_MODULE_NAME);

ALTER TABLE CIRCUIT
	ADD CONSTRAINT FK_CIRCUIT_VEND_COMPANYID FOREIGN KEY (VENDOR_COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE CIRCUIT
	ADD CONSTRAINT FK_CIRCUIT_ALOC_COMPANYID FOREIGN KEY (ALOC_LEC_COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE CIRCUIT
	ADD CONSTRAINT FK_CIRCUIT_ZLOC_COMPANY_ID FOREIGN KEY (ZLOC_LEC_COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE CIRCUIT
	ADD CONSTRAINT FK_CIRCUIT_REF_END1CIRCUIT FOREIGN KEY (ALOC_PARENT_CIRCUIT_ID) REFERENCES CIRCUIT (CIRCUIT_ID)  ;

ALTER TABLE CIRCUIT
	ADD CONSTRAINT FK_CIRCUIT_REF_END2CIRCUIT FOREIGN KEY (ZLOC_PARENT_CIRCUIT_ID) REFERENCES CIRCUIT (CIRCUIT_ID)  ;

ALTER TABLE COMPANY
	ADD CONSTRAINT FK_COMPANY_PARENT_COMPANY_ID FOREIGN KEY (PARENT_COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE COMPANY_TYPE
	ADD CONSTRAINT FK_COMPANY_TYPE_COMPANY_ID FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE COMPANY_TYPE
	ADD CONSTRAINT FK_COMPANY_TYPE_VAL FOREIGN KEY (COMPANY_TYPE) REFERENCES VAL_COMPANY_TYPE (COMPANY_TYPE);

ALTER TABLE CONTRACT
	ADD CONSTRAINT FK_CONTRACT_COMPANY_ID FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE CONTRACT_TYPE
	ADD CONSTRAINT FK_CONTRACT_CONTRACT_ID FOREIGN KEY (CONTRACT_ID) REFERENCES CONTRACT (CONTRACT_ID);

ALTER TABLE CONTRACT_TYPE
	ADD CONSTRAINT FK_CONTRACT_CONTRACT_TYPE FOREIGN KEY (CONTRACT_TYPE) REFERENCES VAL_CONTRACT_TYPE (CONTRACT_TYPE);

ALTER TABLE DEPARTMENT
	ADD CONSTRAINT FK_DEPT_USR_COL_ID FOREIGN KEY (ACCOUNT_COLLECTION_ID) REFERENCES ACCOUNT_COLLECTION (ACCOUNT_COLLECTION_ID);

ALTER TABLE DEPARTMENT
	ADD CONSTRAINT FK_DEPT_MGR_ACCT_ID FOREIGN KEY (MANAGER_ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID);

ALTER TABLE DEPARTMENT
	ADD CONSTRAINT FK_DEPT_BADGE_TYPE FOREIGN KEY (DEFAULT_BADGE_TYPE_ID) REFERENCES BADGE_TYPE (BADGE_TYPE_ID)  ;

ALTER TABLE DEPARTMENT
	ADD CONSTRAINT FK_DEPT_COMPANY FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID)  ;

ALTER TABLE DEVICE
	ADD CONSTRAINT FK_DEVICE_REFERENCE_VAL_DEVI FOREIGN KEY (AUTO_MGMT_PROTOCOL) REFERENCES VAL_DEVICE_AUTO_MGMT_PROTOCOL (AUTO_MGMT_PROTOCOL)  ;

ALTER TABLE DEVICE
	ADD CONSTRAINT FK_DEVICE_REF_PARENT_DEVICE FOREIGN KEY (PARENT_DEVICE_ID) REFERENCES DEVICE (DEVICE_ID)  ;

ALTER TABLE DEVICE
	ADD CONSTRAINT FK_DEVICE_REF_VOESYMBTRK FOREIGN KEY (VOE_SYMBOLIC_TRACK_ID) REFERENCES VOE_SYMBOLIC_TRACK (VOE_SYMBOLIC_TRACK_ID)  ;

ALTER TABLE DEVICE
	ADD CONSTRAINT FK_DEV_RACK_LOCATION_ID FOREIGN KEY (RACK_LOCATION_ID) REFERENCES RACK_LOCATION (RACK_LOCATION_ID);

ALTER TABLE DEVICE
	ADD CONSTRAINT FK_CHASLOC_CHASS_DEVID FOREIGN KEY (CHASSIS_LOCATION_ID) REFERENCES CHASSIS_LOCATION (CHASSIS_LOCATION_ID)  DEFERRABLE  INITIALLY IMMEDIATE;

ALTER TABLE DEVICE
	ADD CONSTRAINT FK_DEV_CHASS_LOC_ID_MOD_ENFC FOREIGN KEY (CHASSIS_LOCATION_ID, PARENT_DEVICE_ID, DEVICE_TYPE_ID) REFERENCES CHASSIS_LOCATION (CHASSIS_LOCATION_ID, CHASSIS_DEVICE_ID, MODULE_DEVICE_TYPE_ID)  DEFERRABLE  INITIALLY IMMEDIATE;

ALTER TABLE DEVICE
	ADD CONSTRAINT FK_DEVICE_COMPANY__ID FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE DEVICE
	ADD CONSTRAINT FK_DEVICE_ASSET_ID FOREIGN KEY (ASSET_ID) REFERENCES ASSET (ASSET_ID);

ALTER TABLE DEVICE
	ADD CONSTRAINT FK_DEVICE_FK_DEV_VAL_STAT FOREIGN KEY (DEVICE_STATUS) REFERENCES VAL_DEVICE_STATUS (DEVICE_STATUS)  ;

ALTER TABLE DEVICE
	ADD CONSTRAINT FK_DEVICE_DNSRECORD FOREIGN KEY (IDENTIFYING_DNS_RECORD_ID) REFERENCES DNS_RECORD (DNS_RECORD_ID)  ;

ALTER TABLE DEVICE
	ADD CONSTRAINT FK_DEV_OS_ID FOREIGN KEY (OPERATING_SYSTEM_ID) REFERENCES OPERATING_SYSTEM (OPERATING_SYSTEM_ID)  ;

ALTER TABLE DEVICE
	ADD CONSTRAINT FK_DEVICE_FK_DEV_V_SVCENV FOREIGN KEY (SERVICE_ENVIRONMENT_ID) REFERENCES SERVICE_ENVIRONMENT (SERVICE_ENVIRONMENT_ID)  ;

ALTER TABLE DEVICE
	ADD CONSTRAINT FK_DEVICE_FK_VOE FOREIGN KEY (VOE_ID) REFERENCES VOE (VOE_ID)  ;

ALTER TABLE DEVICE
	ADD CONSTRAINT FK_DEV_DEVTP_ID FOREIGN KEY (DEVICE_TYPE_ID) REFERENCES DEVICE_TYPE (DEVICE_TYPE_ID)  ;

ALTER TABLE DEVICE
	ADD CONSTRAINT FK_DEVICE_SITE_CODE FOREIGN KEY (SITE_CODE) REFERENCES SITE (SITE_CODE);

ALTER TABLE DEVICE_COLLECTION
	ADD CONSTRAINT FK_DEVC_DEVCTYP_ID FOREIGN KEY (DEVICE_COLLECTION_TYPE) REFERENCES VAL_DEVICE_COLLECTION_TYPE (DEVICE_COLLECTION_TYPE)  ;

ALTER TABLE DEVICE_COLLECTION_ASSIGND_CERT
	ADD CONSTRAINT FK_DEVCOLASCRT_DEVCOLID FOREIGN KEY (DEVICE_COLLECTION_ID) REFERENCES DEVICE_COLLECTION (DEVICE_COLLECTION_ID)  ;

ALTER TABLE DEVICE_COLLECTION_ASSIGND_CERT
	ADD CONSTRAINT FK_X509_CERTIFICATE_FILE_FMT FOREIGN KEY (X509_FILE_FORMAT) REFERENCES VAL_X509_CERTIFICATE_FILE_FMT (X509_FILE_FORMAT)  ;

ALTER TABLE DEVICE_COLLECTION_ASSIGND_CERT
	ADD CONSTRAINT FK_DEVCOLASCRT_FLOWNACCTID FOREIGN KEY (FILE_OWNER_ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID)  ;

ALTER TABLE DEVICE_COLLECTION_ASSIGND_CERT
	ADD CONSTRAINT FK_DEVCOL_ASSCRT_ACCTCOLID FOREIGN KEY (FILE_GROUP_ACCT_COLLECTION_ID) REFERENCES ACCOUNT_COLLECTION (ACCOUNT_COLLECTION_ID)  ;

ALTER TABLE DEVICE_COLLECTION_ASSIGND_CERT
	ADD CONSTRAINT FK_X509_KEY_USG_ATTRBT_DVC FOREIGN KEY (X509_CERT_ID, X509_KEY_USG) REFERENCES X509_KEY_USAGE_ATTRIBUTE (X509_CERT_ID, X509_KEY_USG)  ;

ALTER TABLE DEVICE_COLLECTION_ASSIGND_CERT
	ADD CONSTRAINT FK_KEY_USG_REASON_FOR_ASSNG_D FOREIGN KEY (KEY_USAGE_REASON_FOR_ASSIGN) REFERENCES VAL_KEY_USG_REASON_FOR_ASSGN (KEY_USAGE_REASON_FOR_ASSIGN)  ;

ALTER TABLE DEVICE_COLLECTION_DEVICE
	ADD CONSTRAINT FK_DEVCOLLDEV_DEV_ID FOREIGN KEY (DEVICE_ID) REFERENCES DEVICE (DEVICE_ID)  ;

ALTER TABLE DEVICE_COLLECTION_DEVICE
	ADD CONSTRAINT FK_DEVCOLLDEV_DEV_COLID FOREIGN KEY (DEVICE_COLLECTION_ID) REFERENCES DEVICE_COLLECTION (DEVICE_COLLECTION_ID)  ;

ALTER TABLE DEVICE_COLLECTION_HIER
	ADD CONSTRAINT FK_DEVCOLLHIER_DEVCOL_ID FOREIGN KEY (DEVICE_COLLECTION_ID) REFERENCES DEVICE_COLLECTION (DEVICE_COLLECTION_ID)  ;

ALTER TABLE DEVICE_COLLECTION_HIER
	ADD CONSTRAINT FK_DEVCOLLHIER_PDEVCOL_ID FOREIGN KEY (PARENT_DEVICE_COLLECTION_ID) REFERENCES DEVICE_COLLECTION (DEVICE_COLLECTION_ID)  ;

ALTER TABLE DEVICE_COLLECTION_SSH_KEY
	ADD CONSTRAINT FK_DEV_COLL_SSH_KEY_SSH_KEY FOREIGN KEY (SSH_KEY_ID) REFERENCES SSH_KEY (SSH_KEY_ID);

ALTER TABLE DEVICE_COLLECTION_SSH_KEY
	ADD CONSTRAINT FK_DEV_COLL_SSH_KEY_DEVCOLL FOREIGN KEY (DEVICE_COLLECTION_ID) REFERENCES DEVICE_COLLECTION (DEVICE_COLLECTION_ID);

ALTER TABLE DEVICE_COLLECTION_SSH_KEY
	ADD CONSTRAINT FK_DEV_COLL_SSH_KEY_ACCT_COL FOREIGN KEY (ACCOUNT_COLLECTION_ID) REFERENCES ACCOUNT_COLLECTION (ACCOUNT_COLLECTION_ID);

ALTER TABLE DEVICE_ENCAPSULATION_DOMAIN
	ADD CONSTRAINT FK_DEV_ENCAP_DOMAIN_DEVID FOREIGN KEY (DEVICE_ID) REFERENCES DEVICE (DEVICE_ID);

ALTER TABLE DEVICE_ENCAPSULATION_DOMAIN
	ADD CONSTRAINT FK_DEV_ENCAP_DOMAIN_ENCAPTYP FOREIGN KEY (ENCAPSULATION_TYPE) REFERENCES VAL_ENCAPSULATION_TYPE (ENCAPSULATION_TYPE);

ALTER TABLE DEVICE_ENCAPSULATION_DOMAIN
	ADD CONSTRAINT FK_DEV_ENCAP_DOMAIN_ENC_DOMTYP FOREIGN KEY (ENCAPSULATION_DOMAIN, ENCAPSULATION_TYPE) REFERENCES ENCAPSULATION_DOMAIN (ENCAPSULATION_DOMAIN, ENCAPSULATION_TYPE);

ALTER TABLE DEVICE_LAYER2_NETWORK
	ADD CONSTRAINT FK_DEVICE_L2_NET_DEVID FOREIGN KEY (DEVICE_ID) REFERENCES DEVICE (DEVICE_ID);

ALTER TABLE DEVICE_LAYER2_NETWORK
	ADD CONSTRAINT FK_DEVICE_L2_NET_L2NETID FOREIGN KEY (LAYER2_NETWORK_ID) REFERENCES LAYER2_NETWORK (LAYER2_NETWORK_ID);

ALTER TABLE DEVICE_MANAGEMENT_CONTROLLER
	ADD CONSTRAINT FK_DVC_MGMT_CTRL_MGR_DEV_ID FOREIGN KEY (MANAGER_DEVICE_ID) REFERENCES DEVICE (DEVICE_ID);

ALTER TABLE DEVICE_MANAGEMENT_CONTROLLER
	ADD CONSTRAINT FK_DEV_MGMT_CTLR_DEV_ID FOREIGN KEY (DEVICE_ID) REFERENCES DEVICE (DEVICE_ID);

ALTER TABLE DEVICE_MANAGEMENT_CONTROLLER
	ADD CONSTRAINT FK_DEV_MGMT_CNTRL_VAL_CTRL_TYP FOREIGN KEY (DEVICE_MGMT_CONTROL_TYPE) REFERENCES VAL_DEVICE_MGMT_CTRL_TYPE (DEVICE_MGMT_CONTROL_TYPE);

ALTER TABLE DEVICE_NOTE
	ADD CONSTRAINT FK_DEVICE_NOTE_DEVICE FOREIGN KEY (DEVICE_ID) REFERENCES DEVICE (DEVICE_ID)  ;

ALTER TABLE DEVICE_POWER_CONNECTION
	ADD CONSTRAINT FK_DEV_PS_DEV_POWER_CONN_RPC FOREIGN KEY (RPC_DEVICE_ID, RPC_POWER_INTERFACE_PORT) REFERENCES DEVICE_POWER_INTERFACE (DEVICE_ID, POWER_INTERFACE_PORT)  ;

ALTER TABLE DEVICE_POWER_CONNECTION
	ADD CONSTRAINT FK_DEV_PS_DEV_POWER_CONN_SRV FOREIGN KEY (DEVICE_ID, POWER_INTERFACE_PORT) REFERENCES DEVICE_POWER_INTERFACE (DEVICE_ID, POWER_INTERFACE_PORT)  ;

ALTER TABLE DEVICE_POWER_INTERFACE
	ADD CONSTRAINT FK_DEVICE_DEVICE_POWER_SUPP FOREIGN KEY (DEVICE_ID) REFERENCES DEVICE (DEVICE_ID)  ;

ALTER TABLE DEVICE_POWER_INTERFACE
	ADD CONSTRAINT FK_DEV_PWR_INT_PWR_PLUG FOREIGN KEY (POWER_PLUG_STYLE) REFERENCES VAL_POWER_PLUG_STYLE (POWER_PLUG_STYLE);

ALTER TABLE DEVICE_SSH_KEY
	ADD CONSTRAINT FK_DEV_SSH_KEY_DEVICE_ID FOREIGN KEY (SSH_KEY_ID) REFERENCES SSH_KEY (SSH_KEY_ID);

ALTER TABLE DEVICE_SSH_KEY
	ADD CONSTRAINT FK_DEV_SSH_KEY_SSH_KEY_ID FOREIGN KEY (DEVICE_ID) REFERENCES DEVICE (DEVICE_ID);

ALTER TABLE DEVICE_TICKET
	ADD CONSTRAINT FK_DEV_TKT_DEV_ID FOREIGN KEY (DEVICE_ID) REFERENCES DEVICE (DEVICE_ID);

ALTER TABLE DEVICE_TICKET
	ADD CONSTRAINT FK_DEV_TKT_TKT_SYSTEM FOREIGN KEY (TICKETING_SYSTEM_ID) REFERENCES TICKETING_SYSTEM (TICKETING_SYSTEM_ID);

ALTER TABLE DEVICE_TYPE
	ADD CONSTRAINT FK_DEVICE_T_FK_DEVICE_VAL_PROC FOREIGN KEY (PROCESSOR_ARCHITECTURE) REFERENCES VAL_PROCESSOR_ARCHITECTURE (PROCESSOR_ARCHITECTURE)  ;

ALTER TABLE DEVICE_TYPE
	ADD CONSTRAINT FK_DEVTYP_COMPANY FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE DEVICE_TYPE_MODULE
	ADD CONSTRAINT FK_DEVT_MOD_DEV_TYPE_ID FOREIGN KEY (DEVICE_TYPE_ID) REFERENCES DEVICE_TYPE (DEVICE_TYPE_ID);

ALTER TABLE DEVICE_TYPE_MODULE_DEVICE_TYPE
	ADD CONSTRAINT FK_DT_MOD_DEV_TYPE_DTMOD FOREIGN KEY (DEVICE_TYPE_ID, DEVICE_TYPE_MODULE_NAME) REFERENCES DEVICE_TYPE_MODULE (DEVICE_TYPE_ID, DEVICE_TYPE_MODULE_NAME);

ALTER TABLE DEVICE_TYPE_MODULE_DEVICE_TYPE
	ADD CONSTRAINT FK_DT_MOD_DEV_TYPE_MOD_DTID FOREIGN KEY (MODULE_DEVICE_TYPE_ID) REFERENCES DEVICE_TYPE (DEVICE_TYPE_ID);

ALTER TABLE DEVICE_TYPE_PHYS_PORT_TEMPLT
	ADD CONSTRAINT FK_DEVTPHYPRTTMPL_REF_VPRTPURP FOREIGN KEY (PORT_PURPOSE) REFERENCES VAL_PORT_PURPOSE (PORT_PURPOSE)  ;

ALTER TABLE DEVICE_TYPE_PHYS_PORT_TEMPLT
	ADD CONSTRAINT FK_DEVTYPE_REF_DEVTPHYSPRTTMPL FOREIGN KEY (DEVICE_TYPE_ID) REFERENCES DEVICE_TYPE (DEVICE_TYPE_ID)  ;

ALTER TABLE DEVICE_TYPE_PHYS_PORT_TEMPLT
	ADD CONSTRAINT FK_DT_PHS_PORT_TEMPLT_PORT_TYP FOREIGN KEY (PORT_TYPE) REFERENCES VAL_PORT_TYPE (PORT_TYPE);

ALTER TABLE DEVICE_TYPE_PHYS_PORT_TEMPLT
	ADD CONSTRAINT FK_DT_PHSPORT_TMP_V_PROTOCOL FOREIGN KEY (PORT_PROTOCOL) REFERENCES VAL_PORT_PROTOCOL (PORT_PROTOCOL);

ALTER TABLE DEVICE_TYPE_PHYS_PORT_TEMPLT
	ADD CONSTRAINT FK_DT_PHSPORT_TMPL_V_PORT_MEDM FOREIGN KEY (PORT_MEDIUM, PORT_PLUG_STYLE) REFERENCES VAL_PORT_MEDIUM (PORT_MEDIUM, PORT_PLUG_STYLE);

ALTER TABLE DEVICE_TYPE_PHYS_PORT_TEMPLT
	ADD CONSTRAINT FK_DT_PHSPORT_TMP_VAL_PRT_SPD FOREIGN KEY (PORT_SPEED) REFERENCES VAL_PORT_SPEED (PORT_SPEED);

ALTER TABLE DEVICE_TYPE_POWER_PORT_TEMPLT
	ADD CONSTRAINT FK_DEV_PPORT_V_PWR_PLUG_STYLE FOREIGN KEY (POWER_PLUG_STYLE) REFERENCES VAL_POWER_PLUG_STYLE (POWER_PLUG_STYLE)  ;

ALTER TABLE DEVICE_TYPE_POWER_PORT_TEMPLT
	ADD CONSTRAINT FK_DEV_TYPE_DEV_PWR_PRT_TMPL FOREIGN KEY (DEVICE_TYPE_ID) REFERENCES DEVICE_TYPE (DEVICE_TYPE_ID)  ;

ALTER TABLE DNS_CHANGE_RECORD
	ADD CONSTRAINT FK_DNS_CHG_DNS_DOMAIN FOREIGN KEY (DNS_DOMAIN_ID) REFERENCES DNS_DOMAIN (DNS_DOMAIN_ID);

ALTER TABLE DNS_DOMAIN
	ADD CONSTRAINT FK_DNSDOM_DNSDOM_ID FOREIGN KEY (PARENT_DNS_DOMAIN_ID) REFERENCES DNS_DOMAIN (DNS_DOMAIN_ID)  ;

ALTER TABLE DNS_DOMAIN
	ADD CONSTRAINT FK_DNS_DOM_DNS_DOM_TYP FOREIGN KEY (DNS_DOMAIN_TYPE) REFERENCES VAL_DNS_DOMAIN_TYPE (DNS_DOMAIN_TYPE);

ALTER TABLE DNS_RECORD
	ADD CONSTRAINT FK_DNSREC_REF_DNS_REF_ID FOREIGN KEY (DNS_VALUE_RECORD_ID) REFERENCES DNS_RECORD (DNS_RECORD_ID)  ;

ALTER TABLE DNS_RECORD
	ADD CONSTRAINT FK_DNS_RECORD_VDNSCLASS FOREIGN KEY (DNS_CLASS) REFERENCES VAL_DNS_CLASS (DNS_CLASS)  ;

ALTER TABLE DNS_RECORD
	ADD CONSTRAINT FK_DNSREC_VDNSSRVSRVC FOREIGN KEY (DNS_SRV_SERVICE) REFERENCES VAL_DNS_SRV_SERVICE (DNS_SRV_SERVICE)  ;

ALTER TABLE DNS_RECORD
	ADD CONSTRAINT FK_DNSRECORD_VDNSTYPE FOREIGN KEY (DNS_TYPE) REFERENCES VAL_DNS_TYPE (DNS_TYPE)  ;

ALTER TABLE DNS_RECORD
	ADD CONSTRAINT FK_DNSRECORD_DNSRECORD FOREIGN KEY (REFERENCE_DNS_RECORD_ID) REFERENCES DNS_RECORD (DNS_RECORD_ID)  ;

ALTER TABLE DNS_RECORD
	ADD CONSTRAINT FK_DNSID_DNSDOM_ID FOREIGN KEY (DNS_DOMAIN_ID) REFERENCES DNS_DOMAIN (DNS_DOMAIN_ID)  ;

ALTER TABLE DNS_RECORD
	ADD CONSTRAINT FK_DNSID_NBLK_ID FOREIGN KEY (NETBLOCK_ID) REFERENCES NETBLOCK (NETBLOCK_ID)  ;

ALTER TABLE DNS_RECORD_RELATION
	ADD CONSTRAINT FK_DNSREC_REF_VDNSRECRLTNTYPE FOREIGN KEY (DNS_RECORD_RELATION_TYPE) REFERENCES VAL_DNS_RECORD_RELATION_TYPE (DNS_RECORD_RELATION_TYPE)  ;

ALTER TABLE DNS_RECORD_RELATION
	ADD CONSTRAINT FK_DNS_REC_REF_DNS_REC_RLTN FOREIGN KEY (DNS_RECORD_ID) REFERENCES DNS_RECORD (DNS_RECORD_ID)  ;

ALTER TABLE DNS_RECORD_RELATION
	ADD CONSTRAINT FK_DNSREC_REF_DNSRECRLTN_RL_ID FOREIGN KEY (RELATED_DNS_RECORD_ID) REFERENCES DNS_RECORD (DNS_RECORD_ID)  ;

ALTER TABLE ENCAPSULATION_DOMAIN
	ADD CONSTRAINT FK_ENCAP_DOMAIN_ENCAP_TYP FOREIGN KEY (ENCAPSULATION_TYPE) REFERENCES VAL_ENCAPSULATION_TYPE (ENCAPSULATION_TYPE);

ALTER TABLE ENCAPSULATION_RANGE
	ADD CONSTRAINT FK_ENCAP_RANGE_PARENT_ENCAP_ID FOREIGN KEY (PARENT_ENCAPSULATION_RANGE_ID) REFERENCES ENCAPSULATION_RANGE (ENCAPSULATION_RANGE_ID)  ;

ALTER TABLE ENCAPSULATION_RANGE
	ADD CONSTRAINT FK_ENCAP_RANGE_SITECODE FOREIGN KEY (SITE_CODE) REFERENCES SITE (SITE_CODE)  ;

ALTER TABLE ENCRYPTION_KEY
	ADD CONSTRAINT FK_ENCKEY_ENCKEYPURPOSE_VAL FOREIGN KEY (ENCRYPTION_KEY_PURPOSE, ENCRYPTION_KEY_PURPOSE_VERSION) REFERENCES VAL_ENCRYPTION_KEY_PURPOSE (ENCRYPTION_KEY_PURPOSE, ENCRYPTION_KEY_PURPOSE_VERSION)  ;

ALTER TABLE ENCRYPTION_KEY
	ADD CONSTRAINT FK_ENCKEY_ENCMETHOD_VAL FOREIGN KEY (ENCRYPTION_METHOD) REFERENCES VAL_ENCRYPTION_METHOD (ENCRYPTION_METHOD)  ;

ALTER TABLE IP_GROUP
	ADD CONSTRAINT FK_IP_GRP_IP_GRP_PROTO FOREIGN KEY (IP_GROUP_PROTOCOL) REFERENCES VAL_IP_GROUP_PROTOCOL (IP_GROUP_PROTOCOL);

ALTER TABLE IP_GROUP
	ADD CONSTRAINT FK_IP_PROTO_NETBLK_COLL_ID FOREIGN KEY (NETBLOCK_COLLECTION_ID) REFERENCES NETBLOCK_COLLECTION (NETBLOCK_COLLECTION_ID);

ALTER TABLE IP_GROUP_NETWORK_INTERFACE
	ADD CONSTRAINT FK_IP_GRP_NETINT_IP_GRP_ID FOREIGN KEY (IP_GROUP_ID) REFERENCES IP_GROUP (IP_GROUP_ID);

ALTER TABLE IP_GROUP_NETWORK_INTERFACE
	ADD CONSTRAINT FK_IPGRP_NETINT_NETINT_ID FOREIGN KEY (NETWORK_INTERFACE_ID) REFERENCES NETWORK_INTERFACE (NETWORK_INTERFACE_ID);

ALTER TABLE KLOGIN
	ADD CONSTRAINT FK_KLGN_ACCT_ID FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID)  ;

ALTER TABLE KLOGIN
	ADD CONSTRAINT FK_KLGN_ACCT_DST_ID FOREIGN KEY (DEST_ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID)  ;

ALTER TABLE KLOGIN
	ADD CONSTRAINT FK_KLOGIN_REALMID FOREIGN KEY (KRB_REALM_ID) REFERENCES KERBEROS_REALM (KRB_REALM_ID)  ;

ALTER TABLE KLOGIN
	ADD CONSTRAINT FK_KLOGIN_REF_ACCT_COL_ID FOREIGN KEY (ACCOUNT_COLLECTION_ID) REFERENCES ACCOUNT_COLLECTION (ACCOUNT_COLLECTION_ID)  ;

ALTER TABLE KLOGIN_MCLASS
	ADD CONSTRAINT FK_KLGNMCL_KLOGN_ID FOREIGN KEY (KLOGIN_ID) REFERENCES KLOGIN (KLOGIN_ID)  ;

ALTER TABLE KLOGIN_MCLASS
	ADD CONSTRAINT FK_KLGNMCL_DEVCOLL_ID FOREIGN KEY (DEVICE_COLLECTION_ID) REFERENCES DEVICE_COLLECTION (DEVICE_COLLECTION_ID)  ;

ALTER TABLE LAYER1_CONNECTION
	ADD CONSTRAINT FK_LAYER1_C_REF_V_BAUD FOREIGN KEY (BAUD) REFERENCES VAL_BAUD (BAUD)  ;

ALTER TABLE LAYER1_CONNECTION
	ADD CONSTRAINT FK_LAYER1_C_REF_V_DATA_BITS FOREIGN KEY (DATA_BITS) REFERENCES VAL_DATA_BITS (DATA_BITS)  ;

ALTER TABLE LAYER1_CONNECTION
	ADD CONSTRAINT FK_LAYER1_C_REF_V_FLOW_CNTRL FOREIGN KEY (FLOW_CONTROL) REFERENCES VAL_FLOW_CONTROL (FLOW_CONTROL)  ;

ALTER TABLE LAYER1_CONNECTION
	ADD CONSTRAINT FK_LAYER1_C_REF_V_PARITY FOREIGN KEY (PARITY) REFERENCES VAL_PARITY (PARITY)  ;

ALTER TABLE LAYER1_CONNECTION
	ADD CONSTRAINT FK_LAYER1_C_REF_V_STOP_BITS FOREIGN KEY (STOP_BITS) REFERENCES VAL_STOP_BITS (STOP_BITS)  ;

ALTER TABLE LAYER1_CONNECTION
	ADD CONSTRAINT FK_L1CONN_REF_DEVICE FOREIGN KEY (TCPSRV_DEVICE_ID) REFERENCES DEVICE (DEVICE_ID)  ;

ALTER TABLE LAYER1_CONNECTION
	ADD CONSTRAINT FK_L1CONN_CIRCUIT_ID FOREIGN KEY (CIRCUIT_ID) REFERENCES CIRCUIT (CIRCUIT_ID)  ;

ALTER TABLE LAYER1_CONNECTION
	ADD CONSTRAINT FK_LAYER1_CNCT_PHYS_PORT1 FOREIGN KEY (PHYSICAL_PORT1_ID) REFERENCES PHYSICAL_PORT (PHYSICAL_PORT_ID)  ;

ALTER TABLE LAYER1_CONNECTION
	ADD CONSTRAINT FK_LAYER1_CNCT_PHYS_PORT2 FOREIGN KEY (PHYSICAL_PORT2_ID) REFERENCES PHYSICAL_PORT (PHYSICAL_PORT_ID)  ;

ALTER TABLE LAYER2_CONNECTION
	ADD CONSTRAINT FK_L2_CONN_L1PORT FOREIGN KEY (LOGICAL_PORT1_ID) REFERENCES LOGICAL_PORT (LOGICAL_PORT_ID);

ALTER TABLE LAYER2_CONNECTION
	ADD CONSTRAINT FK_L2_CONN_L2PORT FOREIGN KEY (LOGICAL_PORT2_ID) REFERENCES LOGICAL_PORT (LOGICAL_PORT_ID);

ALTER TABLE LAYER2_CONNECTION_L2_NETWORK
	ADD CONSTRAINT FK_L2CL2N_L2NET_ID_ENCAP_TYP FOREIGN KEY (LAYER2_NETWORK_ID, ENCAPSULATION_TYPE) REFERENCES LAYER2_NETWORK (LAYER2_NETWORK_ID, ENCAPSULATION_TYPE);

ALTER TABLE LAYER2_CONNECTION_L2_NETWORK
	ADD CONSTRAINT FK_L2C_L2N_ENCAP_MODE_TYPE FOREIGN KEY (ENCAPSULATION_MODE, ENCAPSULATION_TYPE) REFERENCES VAL_ENCAPSULATION_MODE (ENCAPSULATION_MODE, ENCAPSULATION_TYPE);

ALTER TABLE LAYER2_CONNECTION_L2_NETWORK
	ADD CONSTRAINT FK_L2C_L2N_L2CONNID FOREIGN KEY (LAYER2_CONNECTION_ID) REFERENCES LAYER2_CONNECTION (LAYER2_CONNECTION_ID);

ALTER TABLE LAYER2_CONNECTION_L2_NETWORK
	ADD CONSTRAINT FK_L2C_L2N_L2NETID FOREIGN KEY (LAYER2_NETWORK_ID) REFERENCES LAYER2_NETWORK (LAYER2_NETWORK_ID);

ALTER TABLE LAYER2_NETWORK
	ADD CONSTRAINT FK_L2_NET_ENCAP_DOMAIN FOREIGN KEY (ENCAPSULATION_DOMAIN, ENCAPSULATION_TYPE) REFERENCES ENCAPSULATION_DOMAIN (ENCAPSULATION_DOMAIN, ENCAPSULATION_TYPE);

ALTER TABLE LAYER2_NETWORK
	ADD CONSTRAINT FK_L2_NET_ENCAP_RANGE_ID FOREIGN KEY (ENCAPSULATION_RANGE_ID) REFERENCES ENCAPSULATION_RANGE (ENCAPSULATION_RANGE_ID);

ALTER TABLE LAYER3_NETWORK
	ADD CONSTRAINT FK_L3NET_L2NET FOREIGN KEY (LAYER2_NETWORK_ID) REFERENCES LAYER2_NETWORK (LAYER2_NETWORK_ID);

ALTER TABLE LAYER3_NETWORK
	ADD CONSTRAINT FK_L3NET_RNDV_PT_NBLK_ID FOREIGN KEY (RENDEVOUS_POINT_NETBLOCK_ID) REFERENCES NETBLOCK (NETBLOCK_ID);

ALTER TABLE LAYER3_NETWORK
	ADD CONSTRAINT FK_L3_NET_DEF_GATE_NBID FOREIGN KEY (DEFAULT_GATEWAY_NETBLOCK_ID) REFERENCES NETBLOCK (NETBLOCK_ID);

ALTER TABLE LAYER3_NETWORK
	ADD CONSTRAINT FK_LAYER3_NETWORK_NETBLOCK_ID FOREIGN KEY (NETBLOCK_ID) REFERENCES NETBLOCK (NETBLOCK_ID);

ALTER TABLE LOGICAL_PORT
	ADD CONSTRAINT FK_LOGICAL_PORT_LG_PORT_TYPE FOREIGN KEY (LOGICAL_PORT_TYPE) REFERENCES VAL_LOGICAL_PORT_TYPE (LOGICAL_PORT_TYPE);

ALTER TABLE LOGICAL_PORT
	ADD CONSTRAINT FK_LOGICAL_PORT_PARENT_ID FOREIGN KEY (PARENT_LOGICAL_PORT_ID) REFERENCES LOGICAL_PORT (LOGICAL_PORT_ID);

ALTER TABLE MLAG_PEERING
	ADD CONSTRAINT FK_MLAG_PEERING_DEVID1 FOREIGN KEY (DEVICE1_ID) REFERENCES DEVICE (DEVICE_ID);

ALTER TABLE MLAG_PEERING
	ADD CONSTRAINT FK_MLAG_PEERING_DEVID2 FOREIGN KEY (DEVICE2_ID) REFERENCES DEVICE (DEVICE_ID);

ALTER TABLE NETBLOCK
	ADD CONSTRAINT FK_NETBLOCK_COMPANY FOREIGN KEY (NIC_COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE NETBLOCK
	ADD CONSTRAINT FK_NBLK_IP_UNIVERSE_ID FOREIGN KEY (IP_UNIVERSE_ID) REFERENCES IP_UNIVERSE (IP_UNIVERSE_ID);

ALTER TABLE NETBLOCK
	ADD CONSTRAINT FK_NETBLOCK_NBLK_TYP FOREIGN KEY (NETBLOCK_TYPE) REFERENCES VAL_NETBLOCK_TYPE (NETBLOCK_TYPE);

ALTER TABLE NETBLOCK
	ADD CONSTRAINT FK_NETBLOCK_V_NETBLOCK_STAT FOREIGN KEY (NETBLOCK_STATUS) REFERENCES VAL_NETBLOCK_STATUS (NETBLOCK_STATUS)  ;

ALTER TABLE NETBLOCK
	ADD CONSTRAINT FK_NETBLK_NETBLK_PARID FOREIGN KEY (PARENT_NETBLOCK_ID) REFERENCES NETBLOCK (NETBLOCK_ID)  DEFERRABLE  INITIALLY DEFERRED  ;

ALTER TABLE NETBLOCK_COLLECTION
	ADD CONSTRAINT FK_NBLK_COLL_V_NBLK_C_TYP FOREIGN KEY (NETBLOCK_COLLECTION_TYPE) REFERENCES VAL_NETBLOCK_COLLECTION_TYPE (NETBLOCK_COLLECTION_TYPE);

ALTER TABLE NETBLOCK_COLLECTION_HIER
	ADD CONSTRAINT FK_NBLK_C_HIER_CHLD_NC FOREIGN KEY (CHILD_NETBLOCK_COLLECTION_ID) REFERENCES NETBLOCK_COLLECTION (NETBLOCK_COLLECTION_ID);

ALTER TABLE NETBLOCK_COLLECTION_HIER
	ADD CONSTRAINT FK_NBLK_C_HIER_PRNT_NC FOREIGN KEY (NETBLOCK_COLLECTION_ID) REFERENCES NETBLOCK_COLLECTION (NETBLOCK_COLLECTION_ID);

ALTER TABLE NETBLOCK_COLLECTION_NETBLOCK
	ADD CONSTRAINT FK_NBLK_COL_NBLK_NBLKID FOREIGN KEY (NETBLOCK_ID) REFERENCES NETBLOCK (NETBLOCK_ID);

ALTER TABLE NETBLOCK_COLLECTION_NETBLOCK
	ADD CONSTRAINT FK_NBLK_COL_NBLK_NBCOLID FOREIGN KEY (NETBLOCK_COLLECTION_ID) REFERENCES NETBLOCK_COLLECTION (NETBLOCK_COLLECTION_ID);

ALTER TABLE NETWORK_INTERFACE
	ADD CONSTRAINT FK_NETINT_DEVICE_ID FOREIGN KEY (DEVICE_ID) REFERENCES DEVICE (DEVICE_ID)  ;

ALTER TABLE NETWORK_INTERFACE
	ADD CONSTRAINT FK_NETINT_REF_PARENTNETINT FOREIGN KEY (PARENT_NETWORK_INTERFACE_ID) REFERENCES NETWORK_INTERFACE (NETWORK_INTERFACE_ID)  ;

ALTER TABLE NETWORK_INTERFACE
	ADD CONSTRAINT FK_NETINT_NETBLK_V4ID FOREIGN KEY (NETBLOCK_ID) REFERENCES NETBLOCK (NETBLOCK_ID)  ;

ALTER TABLE NETWORK_INTERFACE
	ADD CONSTRAINT FK_NETINT_NETINTTYP_ID FOREIGN KEY (NETWORK_INTERFACE_TYPE) REFERENCES VAL_NETWORK_INTERFACE_TYPE (NETWORK_INTERFACE_TYPE)  ;

ALTER TABLE NETWORK_INTERFACE
	ADD CONSTRAINT FK_NET_INT_LGL_PORT_ID FOREIGN KEY (LOGICAL_PORT_ID) REFERENCES LOGICAL_PORT (LOGICAL_PORT_ID);

ALTER TABLE NETWORK_INTERFACE
	ADD CONSTRAINT FK_NETWORK_INT_PHYS_PORT_DEVID FOREIGN KEY (PHYSICAL_PORT_ID, DEVICE_ID) REFERENCES PHYSICAL_PORT (PHYSICAL_PORT_ID, DEVICE_ID);

ALTER TABLE NETWORK_INTERFACE_NETBLOCK
	ADD CONSTRAINT FK_NETINT_NB_NBLK_ID FOREIGN KEY (NETWORK_INTERFACE_ID) REFERENCES NETWORK_INTERFACE (NETWORK_INTERFACE_ID)  DEFERRABLE  INITIALLY IMMEDIATE;

ALTER TABLE NETWORK_INTERFACE_NETBLOCK
	ADD CONSTRAINT FK_NETINT_NB_NETINT_ID FOREIGN KEY (NETBLOCK_ID) REFERENCES NETBLOCK (NETBLOCK_ID)  DEFERRABLE  INITIALLY IMMEDIATE;

ALTER TABLE NETWORK_INTERFACE_PURPOSE
	ADD CONSTRAINT FK_NETINT_PURPOSE_DEVICE_ID FOREIGN KEY (DEVICE_ID) REFERENCES DEVICE (DEVICE_ID);

ALTER TABLE NETWORK_INTERFACE_PURPOSE
	ADD CONSTRAINT FK_NETINT_PURPOSE_VAL_NETINT_P FOREIGN KEY (NETWORK_INTERFACE_PURPOSE) REFERENCES VAL_NETWORK_INTERFACE_PURPOSE (NETWORK_INTERFACE_PURPOSE);

ALTER TABLE NETWORK_INTERFACE_PURPOSE
	ADD CONSTRAINT FK_NETINT_PURP_DEV_NI_ID FOREIGN KEY (NETWORK_INTERFACE_ID, DEVICE_ID) REFERENCES NETWORK_INTERFACE (NETWORK_INTERFACE_ID, DEVICE_ID);

ALTER TABLE NETWORK_RANGE
	ADD CONSTRAINT FK_NET_RANGE_DNS_DOMAIN_ID FOREIGN KEY (DNS_DOMAIN_ID) REFERENCES DNS_DOMAIN (DNS_DOMAIN_ID);

ALTER TABLE NETWORK_RANGE
	ADD CONSTRAINT FK_NET_RANGE_START_NETBLOCK FOREIGN KEY (START_NETBLOCK_ID) REFERENCES NETBLOCK (NETBLOCK_ID)  ;

ALTER TABLE NETWORK_RANGE
	ADD CONSTRAINT FK_NET_RANGE_STOP_NETBLOCK FOREIGN KEY (STOP_NETBLOCK_ID) REFERENCES NETBLOCK (NETBLOCK_ID)  ;

ALTER TABLE NETWORK_SERVICE
	ADD CONSTRAINT FK_NETSVC_NETSVCTYP_ID FOREIGN KEY (NETWORK_SERVICE_TYPE) REFERENCES VAL_NETWORK_SERVICE_TYPE (NETWORK_SERVICE_TYPE)  ;

ALTER TABLE NETWORK_SERVICE
	ADD CONSTRAINT FK_NETSVC_CSVCENV FOREIGN KEY (SERVICE_ENVIRONMENT_ID) REFERENCES SERVICE_ENVIRONMENT (SERVICE_ENVIRONMENT_ID)  ;

ALTER TABLE NETWORK_SERVICE
	ADD CONSTRAINT FK_NETSVC_DNSID_ID FOREIGN KEY (DNS_RECORD_ID) REFERENCES DNS_RECORD (DNS_RECORD_ID)  ;

ALTER TABLE NETWORK_SERVICE
	ADD CONSTRAINT FK_NETSVC_DEVICE_ID FOREIGN KEY (DEVICE_ID) REFERENCES DEVICE (DEVICE_ID)  ;

ALTER TABLE NETWORK_SERVICE
	ADD CONSTRAINT FK_NETSVC_NETINT_ID FOREIGN KEY (NETWORK_INTERFACE_ID) REFERENCES NETWORK_INTERFACE (NETWORK_INTERFACE_ID)  ;

ALTER TABLE OPERATING_SYSTEM
	ADD CONSTRAINT FK_OS_FK_VAL_DEV_ARCH FOREIGN KEY (PROCESSOR_ARCHITECTURE) REFERENCES VAL_PROCESSOR_ARCHITECTURE (PROCESSOR_ARCHITECTURE)  ;

ALTER TABLE OPERATING_SYSTEM
	ADD CONSTRAINT FK_OS_REF_SWPKGREPOS FOREIGN KEY (SW_PACKAGE_REPOSITORY_ID) REFERENCES SW_PACKAGE_REPOSITORY (SW_PACKAGE_REPOSITORY_ID)  ;

ALTER TABLE OPERATING_SYSTEM
	ADD CONSTRAINT FK_OS_COMPANY FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE PERSON
	ADD CONSTRAINT FK_DIET_VAL_DIET FOREIGN KEY (DIET) REFERENCES VAL_DIET (DIET);

ALTER TABLE PERSON_ACCOUNT_REALM_COMPANY
	ADD CONSTRAINT FK_AC_AC_RLM_CPY_ACT_RLM_CPY FOREIGN KEY (ACCOUNT_REALM_ID, COMPANY_ID) REFERENCES ACCOUNT_REALM_COMPANY (ACCOUNT_REALM_ID, COMPANY_ID);

ALTER TABLE PERSON_ACCOUNT_REALM_COMPANY
	ADD CONSTRAINT FK_PERSON_ACCT_RLM_CMPY_PERSNI FOREIGN KEY (PERSON_ID) REFERENCES PERSON (PERSON_ID);

ALTER TABLE PERSON_AUTH_QUESTION
	ADD CONSTRAINT FK_PERSON_AUTH_QUESTION_PRSNID FOREIGN KEY (PERSON_ID) REFERENCES PERSON (PERSON_ID);

ALTER TABLE PERSON_AUTH_QUESTION
	ADD CONSTRAINT FK_PERSON_AQ_VAL_AUTH_QUES FOREIGN KEY (AUTH_QUESTION_ID) REFERENCES VAL_AUTH_QUESTION (AUTH_QUESTION_ID)  ;

ALTER TABLE PERSON_COMPANY
	ADD CONSTRAINT FK_PERSON_COMPANY_MGRPRSN_ID FOREIGN KEY (MANAGER_PERSON_ID) REFERENCES PERSON (PERSON_ID);

ALTER TABLE PERSON_COMPANY
	ADD CONSTRAINT FK_PERSON_COMPANY_SPRPRSN_ID FOREIGN KEY (SUPERVISOR_PERSON_ID) REFERENCES PERSON (PERSON_ID);

ALTER TABLE PERSON_COMPANY
	ADD CONSTRAINT FK_PERSON_COMPANY_PRSNCMPY_STA FOREIGN KEY (PERSON_COMPANY_STATUS) REFERENCES VAL_PERSON_STATUS (PERSON_STATUS);

ALTER TABLE PERSON_COMPANY
	ADD CONSTRAINT FK_PERSON_COMPANY_PRSNCMPYRELT FOREIGN KEY (PERSON_COMPANY_RELATION) REFERENCES VAL_PERSON_COMPANY_RELATION (PERSON_COMPANY_RELATION);

ALTER TABLE PERSON_COMPANY
	ADD CONSTRAINT FK_PERSON_COMPANY_COMPANY_ID FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE PERSON_COMPANY
	ADD CONSTRAINT FK_PERSON_COMPANY_PRSNID FOREIGN KEY (PERSON_ID) REFERENCES PERSON (PERSON_ID);

ALTER TABLE PERSON_COMPANY_BADGE
	ADD CONSTRAINT FK_PERSON_COMPANY_BADGE_PC FOREIGN KEY (COMPANY_ID, PERSON_ID) REFERENCES PERSON_COMPANY (COMPANY_ID, PERSON_ID);

ALTER TABLE PERSON_CONTACT
	ADD CONSTRAINT FK_PRSN_CNTCT_PRSCN_LOC FOREIGN KEY (PERSON_CONTACT_LOCATION_TYPE) REFERENCES VAL_PERSON_CONTACT_LOC_TYPE (PERSON_CONTACT_LOCATION_TYPE);

ALTER TABLE PERSON_CONTACT
	ADD CONSTRAINT FK_PRSN_CONTECT_CR_CMPYID FOREIGN KEY (PERSON_CONTACT_CR_COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE PERSON_CONTACT
	ADD CONSTRAINT FK_PERSON_CONTACT_TYP_TEC FOREIGN KEY (PERSON_CONTACT_TECHNOLOGY, PERSON_CONTACT_TYPE) REFERENCES VAL_PERSON_CONTACT_TECHNOLOGY (PERSON_CONTACT_TECHNOLOGY, PERSON_CONTACT_TYPE);

ALTER TABLE PERSON_CONTACT
	ADD CONSTRAINT FK_PERSON_CONTACT_PERSON_ID FOREIGN KEY (PERSON_ID) REFERENCES PERSON (PERSON_ID);

ALTER TABLE PERSON_CONTACT
	ADD CONSTRAINT FK_PERSON_TYPE_ISO_CODE FOREIGN KEY (ISO_COUNTRY_CODE) REFERENCES VAL_COUNTRY_CODE (ISO_COUNTRY_CODE)  ;

ALTER TABLE PERSON_IMAGE
	ADD CONSTRAINT FK_PERSON_IMAGE_PERSONID FOREIGN KEY (PERSON_ID) REFERENCES PERSON (PERSON_ID);

ALTER TABLE PERSON_IMAGE
	ADD CONSTRAINT FK_PERSON_FK_PERSON_VAL_IMAG FOREIGN KEY (IMAGE_TYPE) REFERENCES VAL_IMAGE_TYPE (IMAGE_TYPE)  ;

ALTER TABLE PERSON_IMAGE_USAGE
	ADD CONSTRAINT FK_PERSON_IMG_USG_PERSON_IMG_I FOREIGN KEY (PERSON_IMAGE_ID) REFERENCES PERSON_IMAGE (PERSON_IMAGE_ID);

ALTER TABLE PERSON_IMAGE_USAGE
	ADD CONSTRAINT FK_PERSON_IMG_USG_VAL_PRSN_IMG FOREIGN KEY (PERSON_IMAGE_USAGE) REFERENCES VAL_PERSON_IMAGE_USAGE (PERSON_IMAGE_USAGE);

ALTER TABLE PERSON_LOCATION
	ADD CONSTRAINT FK_PERSLOC_PERSID FOREIGN KEY (PERSON_ID) REFERENCES PERSON (PERSON_ID);

ALTER TABLE PERSON_LOCATION
	ADD CONSTRAINT FK_PERSLOC_PERSLOCTYP FOREIGN KEY (PERSON_LOCATION_TYPE) REFERENCES VAL_PERSON_LOCATION_TYPE (PERSON_LOCATION_TYPE);

ALTER TABLE PERSON_LOCATION
	ADD CONSTRAINT FK_PERSLOC_PHYSADDRID FOREIGN KEY (PHYSICAL_ADDRESS_ID) REFERENCES PHYSICAL_ADDRESS (PHYSICAL_ADDRESS_ID);

ALTER TABLE PERSON_LOCATION
	ADD CONSTRAINT FK_PERSLOC_SITE_CODE FOREIGN KEY (SITE_CODE) REFERENCES SITE (SITE_CODE);

ALTER TABLE PERSON_NOTE
	ADD CONSTRAINT FK_PERSON_NOTE_PERSON_ID FOREIGN KEY (PERSON_ID) REFERENCES PERSON (PERSON_ID);

ALTER TABLE PERSON_PARKING_PASS
	ADD CONSTRAINT FK_PERSON_PARKING_PASS_PERSONI FOREIGN KEY (PERSON_ID) REFERENCES PERSON (PERSON_ID);

ALTER TABLE PERSON_VEHICLE
	ADD CONSTRAINT FK_PERSON_VEHICLE_PRSNID FOREIGN KEY (PERSON_ID) REFERENCES PERSON (PERSON_ID);

ALTER TABLE PHYSICAL_ADDRESS
	ADD CONSTRAINT FK_PHYSADDR_ISO_CC FOREIGN KEY (ISO_COUNTRY_CODE) REFERENCES VAL_COUNTRY_CODE (ISO_COUNTRY_CODE);

ALTER TABLE PHYSICAL_ADDRESS
	ADD CONSTRAINT FK_PHYSADDR_COMPANY_ID FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE PHYSICAL_CONNECTION
	ADD CONSTRAINT FK_PATCH_PANEL_PORT1 FOREIGN KEY (PHYSICAL_PORT1_ID) REFERENCES PHYSICAL_PORT (PHYSICAL_PORT_ID)  ;

ALTER TABLE PHYSICAL_CONNECTION
	ADD CONSTRAINT FK_PATCH_PANEL_PORT2 FOREIGN KEY (PHYSICAL_PORT2_ID) REFERENCES PHYSICAL_PORT (PHYSICAL_PORT_ID)  ;

ALTER TABLE PHYSICAL_CONNECTION
	ADD CONSTRAINT FK_PHYSICAL_CONN_V_CABLE_TYPE FOREIGN KEY (CABLE_TYPE) REFERENCES VAL_CABLE_TYPE (CABLE_TYPE)  ;

ALTER TABLE PHYSICAL_PORT
	ADD CONSTRAINT FK_PHYS_PORT_REF_VPORTPURP FOREIGN KEY (PORT_PURPOSE) REFERENCES VAL_PORT_PURPOSE (PORT_PURPOSE)  ;

ALTER TABLE PHYSICAL_PORT
	ADD CONSTRAINT FK_PHYS_PORT_VAL_PROTOCOL FOREIGN KEY (PORT_PROTOCOL) REFERENCES VAL_PORT_PROTOCOL (PORT_PROTOCOL);

ALTER TABLE PHYSICAL_PORT
	ADD CONSTRAINT FK_PHYS_PORT_PORT_MEDIUM FOREIGN KEY (PORT_MEDIUM, PORT_PLUG_STYLE) REFERENCES VAL_PORT_MEDIUM (PORT_MEDIUM, PORT_PLUG_STYLE);

ALTER TABLE PHYSICAL_PORT
	ADD CONSTRAINT FK_PHYS_PORT_VAL_PORT_SPEED FOREIGN KEY (PORT_SPEED) REFERENCES VAL_PORT_SPEED (PORT_SPEED);

ALTER TABLE PHYSICAL_PORT
	ADD CONSTRAINT FK_PHYSICAL_PORT_LGL_PORT_ID FOREIGN KEY (LOGICAL_PORT_ID) REFERENCES LOGICAL_PORT (LOGICAL_PORT_ID);

ALTER TABLE PHYSICAL_PORT
	ADD CONSTRAINT FK_PHYS_PORT_DEV_ID FOREIGN KEY (DEVICE_ID) REFERENCES DEVICE (DEVICE_ID)  ;

ALTER TABLE PHYSICAL_PORT
	ADD CONSTRAINT FK_PHYSICAL_FK_PHYSIC_VAL_PORT FOREIGN KEY (PORT_TYPE) REFERENCES VAL_PORT_TYPE (PORT_TYPE)  ;

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_VAL_PRSNID FOREIGN KEY (PROPERTY_VALUE_PERSON_ID) REFERENCES PERSON (PERSON_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_PERSON_ID FOREIGN KEY (PERSON_ID) REFERENCES PERSON (PERSON_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_PV_NBLKCOL_ID FOREIGN KEY (PROPERTY_VALUE_NBLK_COLL_ID) REFERENCES NETBLOCK_COLLECTION (NETBLOCK_COLLECTION_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_NBLK_COLL_ID FOREIGN KEY (NETBLOCK_COLLECTION_ID) REFERENCES NETBLOCK_COLLECTION (NETBLOCK_COLLECTION_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROP_SVC_ENV_COLL_ID FOREIGN KEY (SERVICE_ENV_COLLECTION_ID) REFERENCES SERVICE_ENVIRONMENT_COLLECTION (SERVICE_ENV_COLLECTION_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_ACCTREALMID FOREIGN KEY (ACCOUNT_REALM_ID) REFERENCES ACCOUNT_REALM (ACCOUNT_REALM_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROP_L2NETID FOREIGN KEY (LAYER2_NETWORK_ID) REFERENCES LAYER2_NETWORK (LAYER2_NETWORK_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROP_L3NETID FOREIGN KEY (LAYER3_NETWORK_ID) REFERENCES LAYER3_NETWORK (LAYER3_NETWORK_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_PROP_COLL_ID FOREIGN KEY (PROPERTY_COLLECTION_ID) REFERENCES PROPERTY_COLLECTION (PROPERTY_COLLECTION_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_ACCTID FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_ACCT_COL FOREIGN KEY (ACCOUNT_COLLECTION_ID) REFERENCES ACCOUNT_COLLECTION (ACCOUNT_COLLECTION_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_COMPID FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_DEVCOLID FOREIGN KEY (DEVICE_COLLECTION_ID) REFERENCES DEVICE_COLLECTION (DEVICE_COLLECTION_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_DNSDOMID FOREIGN KEY (DNS_DOMAIN_ID) REFERENCES DNS_DOMAIN (DNS_DOMAIN_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_NMTYP FOREIGN KEY (PROPERTY_NAME, PROPERTY_TYPE) REFERENCES VAL_PROPERTY (PROPERTY_NAME, PROPERTY_TYPE);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_OSID FOREIGN KEY (OPERATING_SYSTEM_ID) REFERENCES OPERATING_SYSTEM (OPERATING_SYSTEM_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_PVAL_ACCT_COLID FOREIGN KEY (PROPERTY_VALUE_ACCOUNT_COLL_ID) REFERENCES ACCOUNT_COLLECTION (ACCOUNT_COLLECTION_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_PVAL_COMPID FOREIGN KEY (PROPERTY_VALUE_COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_PVAL_DNSDOMID FOREIGN KEY (PROPERTY_VALUE_DNS_DOMAIN_ID) REFERENCES DNS_DOMAIN (DNS_DOMAIN_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_PVAL_PWDTYP FOREIGN KEY (PROPERTY_VALUE_PASSWORD_TYPE) REFERENCES VAL_PASSWORD_TYPE (PASSWORD_TYPE);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_PVAL_SWPKGID FOREIGN KEY (PROPERTY_VALUE_SW_PACKAGE_ID) REFERENCES SW_PACKAGE (SW_PACKAGE_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_PVAL_TOKCOLID FOREIGN KEY (PROPERTY_VALUE_TOKEN_COL_ID) REFERENCES TOKEN_COLLECTION (TOKEN_COLLECTION_ID);

ALTER TABLE PROPERTY
	ADD CONSTRAINT FK_PROPERTY_SITE_CODE FOREIGN KEY (SITE_CODE) REFERENCES SITE (SITE_CODE);

ALTER TABLE PROPERTY_COLLECTION
	ADD CONSTRAINT FK_PROPCOL_PROPCOLTYPE FOREIGN KEY (PROPERTY_COLLECTION_TYPE) REFERENCES VAL_PROPERTY_COLLECTION_TYPE (PROPERTY_COLLECTION_TYPE);

ALTER TABLE PROPERTY_COLLECTION_HIER
	ADD CONSTRAINT FK_PROPCOLLHIER_PROPCOLID FOREIGN KEY (PROPERTY_COLLECTION_ID) REFERENCES PROPERTY_COLLECTION (PROPERTY_COLLECTION_ID);

ALTER TABLE PROPERTY_COLLECTION_HIER
	ADD CONSTRAINT FK_PROPCOLLHIER_CHLDPROPCOLL_I FOREIGN KEY (CHILD_PROPERTY_COLLECTION_ID) REFERENCES PROPERTY_COLLECTION (PROPERTY_COLLECTION_ID);

ALTER TABLE PROPERTY_COLLECTION_PROPERTY
	ADD CONSTRAINT FK_PROP_COL_PROPNAMTYP FOREIGN KEY (PROPERTY_NAME, PROPERTY_TYPE) REFERENCES VAL_PROPERTY (PROPERTY_NAME, PROPERTY_TYPE);

ALTER TABLE PROPERTY_COLLECTION_PROPERTY
	ADD CONSTRAINT FK_PROP_COLL_PROP_PROP_COLL_ID FOREIGN KEY (PROPERTY_COLLECTION_ID) REFERENCES PROPERTY_COLLECTION (PROPERTY_COLLECTION_ID);

ALTER TABLE PSEUDO_KLOGIN
	ADD CONSTRAINT FK_PKLGN_ACCT_DSTID FOREIGN KEY (DEST_ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID)  ;

ALTER TABLE RACK
	ADD CONSTRAINT FK_SITE_RACK FOREIGN KEY (SITE_CODE) REFERENCES SITE (SITE_CODE)  ;

ALTER TABLE RACK
	ADD CONSTRAINT FK_RACK_V_RACK_TYPE FOREIGN KEY (RACK_TYPE) REFERENCES VAL_RACK_TYPE (RACK_TYPE);

ALTER TABLE RACK_LOCATION
	ADD CONSTRAINT FK_RK_LOCATION__RACK_ID FOREIGN KEY (RACK_ID) REFERENCES RACK (RACK_ID)  ;

ALTER TABLE SERVICE_ENVIRONMENT
	ADD CONSTRAINT FK_VAL_SVCENV_PRODSTATE FOREIGN KEY (PRODUCTION_STATE) REFERENCES VAL_PRODUCTION_STATE (PRODUCTION_STATE);

ALTER TABLE SERVICE_ENVIRONMENT_COLL_HIER
	ADD CONSTRAINT FK_SVCENV_COLL_CHILD_SVCCOLLID FOREIGN KEY (CHILD_SERVICE_ENV_COLL_ID) REFERENCES SERVICE_ENVIRONMENT_COLLECTION (SERVICE_ENV_COLLECTION_ID);

ALTER TABLE SERVICE_ENVIRONMENT_COLL_HIER
	ADD CONSTRAINT FK_SVC_ENV_HIER_SVC_ENV_COLL_I FOREIGN KEY (SERVICE_ENV_COLLECTION_ID) REFERENCES SERVICE_ENVIRONMENT_COLLECTION (SERVICE_ENV_COLLECTION_ID);

ALTER TABLE SERVICE_ENVIRONMENT_COLLECTION
	ADD CONSTRAINT FK_SVC_ENV_COL_V_SVC_ENV_TYPE FOREIGN KEY (SERVICE_ENV_COLLECTION_TYPE) REFERENCES VAL_SERVICE_ENV_COLL_TYPE (SERVICE_ENV_COLLECTION_TYPE);

ALTER TABLE SITE
	ADD CONSTRAINT FK_SITE_COLO_COMPANY_ID FOREIGN KEY (COLO_COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE SITE
	ADD CONSTRAINT FK_SITE_PHYSADDR_ID FOREIGN KEY (PHYSICAL_ADDRESS_ID) REFERENCES PHYSICAL_ADDRESS (PHYSICAL_ADDRESS_ID);

ALTER TABLE SITE_NETBLOCK
	ADD CONSTRAINT FK_SITE_NETBLOCK_REF_NETBLOCK FOREIGN KEY (NETBLOCK_ID) REFERENCES NETBLOCK (NETBLOCK_ID)  ;

ALTER TABLE SITE_NETBLOCK
	ADD CONSTRAINT FK_SITE_NETBLOCK_REF_SITE FOREIGN KEY (SITE_CODE) REFERENCES SITE (SITE_CODE)  ;

ALTER TABLE SNMP_COMMSTR
	ADD CONSTRAINT FK_SNMPSTR_DEVICE_ID FOREIGN KEY (DEVICE_ID) REFERENCES DEVICE (DEVICE_ID)  ;

ALTER TABLE SNMP_COMMSTR
	ADD CONSTRAINT FK_SNMPSTR_SNMPSTRTYP_ID FOREIGN KEY (SNMP_COMMSTR_TYPE) REFERENCES VAL_SNMP_COMMSTR_TYPE (SNMP_COMMSTR_TYPE)  ;

ALTER TABLE SSH_KEY
	ADD CONSTRAINT FK_SSH_KEY_ENC_KEY_ID FOREIGN KEY (ENCRYPTION_KEY_ID) REFERENCES ENCRYPTION_KEY (ENCRYPTION_KEY_ID);

ALTER TABLE SSH_KEY
	ADD CONSTRAINT FK_SSH_KEY_SSH_KEY_TYPE FOREIGN KEY (SSH_KEY_TYPE) REFERENCES VAL_SSH_KEY_TYPE (SSH_KEY_TYPE);

ALTER TABLE STATIC_ROUTE
	ADD CONSTRAINT FK_STATRT_DEVSRC_ID FOREIGN KEY (DEVICE_SRC_ID) REFERENCES DEVICE (DEVICE_ID)  ;

ALTER TABLE STATIC_ROUTE
	ADD CONSTRAINT FK_STATRT_NBLK_ID FOREIGN KEY (NETBLOCK_ID) REFERENCES NETBLOCK (NETBLOCK_ID)  ;

ALTER TABLE STATIC_ROUTE
	ADD CONSTRAINT FK_STATRT_NETINTDST_ID FOREIGN KEY (NETWORK_INTERFACE_DST_ID) REFERENCES NETWORK_INTERFACE (NETWORK_INTERFACE_ID)  ;

ALTER TABLE STATIC_ROUTE_TEMPLATE
	ADD CONSTRAINT FK_NETBLOCK_ST_RT_SRC_NET FOREIGN KEY (NETBLOCK_SRC_ID) REFERENCES NETBLOCK (NETBLOCK_ID)  ;

ALTER TABLE STATIC_ROUTE_TEMPLATE
	ADD CONSTRAINT FK_STATIC_RT_NET_INTERFACE FOREIGN KEY (NETWORK_INTERFACE_DST_ID) REFERENCES NETWORK_INTERFACE (NETWORK_INTERFACE_ID)  ;

ALTER TABLE STATIC_ROUTE_TEMPLATE
	ADD CONSTRAINT FK_NETBLOCK_ST_RT_DST_NET FOREIGN KEY (NETBLOCK_ID) REFERENCES NETBLOCK (NETBLOCK_ID)  ;

ALTER TABLE SUDO_ACCT_COL_DEVICE_COLLECTIO
	ADD CONSTRAINT FK_SUDOACCOLL_FK_SUDO_U_ACTCL FOREIGN KEY (ACCOUNT_COLLECTION_ID) REFERENCES ACCOUNT_COLLECTION (ACCOUNT_COLLECTION_ID)  ;

ALTER TABLE SUDO_ACCT_COL_DEVICE_COLLECTIO
	ADD CONSTRAINT FK_ACCTCOL_REF_SUDOACCLDCL_RA FOREIGN KEY (RUN_AS_ACCOUNT_COLLECTION_ID) REFERENCES ACCOUNT_COLLECTION (ACCOUNT_COLLECTION_ID)  ;

ALTER TABLE SUDO_ACCT_COL_DEVICE_COLLECTIO
	ADD CONSTRAINT FK_SUDO_UCL_FK_DEV_CO_DEVICE_C FOREIGN KEY (DEVICE_COLLECTION_ID) REFERENCES DEVICE_COLLECTION (DEVICE_COLLECTION_ID)  ;

ALTER TABLE SUDO_ACCT_COL_DEVICE_COLLECTIO
	ADD CONSTRAINT FK_SUDO_ACL_FK_SUDO_U_SUDO_ALI FOREIGN KEY (SUDO_ALIAS_NAME) REFERENCES SUDO_ALIAS (SUDO_ALIAS_NAME)  DEFERRABLE  INITIALLY IMMEDIATE  ;

ALTER TABLE SVC_ENVIRONMENT_COLL_SVC_ENV
	ADD CONSTRAINT FK_SVC_ENV_COL_SVC_ENV FOREIGN KEY (SERVICE_ENVIRONMENT_ID) REFERENCES SERVICE_ENVIRONMENT (SERVICE_ENVIRONMENT_ID);

ALTER TABLE SVC_ENVIRONMENT_COLL_SVC_ENV
	ADD CONSTRAINT FK_SVC_ENV_COLL_SVC_COLL_ID FOREIGN KEY (SERVICE_ENV_COLLECTION_ID) REFERENCES SERVICE_ENVIRONMENT_COLLECTION (SERVICE_ENV_COLLECTION_ID);

ALTER TABLE SW_PACKAGE
	ADD CONSTRAINT FK_SWPKG_REF_VSWPKGTYPE FOREIGN KEY (SW_PACKAGE_TYPE) REFERENCES VAL_SW_PACKAGE_TYPE (SW_PACKAGE_TYPE)  ;

ALTER TABLE SW_PACKAGE_RELATION
	ADD CONSTRAINT FK_SW_PKG_REL_REF_VPKGRELTYPE FOREIGN KEY (PACKAGE_RELATION_TYPE) REFERENCES VAL_PACKAGE_RELATION_TYPE (PACKAGE_RELATION_TYPE)  ;

ALTER TABLE SW_PACKAGE_RELATION
	ADD CONSTRAINT FK_SW_PKGREL_REF_SW_PKG FOREIGN KEY (RELATED_SW_PACKAGE_ID) REFERENCES SW_PACKAGE (SW_PACKAGE_ID)  ;

ALTER TABLE SW_PACKAGE_RELATION
	ADD CONSTRAINT FK_SWPKGRLTN_REF_SWPKGREL FOREIGN KEY (SW_PACKAGE_RELEASE_ID) REFERENCES SW_PACKAGE_RELEASE (SW_PACKAGE_RELEASE_ID)  ;

ALTER TABLE SW_PACKAGE_RELEASE
	ADD CONSTRAINT FK_SW_PACKAGE_TYPE FOREIGN KEY (SW_PACKAGE_TYPE) REFERENCES VAL_SW_PACKAGE_TYPE (SW_PACKAGE_TYPE)  ;

ALTER TABLE SW_PACKAGE_RELEASE
	ADD CONSTRAINT FK_SW_PKG_REL_REF_SW_PKG_REP FOREIGN KEY (SW_PACKAGE_REPOSITORY_ID) REFERENCES SW_PACKAGE_REPOSITORY (SW_PACKAGE_REPOSITORY_ID)  ;

ALTER TABLE SW_PACKAGE_RELEASE
	ADD CONSTRAINT FK_SW_PKG_REL_REF_SYS_USER FOREIGN KEY (CREATION_ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID)  ;

ALTER TABLE SW_PACKAGE_RELEASE
	ADD CONSTRAINT FK_SW_PKG_REL_REF_VDEVARCH FOREIGN KEY (PROCESSOR_ARCHITECTURE) REFERENCES VAL_PROCESSOR_ARCHITECTURE (PROCESSOR_ARCHITECTURE)  ;

ALTER TABLE SW_PACKAGE_RELEASE
	ADD CONSTRAINT FK_SW_PKG_REL_REF_VSVCENV FOREIGN KEY (SERVICE_ENVIRONMENT_ID) REFERENCES SERVICE_ENVIRONMENT (SERVICE_ENVIRONMENT_ID)  ;

ALTER TABLE SW_PACKAGE_RELEASE
	ADD CONSTRAINT FK_SW_PKG_REL_REF_VSWPKGFMT FOREIGN KEY (SW_PACKAGE_FORMAT) REFERENCES VAL_SW_PACKAGE_FORMAT (SW_PACKAGE_FORMAT)  ;

ALTER TABLE SW_PACKAGE_RELEASE
	ADD CONSTRAINT FK_SW_PKG_REF_SW_PKG_REL FOREIGN KEY (SW_PACKAGE_ID) REFERENCES SW_PACKAGE (SW_PACKAGE_ID)  ;

ALTER TABLE TOKEN
	ADD CONSTRAINT FK_TOKEN_ENC_ID_ID FOREIGN KEY (ENCRYPTION_KEY_ID) REFERENCES ENCRYPTION_KEY (ENCRYPTION_KEY_ID)  ;

ALTER TABLE TOKEN
	ADD CONSTRAINT FK_TOKEN_REF_V_TOKEN_STATUS FOREIGN KEY (TOKEN_STATUS) REFERENCES VAL_TOKEN_STATUS (TOKEN_STATUS)  ;

ALTER TABLE TOKEN
	ADD CONSTRAINT FK_TOKEN_REF_V_TOKEN_TYPE FOREIGN KEY (TOKEN_TYPE) REFERENCES VAL_TOKEN_TYPE (TOKEN_TYPE)  ;

ALTER TABLE TOKEN_COLLECTION
	ADD CONSTRAINT FK_TOK_COL_MEM_TOKEN_COL_TYPE FOREIGN KEY (TOKEN_COLLECTION_TYPE) REFERENCES VAL_TOKEN_COLLECTION_TYPE (TOKEN_COLLECTION_TYPE)  ;

ALTER TABLE TOKEN_COLLECTION_HIER
	ADD CONSTRAINT FK_TOK_COL_HIER_CH_TOK_COLID FOREIGN KEY (TOKEN_COLLECTION_ID) REFERENCES TOKEN_COLLECTION (TOKEN_COLLECTION_ID);

ALTER TABLE TOKEN_COLLECTION_HIER
	ADD CONSTRAINT FK_TOK_COL_HIER_TOK_COLID FOREIGN KEY (CHILD_TOKEN_COLLECTION_ID) REFERENCES TOKEN_COLLECTION (TOKEN_COLLECTION_ID);

ALTER TABLE TOKEN_COLLECTION_TOKEN
	ADD CONSTRAINT FK_TOK_COL_TOK_TOKEN_COL_ID FOREIGN KEY (TOKEN_COLLECTION_ID) REFERENCES TOKEN_COLLECTION (TOKEN_COLLECTION_ID)  ;

ALTER TABLE TOKEN_COLLECTION_TOKEN
	ADD CONSTRAINT FK_TOK_COL_TOK_TOKEN_ID FOREIGN KEY (TOKEN_ID) REFERENCES TOKEN (TOKEN_ID)  ;

ALTER TABLE TOKEN_SEQUENCE
	ADD CONSTRAINT FK_TOKEN_SEQ_REF_TOKEN FOREIGN KEY (TOKEN_ID) REFERENCES TOKEN (TOKEN_ID)  ;

ALTER TABLE UNIX_GROUP
	ADD CONSTRAINT FK_UNXGRP_UCLSID FOREIGN KEY (ACCOUNT_COLLECTION_ID) REFERENCES ACCOUNT_COLLECTION (ACCOUNT_COLLECTION_ID);

ALTER TABLE VAL_APP_KEY_VALUES
	ADD CONSTRAINT FK_VAPPKEYVAL_REF_VAPPKEY FOREIGN KEY (APP_KEY) REFERENCES VAL_APP_KEY (APP_KEY)  ;

ALTER TABLE VAL_ENCAPSULATION_MODE
	ADD CONSTRAINT FK_VAL_ENCAP_MODE_TYPE FOREIGN KEY (ENCAPSULATION_TYPE) REFERENCES VAL_ENCAPSULATION_TYPE (ENCAPSULATION_TYPE);

ALTER TABLE VAL_PERSON_CONTACT_TECHNOLOGY
	ADD CONSTRAINT FK_VAL_PERS_CTCT_TECH_TYPE FOREIGN KEY (PERSON_CONTACT_TYPE) REFERENCES VAL_PERSON_CONTACT_TYPE (PERSON_CONTACT_TYPE);

ALTER TABLE VAL_PORT_MEDIUM
	ADD CONSTRAINT FK_VAL_PRT_MEDM_PRT_PLUG_TYP FOREIGN KEY (PORT_PLUG_STYLE) REFERENCES VAL_PORT_PLUG_STYLE (PORT_PLUG_STYLE);

ALTER TABLE VAL_PORT_PROTOCOL_SPEED
	ADD CONSTRAINT FK_V_PRT_PROTO_SPEED_SPEED FOREIGN KEY (PORT_SPEED) REFERENCES VAL_PORT_SPEED (PORT_SPEED);

ALTER TABLE VAL_PORT_PROTOCOL_SPEED
	ADD CONSTRAINT FK_V_PRT_PROTO_SPEED_PROTO FOREIGN KEY (PORT_PROTOCOL) REFERENCES VAL_PORT_PROTOCOL (PORT_PROTOCOL);

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT FK_VALPROP_PV_ACTYP_RST FOREIGN KEY (PROP_VAL_ACCT_COLL_TYPE_RSTRCT) REFERENCES VAL_ACCOUNT_COLLECTION_TYPE (ACCOUNT_COLLECTION_TYPE);

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT FK_VAL_PROP_NBLK_COLL_TYPE FOREIGN KEY (PROP_VAL_NBLK_COLL_TYPE_RSTRCT) REFERENCES VAL_NETBLOCK_COLLECTION_TYPE (NETBLOCK_COLLECTION_TYPE);

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT FK_VALPROP_PROPDTTYP FOREIGN KEY (PROPERTY_DATA_TYPE) REFERENCES VAL_PROPERTY_DATA_TYPE (PROPERTY_DATA_TYPE)  NOT DEFERRABLE;

ALTER TABLE VAL_PROPERTY
	ADD CONSTRAINT FK_VALPROP_PROPTYP FOREIGN KEY (PROPERTY_TYPE) REFERENCES VAL_PROPERTY_TYPE (PROPERTY_TYPE)  NOT DEFERRABLE;

ALTER TABLE VAL_PROPERTY_TYPE
	ADD CONSTRAINT FK_PROP_TYP_PV_UCTYP_RST FOREIGN KEY (PROP_VAL_ACCT_COLL_TYPE_RSTRCT) REFERENCES VAL_ACCOUNT_COLLECTION_TYPE (ACCOUNT_COLLECTION_TYPE);

ALTER TABLE VAL_PROPERTY_VALUE
	ADD CONSTRAINT FK_VALPROVAL_NAMTYP FOREIGN KEY (PROPERTY_NAME, PROPERTY_TYPE) REFERENCES VAL_PROPERTY (PROPERTY_NAME, PROPERTY_TYPE);

ALTER TABLE VOE
	ADD CONSTRAINT FK_VOE_REF_VVOESTATE FOREIGN KEY (VOE_STATE) REFERENCES VAL_VOE_STATE (VOE_STATE)  ;

ALTER TABLE VOE
	ADD CONSTRAINT FK_VOE_REF_V_SVCENV FOREIGN KEY (SERVICE_ENVIRONMENT_ID) REFERENCES SERVICE_ENVIRONMENT (SERVICE_ENVIRONMENT_ID)  ;

ALTER TABLE VOE_RELATION
	ADD CONSTRAINT FK_VOE_REF_VOE_REL_VOE FOREIGN KEY (VOE_ID) REFERENCES VOE (VOE_ID)  ;

ALTER TABLE VOE_RELATION
	ADD CONSTRAINT FK_VOE_RLTN_REF_VUPGSEV FOREIGN KEY (UPGRADE_SEVERITY) REFERENCES VAL_UPGRADE_SEVERITY (UPGRADE_SEVERITY)  ;

ALTER TABLE VOE_RELATION
	ADD CONSTRAINT FK_VOE_REF_VOE_REL_RLTDVOE FOREIGN KEY (RELATED_VOE_ID) REFERENCES VOE (VOE_ID)  ;

ALTER TABLE VOE_SW_PACKAGE
	ADD CONSTRAINT FK_VOE_SWPKG_REF_VOE FOREIGN KEY (VOE_ID) REFERENCES VOE (VOE_ID)  ;

ALTER TABLE VOE_SW_PACKAGE
	ADD CONSTRAINT FK_VOE_SWPKG_REF_SWPKG_REL FOREIGN KEY (SW_PACKAGE_RELEASE_ID) REFERENCES SW_PACKAGE_RELEASE (SW_PACKAGE_RELEASE_ID)  ;

ALTER TABLE VOE_SYMBOLIC_TRACK
	ADD CONSTRAINT FK_VSYMBTRK_REF_VVSYMBTRNM FOREIGN KEY (SYMBOLIC_TRACK_NAME) REFERENCES VAL_SYMBOLIC_TRACK_NAME (SYMBOLIC_TRACK_NAME)  ;

ALTER TABLE VOE_SYMBOLIC_TRACK
	ADD CONSTRAINT FK_VOESYMBTRK_REF_VUPGSEV FOREIGN KEY (UPGRADE_SEVERITY_THRESHOLD) REFERENCES VAL_UPGRADE_SEVERITY (UPGRADE_SEVERITY)  ;

ALTER TABLE VOE_SYMBOLIC_TRACK
	ADD CONSTRAINT FK_VOESYMBTRK_REF_SWPKGRPOS FOREIGN KEY (SW_PACKAGE_REPOSITORY_ID) REFERENCES SW_PACKAGE_REPOSITORY (SW_PACKAGE_REPOSITORY_ID)  ;

ALTER TABLE VOE_SYMBOLIC_TRACK
	ADD CONSTRAINT FK_VOE_SYMBTRK_REF_PENDVOE FOREIGN KEY (PENDING_VOE_ID) REFERENCES VOE (VOE_ID)  ;

ALTER TABLE VOE_SYMBOLIC_TRACK
	ADD CONSTRAINT FK_VOE_SYMBTRK_REF_ACTVVOE FOREIGN KEY (ACTIVE_VOE_ID) REFERENCES VOE (VOE_ID)  ;

ALTER TABLE X509_CERTIFICATE
	ADD CONSTRAINT FK_X509_CERT_CERT FOREIGN KEY (SIGNING_CERT_ID) REFERENCES X509_CERTIFICATE (X509_CERT_ID)  ;

ALTER TABLE X509_CERTIFICATE
	ADD CONSTRAINT FK_X509CERT_ENC_ID_ID FOREIGN KEY (ENCRYPTION_KEY_ID) REFERENCES ENCRYPTION_KEY (ENCRYPTION_KEY_ID)  ;

ALTER TABLE X509_KEY_USAGE_ATTRIBUTE
	ADD CONSTRAINT FK_X509_KEY_USG_CATEGORIZATION FOREIGN KEY (X509_KEY_USG_CAT, X509_KEY_USG) REFERENCES X509_KEY_USAGE_CATEGORIZATION (X509_KEY_USG_CAT, X509_KEY_USG)  ;

ALTER TABLE X509_KEY_USAGE_ATTRIBUTE
	ADD CONSTRAINT FK_X509_CERTIFICATE FOREIGN KEY (X509_CERT_ID) REFERENCES X509_CERTIFICATE (X509_CERT_ID)  ;

ALTER TABLE X509_KEY_USAGE_CATEGORIZATION
	ADD CONSTRAINT FK_KEY_USAGE_CATEGORY FOREIGN KEY (X509_KEY_USG_CAT) REFERENCES VAL_X509_KEY_USAGE_CATEGORY (X509_KEY_USG_CAT)  ;

ALTER TABLE X509_KEY_USAGE_CATEGORIZATION
	ADD CONSTRAINT FK_X509_KEY_USAGE FOREIGN KEY (X509_KEY_USG) REFERENCES VAL_X509_KEY_USAGE (X509_KEY_USG)  ;
