map permissions to services - this is based on discusson with joe about
vault.

this is loosely what Joe said:

a policy is a collection of paths and permissions to those paths

[Serivce Model Service] -> [Vault Policy] -> [Vault Policy Path]

probably need the concept of owner, security owner and so on for a given
service 

a vault path can have 1/7 static perms: 
	create, read, update, delete, list, deny, and sudo

approles and polices are tied 1:1 and no reason not to do otherwise

CONSIDER:
        We do need to also support overriding some of the approle
        settings.. like how long a secret id is valid for, or a
        token. We could define that in the policy table if we are
        forcing the 1:1 relationship.. it makes decoupling it later
        a slightly more annoying process but that’s future Joe’s
        problem? I don’t expect to do that but we can talk more.

vault policy
 - id
 - application id (svcmodel)
 - short name  ("stab-read"
 - disable approle boolean - create an approle for it or not?
 - secret ttl -[ default 720h ] - how long secrets live
 - token ttl - [ default 48h ] - how long "tgt" (secret+role) lives
 - token_max_ttl
 - secret_max_uses - default null / 0 for unlimted
 - token_max_uses - default null / 0 for unlimted
 - last_updated - whenever path under changes (XXX - how relation tracked?)

 vault policy path
 - path id
 - vauld policy id
 - path in vault
 - joe broke out 7 columns, I'd do (policy path, perm table)

 XXX - also need to figure out how to map this to account collections

=== === === === === === === === === === === === === === === === === === === ===
maybe something like:

authorization_policy_type
  - type [ say, vault ]
  - can_haz_hier

authorization_policy_type_permitted_permission
 - type
 - permission
 - description

authorization_policy_property_type
  - default
  - ttl and various properties go here - description

authorization_policy
 - id
 - name, type

authorization_policy_property
  - id
  - ttl and various properties go here

authorization_policy_permission
 - authorization_policy_id
 - permission
 - pk, both

authorization_policy_collection
 - id,name,type
authorization_policy_collection_authorization_policy
 - id,name,type,id
authorization_policy_collection_hier
 - id
 - child
 - can only be flat hierarchy (can only be a parent once)

 ^- add to property?

how to map to services/instances? how to map to svc environments? prod state?
properties?  something else?

how does production state fit into all this and if we're giving prod states
to devices do we also give them to other things or just envs?  or both?
